#!/usr/bin/env python3
"""
–û—Ç–ª–∞–¥–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ Tavily –¥–ª—è –ø–æ–∏—Å–∫–∞ Brightcove –≤–∏–¥–µ–æ
"""

import sys
sys.path.append('scripts')
from web_parser import TavilyParser
import logging

logging.basicConfig(level=logging.INFO)

def debug_tavily_content():
    """–û—Ç–ª–∞–¥–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ Tavily"""
    
    print("üîç –û—Ç–ª–∞–¥–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ Tavily –¥–ª—è –ø–æ–∏—Å–∫–∞ Brightcove –≤–∏–¥–µ–æ:")
    print("=" * 80)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Tavily –ø–∞—Ä—Å–µ—Ä
    tavily_parser = TavilyParser()
    
    # URL —Å—Ç–∞—Ç—å–∏
    test_url = "https://www.politico.com/news/2025/09/16/cruz-says-first-amendment-absolutely-protects-hate-speech-in-wake-of-charlie-kirk-killing-00566448"
    
    print(f"URL: {test_url}")
    print("=" * 80)
    
    # –ü–∞—Ä—Å–∏–º —Å—Ç–∞—Ç—å—é
    parsed_data = tavily_parser.search_article(test_url)
    
    if parsed_data and parsed_data.get('success'):
        print("‚úÖ –°—Ç–∞—Ç—å—è —É—Å–ø–µ—à–Ω–æ —Å–ø–∞—Ä—Å–µ–Ω–∞")
        print(f"Title: {parsed_data.get('title')}")
        print(f"Source: {parsed_data.get('source')}")
        print(f"Images: {len(parsed_data.get('images', []))}")
        print(f"Videos: {len(parsed_data.get('videos', []))}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ HTML –¥–ª—è –ø–æ–∏—Å–∫–∞ Brightcove
        if 'html' in parsed_data:
            html_content = parsed_data['html']
            print(f"\nüìÑ HTML —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ ({len(html_content)} —Å–∏–º–≤–æ–ª–æ–≤):")
            print("-" * 40)
            
            # –ò—â–µ–º Brightcove iframe
            if 'brightcove' in html_content.lower():
                print("‚úÖ –ù–∞–π–¥–µ–Ω 'brightcove' –≤ HTML!")
                
                # –ò—â–µ–º iframe —Å brightcove
                import re
                iframe_pattern = r'<iframe[^>]*src=["\']([^"\']*brightcove[^"\']*)["\'][^>]*>'
                iframe_matches = re.findall(iframe_pattern, html_content, re.IGNORECASE)
                
                if iframe_matches:
                    print(f"üé• –ù–∞–π–¥–µ–Ω–æ {len(iframe_matches)} Brightcove iframe:")
                    for i, iframe_src in enumerate(iframe_matches):
                        print(f"  {i+1}. {iframe_src}")
                else:
                    print("‚ùå Brightcove iframe –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ HTML")
                    
                # –ò—â–µ–º videoId
                video_id_pattern = r'videoId=(\d+)'
                video_id_matches = re.findall(video_id_pattern, html_content, re.IGNORECASE)
                
                if video_id_matches:
                    print(f"üé¨ –ù–∞–π–¥–µ–Ω–æ {len(video_id_matches)} videoId:")
                    for i, video_id in enumerate(video_id_matches):
                        print(f"  {i+1}. {video_id}")
                else:
                    print("‚ùå videoId –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ HTML")
                    
            else:
                print("‚ùå 'brightcove' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ HTML")
                
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 1000 —Å–∏–º–≤–æ–ª–æ–≤ HTML
            print(f"\nüìÑ –ü–µ—Ä–≤—ã–µ 1000 —Å–∏–º–≤–æ–ª–æ–≤ HTML:")
            print("-" * 40)
            print(html_content[:1000])
            print("...")
            
        else:
            print("‚ùå HTML —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º content
        if 'content' in parsed_data:
            content = parsed_data['content']
            print(f"\nüìù Content —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ ({len(content)} —Å–∏–º–≤–æ–ª–æ–≤):")
            print("-" * 40)
            
            if 'brightcove' in content.lower():
                print("‚úÖ –ù–∞–π–¥–µ–Ω 'brightcove' –≤ content!")
            else:
                print("‚ùå 'brightcove' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ content")
                
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 500 —Å–∏–º–≤–æ–ª–æ–≤ content
            print(f"\nüìù –ü–µ—Ä–≤—ã–µ 500 —Å–∏–º–≤–æ–ª–æ–≤ content:")
            print("-" * 40)
            print(content[:500])
            print("...")
            
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–ø–∞—Ä—Å–∏—Ç—å —Å—Ç–∞—Ç—å—é")

if __name__ == "__main__":
    debug_tavily_content()
