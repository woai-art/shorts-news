#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –≤–∏–¥–µ–æ —Å AP News
"""

import sys
sys.path.append('scripts')
from web_parser import WebParser
import logging

logging.basicConfig(level=logging.INFO)

def test_apnews_video():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –≤–∏–¥–µ–æ —Å AP News"""
    
    print("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –≤–∏–¥–µ–æ —Å AP News:")
    print("=" * 60)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞—Ä—Å–µ—Ä
    web_parser = WebParser('config/config.yaml')
    
    # URL AP News –≤–∏–¥–µ–æ
    test_url = "https://apnews.com/video/images-of-trump-and-epstein-projected-on-windsor-castle-as-us-president-visits-uk-6b004c3ab53247078795780c5c4bf7b1"
    
    print(f"URL: {test_url}")
    print("=" * 60)
    
    try:
        # –ü–∞—Ä—Å–∏–º —á–µ—Ä–µ–∑ Tavily (–æ–±—Ö–æ–¥ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫)
        print("üîÑ –ü—Ä–æ–±—É–µ–º Tavily –ø–∞—Ä—Å–∏–Ω–≥...")
        tavily_parser = web_parser.tavily_parser
        result = tavily_parser.search_article(test_url)
        
        if result and result.get('success'):
            print("‚úÖ Tavily —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–∏–ª –∫–æ–Ω—Ç–µ–Ω—Ç")
            print(f"Title: {result.get('title', 'N/A')}")
            print(f"Source: {result.get('source', 'N/A')}")
            print(f"Images: {len(result.get('images', []))}")
            print(f"Videos: {len(result.get('videos', []))}")
            
            if result.get('videos'):
                print(f"Video URLs: {result['videos']}")
            else:
                print("‚ùå –í–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —á–µ—Ä–µ–∑ Tavily")
                
                # –ü—Ä–æ–±—É–µ–º –∏–∑–≤–ª–µ—á—å –≤–∏–¥–µ–æ –∏–∑ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
                content = result.get('content', '')
                print(f"\nüîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç ({len(content)} —Å–∏–º–≤–æ–ª–æ–≤):")
                
                # –ò—â–µ–º –≤–∏–¥–µ–æ –≤ –∫–æ–Ω—Ç–µ–Ω—Ç–µ
                import re
                
                # –ò—â–µ–º HTML5 video —Ç–µ–≥–∏
                video_pattern = r'<video[^>]+src=["\']([^"\']+)["\'][^>]*>'
                video_matches = re.findall(video_pattern, content, re.IGNORECASE)
                print(f"HTML5 video —Ç–µ–≥–∏: {video_matches}")
                
                # –ò—â–µ–º iframe —Å –≤–∏–¥–µ–æ
                iframe_pattern = r'<iframe[^>]+src=["\']([^"\']+)["\'][^>]*>'
                iframe_matches = re.findall(iframe_pattern, content, re.IGNORECASE)
                print(f"iframe —Ç–µ–≥–∏: {iframe_matches}")
                
                # –ò—â–µ–º data-–∞—Ç—Ä–∏–±—É—Ç—ã
                data_pattern = r'data-[^=]*video[^=]*=["\']([^"\']+)["\']'
                data_matches = re.findall(data_pattern, content, re.IGNORECASE)
                print(f"data-video –∞—Ç—Ä–∏–±—É—Ç—ã: {data_matches}")
                
                # –ò—â–µ–º JSON —Å –≤–∏–¥–µ–æ
                json_pattern = r'"video[^"]*":\s*"([^"]+)"'
                json_matches = re.findall(json_pattern, content, re.IGNORECASE)
                print(f"JSON video: {json_matches}")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 500 —Å–∏–º–≤–æ–ª–æ–≤ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
                print(f"\nüìÑ –ü–µ—Ä–≤—ã–µ 500 —Å–∏–º–≤–æ–ª–æ–≤ –∫–æ–Ω—Ç–µ–Ω—Ç–∞:")
                print(content[:500])
        else:
            print("‚ùå Tavily –Ω–µ —Å–º–æ–≥ –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    finally:
        web_parser.close()

if __name__ == "__main__":
    test_apnews_video()
