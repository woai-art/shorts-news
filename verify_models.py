#!/usr/bin/env python3
"""
–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–≥–æ, —á—Ç–æ –≤—Å–µ –º–æ–¥–µ–ª–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç gemini-2.0-flash
"""

import os
import re

def check_file_for_models(filename, expected_model):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–∞ –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏"""
    try:
        with open(filename, 'r', encoding='utf-8') as f:
            content = f.read()

        # –ò—â–µ–º –≤—Å–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è gemini –º–æ–¥–µ–ª–µ–π
        gemini_models = re.findall(r'gemini-[0-9]+\.[0-9]+-flash', content)
        models_mentions = re.findall(r'models/gemini-[0-9]+\.[0-9]+-flash', content)

        all_models = gemini_models + models_mentions

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –º–æ–¥–µ–ª–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –æ–∂–∏–¥–∞–µ–º–æ–π
        correct_models = [m for m in all_models if expected_model in m or f'models/{expected_model}' in m]
        incorrect_models = [m for m in all_models if expected_model not in m and f'models/{expected_model}' not in m]

        return {
            'filename': filename,
            'total_models': len(all_models),
            'correct_models': correct_models,
            'incorrect_models': incorrect_models,
            'has_issues': len(incorrect_models) > 0
        }

    except Exception as e:
        return {
            'filename': filename,
            'error': str(e),
            'has_issues': True
        }

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏"""
    print("üîç –ü–†–û–í–ï–†–ö–ê –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø –ú–û–î–ï–õ–ï–ô GEMINI-2.0-FLASH")
    print("=" * 60)

    expected_model = "gemini-2.0-flash"

    # –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    files_to_check = [
        'config/config.yaml',
        'scripts/llm_processor.py',
        'scripts/llm_direct_provider.py',
        'test_gemini_api.py',
        'gemini_direct.py',
        'test_fixed_system.py'
    ]

    all_good = True
    results = []

    for filename in files_to_check:
        if os.path.exists(filename):
            result = check_file_for_models(filename, expected_model)
            results.append(result)

            if result.get('has_issues', False):
                all_good = False

                if 'error' in result:
                    print(f"‚ùå {filename}: –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è - {result['error']}")
                else:
                    print(f"‚ö†Ô∏è  {filename}:")
                    if result['incorrect_models']:
                        print(f"    ‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –º–æ–¥–µ–ª–∏: {result['incorrect_models']}")
                    print(f"    üìä –í—Å–µ–≥–æ –º–æ–¥–µ–ª–µ–π: {result['total_models']}")
            else:
                if result['total_models'] > 0:
                    print(f"‚úÖ {filename}: –í—Å–µ –º–æ–¥–µ–ª–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã ({result['total_models']} –Ω–∞–π–¥–µ–Ω–æ)")
                else:
                    print(f"‚ÑπÔ∏è  {filename}: –ú–æ–¥–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        else:
            print(f"‚ùå {filename}: –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
            all_good = False

    print("\\n" + "=" * 60)
    if all_good:
        print("üéâ –í–°–ï –§–ê–ô–õ–´ –ò–°–ü–û–õ–¨–ó–£–Æ–¢ –ü–†–ê–í–ò–õ–¨–ù–´–ï –ú–û–î–ï–õ–ò!")
        print(f"‚úÖ –ú–æ–¥–µ–ª—å {expected_model} –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤–µ–∑–¥–µ")
    else:
        print("‚ö†Ô∏è  –ù–ê–ô–î–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´ –° –ú–û–î–ï–õ–Ø–ú–ò!")
        print("üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª—ã –≤—ã—à–µ –∏ –∏—Å–ø—Ä–∞–≤—å—Ç–µ –º–æ–¥–µ–ª–∏")

    print("\\nüìã –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–û–î–†–û–ë–ù–û:")
    for result in results:
        if not result.get('has_issues', True):
            continue
        print(f"\\nüîç {result['filename']}:")
        if 'error' in result:
            print(f"  ‚ùå –û—à–∏–±–∫–∞: {result['error']}")
        else:
            if result['correct_models']:
                print(f"  ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ: {result['correct_models']}")
            if result['incorrect_models']:
                print(f"  ‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ: {result['incorrect_models']}")
            print(f"  üìä –í—Å–µ–≥–æ: {result['total_models']}")

if __name__ == "__main__":
    main()
