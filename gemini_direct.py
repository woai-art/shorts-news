#!/usr/bin/env python3
"""
–ü—Ä—è–º–æ–π –≤—ã–∑–æ–≤ Gemini API —á–µ—Ä–µ–∑ HTTP –±–µ–∑ SDK
–≠—Ç–æ –æ–±—Ö–æ–¥–Ω–æ–π –ø—É—Ç—å –¥–ª—è –ø—Ä–æ–±–ª–µ–º—ã —Å OAuth
"""

import os
import json
import requests
from typing import Optional, Dict, Any

class GeminiDirect:
    """–ü—Ä—è–º–æ–π –∫–ª–∏–µ–Ω—Ç –¥–ª—è Gemini API"""

    def __init__(self, api_key: str):
        self.api_key = api_key
        self.base_url = "https://generativelanguage.googleapis.com/v1beta/models"
        self.session = requests.Session()
        self.session.headers.update({
            'Content-Type': 'application/json'
        })

    def generate_content(self, prompt: str, model: str = "gemini-2.0-flash") -> Optional[str]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ –ø—Ä—è–º–æ–π API –≤—ã–∑–æ–≤"""
        url = f"{self.base_url}/{model}:generateContent"
        params = {'key': self.api_key}

        data = {
            "contents": [{
                "parts": [{
                    "text": prompt
                }]
            }],
            "generationConfig": {
                "temperature": 0.7,
                "maxOutputTokens": 1000,
                "topP": 1,
                "topK": 1
            }
        }

        try:
            print(f"üì° –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ {model}...")
            response = self.session.post(url, params=params, json=data, timeout=30)

            if response.status_code == 200:
                result = response.json()
                if 'candidates' in result and len(result['candidates']) > 0:
                    content = result['candidates'][0]['content']
                    if 'parts' in content and len(content['parts']) > 0:
                        return content['parts'][0]['text']

            print(f"‚ùå –û—à–∏–±–∫–∞ API: {response.status_code}")
            print(f"–û—Ç–≤–µ—Ç: {response.text[:500]}...")
            return None

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
            return None

def test_direct_api():
    """–¢–µ—Å—Ç –ø—Ä—è–º–æ–≥–æ API –≤—ã–∑–æ–≤–∞"""
    print("üß™ –¢–ï–°–¢ –ü–†–Ø–ú–û–ì–û –í–´–ó–û–í–ê GEMINI API")
    print("=" * 50)

    # –ü–æ–ª—É—á–∞–µ–º API –∫–ª—é—á
    api_key = os.getenv('GOOGLE_API_KEY') or os.getenv('GEMINI_API_KEY')

    if not api_key:
        print("‚ùå API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ GOOGLE_API_KEY –∏–ª–∏ GEMINI_API_KEY –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        return False

    print(f"‚úÖ API –∫–ª—é—á –Ω–∞–π–¥–µ–Ω (–¥–ª–∏–Ω–∞: {len(api_key)} —Å–∏–º–≤–æ–ª–æ–≤)")

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç
    client = GeminiDirect(api_key)

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å
    test_prompt = "Say 'Hello from direct API!' in exactly 5 words."
    print(f"üì§ –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å: {test_prompt}")

    result = client.generate_content(test_prompt)

    if result:
        print(f"‚úÖ –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω: {result.strip()}")
        return True
    else:
        print("‚ùå –û—Ç–≤–µ—Ç –Ω–µ –ø–æ–ª—É—á–µ–Ω")
        return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    success = test_direct_api()

    if success:
        print("\nüéâ –ü–†–Ø–ú–û–ô API –í–´–ó–û–í –†–ê–ë–û–¢–ê–ï–¢!")
        print("‚úÖ API –∫–ª—é—á –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π")
        print("‚úÖ –ò–Ω—Ç–µ—Ä–Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        print("‚úÖ Gemini API –¥–æ—Å—Ç—É–ø–µ–Ω")
        print("\nüí° –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä—è–º–æ–π API –≤–º–µ—Å—Ç–æ SDK")
    else:
        print("\nüí• –ü–†–Ø–ú–û–ô API –í–´–ó–û–í –ù–ï –†–ê–ë–û–¢–ê–ï–¢!")
        print("üîß –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
        print("1. –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π API –∫–ª—é—á")
        print("2. –ö–ª—é—á –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∏–ª–∏ –∏—Å—Ç–µ–∫")
        print("3. –ü—Ä–æ–±–ª–µ–º—ã —Å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–æ–º")
        print("4. API –∫–≤–æ—Ç–∞ –∏—Å—á–µ—Ä–ø–∞–Ω–∞")
        print("\nüîó –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–ª—é—á: https://makersuite.google.com/app/apikey")

    return success

if __name__ == "__main__":
    main()
