#!/usr/bin/env python3
"""
Telegram –±–æ—Ç –¥–ª—è —Å–∏—Å—Ç–µ–º—ã shorts_news
–ü—Ä–∏–Ω–∏–º–∞–µ—Ç —Å—Å—ã–ª–∫–∏ –Ω–∞ –Ω–æ–≤–æ—Å—Ç–∏ –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –∏—Ö –≤ –æ—á–µ—Ä–µ–¥—å –æ–±—Ä–∞–±–æ—Ç–∫–∏
"""

import os
import sys
import logging
import asyncio
import re
from typing import Dict, Optional, Any
import yaml
import sqlite3
from datetime import datetime

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—É—Ç–∏ –∫ –º–æ–¥—É–ª—è–º
sys.path.append(os.path.dirname(__file__))

from telegram import Update, Bot
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class NewsTelegramBot:
    """Telegram –±–æ—Ç –¥–ª—è –ø—Ä–∏–µ–º–∞ –Ω–æ–≤–æ—Å—Ç–µ–π"""

    def __init__(self, config_path: str):
        self.config = self._load_config(config_path)
        self.project_path = self.config['project']['base_path']

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram
        self.telegram_config = self.config['telegram']
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω –¥–ª—è tubepull_bot
        self.bot_token = "8397627473:AAFZmCcoAEgjAI1vtaMXEpeSq6J8LJGI-eg"
        self.channel = self.telegram_config.get('channel', "@tubepull_bot")
        self.channel_id = self.telegram_config.get('channel_id', "")

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–µ–±-–ø–∞—Ä—Å–µ—Ä–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Å—ã–ª–æ–∫
        from web_parser import WebParser
        self.web_parser = WebParser(config_path)

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π
        self.db_path = os.path.join(self.project_path, 'data', 'user_news.db')
        self._init_user_news_db()

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats = {
            'received_links': 0,
            'processed_links': 0,
            'start_time': datetime.now()
        }

    def _load_config(self, config_path: str) -> Dict:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        with open(config_path, 'r', encoding='utf-8') as f:
            return yaml.safe_load(f)

    def _init_user_news_db(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –Ω–æ–≤–æ—Å—Ç–µ–π"""
        os.makedirs(os.path.dirname(self.db_path), exist_ok=True)

        with sqlite3.connect(self.db_path) as conn:
            # –û—Å–Ω–æ–≤–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –Ω–æ–≤–æ—Å—Ç–µ–π
            conn.execute('''
                CREATE TABLE IF NOT EXISTS user_news (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    url TEXT UNIQUE,
                    title TEXT NOT NULL,
                    description TEXT,
                    published_date TEXT,
                    source TEXT,
                    content_type TEXT,
                    user_id INTEGER,
                    chat_id INTEGER,
                    received_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    processed INTEGER DEFAULT 0,
                    processed_at TIMESTAMP,
                    fact_check_score REAL,
                    verification_status TEXT,
                    video_created INTEGER DEFAULT 0,
                    video_url TEXT
                )
            ''')

            # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–æ–≤–æ—Å—Ç–∏
            conn.execute('''
                CREATE TABLE IF NOT EXISTS news_images (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    news_id INTEGER,
                    image_url TEXT NOT NULL,
                    local_path TEXT,
                    downloaded INTEGER DEFAULT 0,
                    FOREIGN KEY (news_id) REFERENCES user_news (id)
                )
            ''')

            # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–∞–∫—Ç–æ–≤
            conn.execute('''
                CREATE TABLE IF NOT EXISTS fact_check_sources (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    news_id INTEGER,
                    source_url TEXT,
                    source_title TEXT,
                    confidence_score REAL,
                    FOREIGN KEY (news_id) REFERENCES user_news (id)
                )
            ''')

            conn.commit()
        logger.info(f"–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞: {self.db_path}")

    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        welcome_message = """
ü§ñ –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–Ω—ã—Ö Shorts!

üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ –Ω–æ–≤–æ—Å—Ç—å, –∏ —è —Å–æ–∑–¥–∞–º –∏–∑ –Ω–µ—ë –∫–æ—Ä–æ—Ç–∫–æ–µ –≤–∏–¥–µ–æ –¥–ª—è YouTube.

üìã –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:
‚Ä¢ –ü—Ä—è–º—ã–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –Ω–æ–≤–æ—Å—Ç–∏
‚Ä¢ –°—Å—ã–ª–∫–∏ –∏–∑ Telegram –∫–∞–Ω–∞–ª–æ–≤
‚Ä¢ –õ—é–±—ã–µ URL —Å –Ω–æ–≤–æ—Å—Ç–Ω—ã–º –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º

‚öôÔ∏è –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
/stats - –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
/help - —Å–ø—Ä–∞–≤–∫–∞

üöÄ –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –Ω–æ–≤–æ—Å—Ç—å!
        """

        await update.message.reply_text(welcome_message)

    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_message = """
üìñ –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞

üéØ –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:
1. –ù–∞–π–¥–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—É—é –Ω–æ–≤–æ—Å—Ç—å
2. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –Ω–µ—ë
3. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –º–Ω–µ –≤ —á–∞—Ç

ü§ñ –ß—Ç–æ –¥–µ–ª–∞–µ—Ç –±–æ—Ç:
‚Ä¢ –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ —Å—Å—ã–ª–∫–µ
‚Ä¢ –°–æ–∑–¥–∞–µ—Ç –∫—Ä–∞—Ç–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é –ò–ò
‚Ä¢ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤–∏–¥–µ–æ
‚Ä¢ –ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤–∏–¥–µ–æ –Ω–∞ YouTube Shorts

üìä –§–æ—Ä–º–∞—Ç—ã —Å—Å—ã–ª–æ–∫:
‚úÖ https://www.bbc.com/news/article
‚úÖ https://cnn.com/article
‚úÖ https://t.me/channel/123
‚úÖ –õ—é–±—ã–µ –¥—Ä—É–≥–∏–µ URL

‚ö†Ô∏è –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:
‚Ä¢ –°—Å—ã–ª–∫–∞ –¥–æ–ª–∂–Ω–∞ –≤–µ—Å—Ç–∏ –Ω–∞ –Ω–æ–≤–æ—Å—Ç—å
‚Ä¢ –ù–æ–≤–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–∞ —Ä—É—Å—Å–∫–æ–º –∏–ª–∏ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º
‚Ä¢ –ú–∞–∫—Å–∏–º—É–º 5 —Å—Å—ã–ª–æ–∫ –≤ —á–∞—Å –æ—Ç –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: /stats
        """

        await update.message.reply_text(help_message)

    async def stats_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stats"""
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.execute('''
                SELECT COUNT(*) as total,
                       COUNT(CASE WHEN processed = 1 THEN 1 END) as processed,
                       COUNT(CASE WHEN processed = 0 THEN 1 END) as pending
                FROM user_news
            ''')
            stats = cursor.fetchone()

        runtime = datetime.now() - self.stats['start_time']

        stats_message = f"""
üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞

‚è±Ô∏è –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {str(runtime).split('.')[0]}
üì® –ü–æ–ª—É—á–µ–Ω–æ —Å—Å—ã–ª–æ–∫: {self.stats['received_links']}
‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {stats[1] if stats else 0}
‚è≥ –í –æ—á–µ—Ä–µ–¥–∏: {stats[2] if stats else 0}
üìà –í—Å–µ–≥–æ –≤ –ë–î: {stats[0] if stats else 0}

ü§ñ –°—Ç–∞—Ç—É—Å: {'üü¢ –ê–∫—Ç–∏–≤–µ–Ω' if self.stats['received_links'] > 0 else 'üü° –û–∂–∏–¥–∞–Ω–∏–µ'}
        """

        await update.message.reply_text(stats_message)

    async def _handle_channel_message(self, message_text: str, user_id: int, chat_id: int):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –∫–∞–Ω–∞–ª–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        logger.info(f"üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∫–∞–Ω–∞–ª–∞: {message_text[:100]}...")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ URL
        url_pattern = r'https?://[^\s]+'
        urls = re.findall(url_pattern, message_text)

        if not urls:
            # –ï—Å–ª–∏ –Ω–µ—Ç —Å—Å—ã–ª–æ–∫, –≤–æ–∑–º–æ–∂–Ω–æ —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç –Ω–æ–≤–æ—Å—Ç–∏
            if len(message_text) > 20:  # –ú–∏–Ω–∏–º—É–º 20 —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –Ω–æ–≤–æ—Å—Ç–∏
                await self._process_channel_text_news(message_text, user_id, chat_id)
            else:
                logger.info("‚ö†Ô∏è –í —Å–æ–æ–±—â–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Å—Å—ã–ª–æ–∫ –∏–ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞")
            return

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–∂–¥–æ–π —Å—Å—ã–ª–∫–∏ –∏–∑ –∫–∞–Ω–∞–ª–∞
        for url in urls[:3]:  # –ú–∞–∫—Å–∏–º—É–º 3 —Å—Å—ã–ª–∫–∏ –∑–∞ —Ä–∞–∑
            try:
                await self._process_channel_news_url(url, user_id, chat_id)
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ URL –∏–∑ –∫–∞–Ω–∞–ª–∞ {url}: {e}")

    async def _process_channel_news_url(self, url: str, user_id: int, chat_id: int):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ URL –Ω–æ–≤–æ—Å—Ç–∏ –∏–∑ –∫–∞–Ω–∞–ª–∞ (–±–µ–∑ –æ—Ç–≤–µ—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π)"""
        logger.info(f"üåê –û–±—Ä–∞–±–æ—Ç–∫–∞ URL –∏–∑ –∫–∞–Ω–∞–ª–∞: {url}")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç
        if self._is_url_already_processed(url):
            logger.info(f"üìã URL —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω —Ä–∞–Ω–µ–µ: {url}")
            return

        try:
            # –ü–∞—Ä—Å–∏–Ω–≥ –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü—ã
            parsed_data = await self.web_parser.parse_url(url)

            if not parsed_data or not parsed_data.get('title'):
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–ø–∞—Ä—Å–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å: {url}")
                return

            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            news_id = self._save_parsed_news(parsed_data, user_id, chat_id)
            logger.info(f"‚úÖ –ù–æ–≤–æ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –ë–î (ID: {news_id}): {parsed_data['title'][:50]}...")

            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –≤ –∫–∞–Ω–∞–ª –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
            if hasattr(self, 'telegram_publisher') and self.telegram_publisher:
                try:
                    import asyncio
                    asyncio.create_task(
                        self.telegram_publisher.publish_status_update(
                            f"üì∞ –ù–æ–≤–∞—è –Ω–æ–≤–æ—Å—Ç—å –ø–æ–ª—É—á–µ–Ω–∞: {parsed_data['title'][:50]}..."
                        )
                    )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ç—É—Å–∞: {e}")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ URL –∏–∑ –∫–∞–Ω–∞–ª–∞: {e}")

    async def _process_channel_text_news(self, message_text: str, user_id: int, chat_id: int):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –Ω–æ–≤–æ—Å—Ç–∏ –∏–∑ –∫–∞–Ω–∞–ª–∞"""
        logger.info(f"üìù –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –Ω–æ–≤–æ—Å—Ç–∏ –∏–∑ –∫–∞–Ω–∞–ª–∞: {message_text[:50]}...")

        try:
            # –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–π –Ω–æ–≤–æ—Å—Ç–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞
            news_data = {
                'url': f'channel_text_{int(time.time())}',
                'title': message_text[:100] + ('...' if len(message_text) > 100 else ''),
                'description': message_text,
                'source': 'Channel Message',
                'content_type': 'text'
            }

            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            news_id = self._save_parsed_news(news_data, user_id, chat_id)
            logger.info(f"‚úÖ –¢–µ–∫—Å—Ç–æ–≤–∞—è –Ω–æ–≤–æ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –ë–î (ID: {news_id})")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞ –∏–∑ –∫–∞–Ω–∞–ª–∞: {e}")

    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        message_text = update.message.text.strip()
        user_id = update.message.from_user.id
        chat_id = update.message.chat_id

        # –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        if str(chat_id) == self.channel_id:
            logger.info(f"üì° –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞ {self.channel}: {message_text[:100]}...")
            await self._handle_channel_message(message_text, user_id, chat_id)
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ URL
        url_pattern = r'https?://[^\s]+'
        urls = re.findall(url_pattern, message_text)

        if not urls:
            # –ï—Å–ª–∏ –Ω–µ—Ç —Å—Å—ã–ª–æ–∫, –≤–æ–∑–º–æ–∂–Ω–æ —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç –Ω–æ–≤–æ—Å—Ç–∏
            if len(message_text) > 10:  # –ú–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –Ω–æ–≤–æ—Å—Ç–∏
                await self._process_text_news(message_text, user_id, chat_id, update)
            else:
                await update.message.reply_text(
                    "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å—Å—ã–ª–æ–∫ –∏–ª–∏ —Ç–µ–∫—Å—Ç–∞ –Ω–æ–≤–æ—Å—Ç–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏.\n\n"
                    "üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ:\n"
                    "‚Ä¢ –°—Å—ã–ª–∫—É –Ω–∞ –Ω–æ–≤–æ—Å—Ç—å\n"
                    "‚Ä¢ –¢–µ–∫—Å—Ç –Ω–æ–≤–æ—Å—Ç–∏ —Å —Å—Å—ã–ª–∫–æ–π\n"
                    "‚Ä¢ –†–µ–ø–æ—Å—Ç –Ω–æ–≤–æ—Å—Ç–∏ –∏–∑ –¥—Ä—É–≥–æ–≥–æ –∫–∞–Ω–∞–ª–∞"
                )
            return

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–∂–¥–æ–π —Å—Å—ã–ª–∫–∏
        for url in urls[:3]:  # –ú–∞–∫—Å–∏–º—É–º 3 —Å—Å—ã–ª–∫–∏ –∑–∞ —Ä–∞–∑
            try:
                await self._process_news_url(url, user_id, chat_id, update)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ URL {url}: {e}")
                await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Å—ã–ª–∫–∏: {url}")

    async def _process_news_url(self, url: str, user_id: int, chat_id: int, update: Update):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ URL –Ω–æ–≤–æ—Å—Ç–∏ —Å –ø–∞—Ä—Å–∏–Ω–≥–æ–º"""

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç
        if self._is_url_already_processed(url):
            await update.message.reply_text(
                f"üìã –≠—Ç–∞ —Å—Å—ã–ª–∫–∞ —É–∂–µ –±—ã–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ —Ä–∞–Ω–µ–µ:\n{url}"
            )
            return

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        await update.message.reply_text(
            f"üîÑ –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É —Å—Å—ã–ª–∫–∏:\n{url}\n\n"
            f"‚è≥ –ü–∞—Ä—Å–∏–Ω–≥ –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü—ã..."
        )

        try:
            # –ü–∞—Ä—Å–∏–Ω–≥ –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü—ã
            parsed_data = self.web_parser.parse_url(url)

            if not parsed_data.get('success', False):
                await update.message.reply_text(
                    f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É:\n{url}\n\n"
                    f"–ë—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –±–∞–∑–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ."
                )

            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –Ω–æ–≤–æ—Å—Ç–∏
            news_id = self._save_parsed_news(parsed_data, user_id, chat_id)

            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞
            success_msg = (
                f"‚úÖ –ù–æ–≤–æ—Å—Ç—å —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞!\n\n"
                f"üì∞ **{parsed_data.get('title', '–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞')}**\n"
                f"üìä ID –≤ —Å–∏—Å—Ç–µ–º–µ: {news_id}\n"
                f"üîó –ò—Å—Ç–æ—á–Ω–∏–∫: {parsed_data.get('source', '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω')}\n"
                f"üìù –î–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞: {len(parsed_data.get('description', ''))} —Å–∏–º–≤–æ–ª–æ–≤\n"
                f"üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {len(parsed_data.get('images', []))}\n\n"
                f"üé¨ –í–∏–¥–µ–æ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏..."
            )

            await update.message.reply_text(success_msg, parse_mode='Markdown')

            self.stats['received_links'] += 1
            logger.info(f"–£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ —Å—Å—ã–ª–∫–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {url}")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ URL {url}: {e}")
            await update.message.reply_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Å—Å—ã–ª–∫–∏:\n{url}\n\n"
                f"–î–µ—Ç–∞–ª–∏: {str(e)}"
            )

    async def _process_text_news(self, text: str, user_id: int, chat_id: int, update: Update):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–π –Ω–æ–≤–æ—Å—Ç–∏ –±–µ–∑ —Å—Å—ã–ª–∫–∏"""
        try:
            # –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–π –Ω–æ–≤–æ—Å—Ç–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞
            news_data = {
                'success': True,
                'url': None,
                'title': text[:100] + "..." if len(text) > 100 else text,
                'description': text,
                'published': datetime.now().isoformat(),
                'source': 'Telegram Text',
                'images': [],
                'content_type': 'text_news'
            }

            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏
            news_id = self._save_parsed_news(news_data, user_id, chat_id)

            await update.message.reply_text(
                f"‚úÖ –¢–µ–∫—Å—Ç–æ–≤–∞—è –Ω–æ–≤–æ—Å—Ç—å –ø—Ä–∏–Ω—è—Ç–∞!\n\n"
                f"üìä ID –≤ —Å–∏—Å—Ç–µ–º–µ: {news_id}\n"
                f"üìù –î–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞: {len(text)} —Å–∏–º–≤–æ–ª–æ–≤\n\n"
                f"üé¨ –í–∏–¥–µ–æ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏..."
            )

            self.stats['received_links'] += 1
            logger.info(f"–ü—Ä–∏–Ω—è—Ç–∞ —Ç–µ–∫—Å—Ç–æ–≤–∞—è –Ω–æ–≤–æ—Å—Ç—å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–π –Ω–æ–≤–æ—Å—Ç–∏: {e}")
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞: {str(e)}")

    def _is_url_already_processed(self, url: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, –±—ã–ª–∞ –ª–∏ —Å—Å—ã–ª–∫–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞"""
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.execute(
                'SELECT id FROM user_news WHERE url = ?',
                (url,)
            )
            return cursor.fetchone() is not None

    def _save_parsed_news(self, news_data: Dict, user_id: int, chat_id: int) -> int:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –Ω–æ–≤–æ—Å—Ç–∏ –≤ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é –ë–î"""
        with sqlite3.connect(self.db_path) as conn:
            try:
                # –ó–ê–ì–õ–£–®–ö–ê –î–õ–Ø –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø: –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –Ω–æ–≤–æ—Å—Ç—å —Å —Ç–∞–∫–∏–º –∂–µ URL.
                # –≠—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –æ–¥–Ω—É –∏ —Ç—É –∂–µ –Ω–æ–≤–æ—Å—Ç—å –≤–æ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–æ–≤.
                url_to_check = news_data.get('url')
                if url_to_check:
                    conn.execute('DELETE FROM user_news WHERE url = ?', (url_to_check,))
                    logger.info(f"–£–¥–∞–ª–µ–Ω–∞ —Å—Ç–∞—Ä–∞—è –∑–∞–ø–∏—Å—å –¥–ª—è URL (—Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º): {url_to_check}")

                # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –Ω–æ–≤–æ—Å—Ç–∏
                cursor = conn.execute('''
                    INSERT INTO user_news (
                        url, title, description, published_date, source,
                        content_type, user_id, chat_id, fact_check_score,
                        verification_status
                    ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                ''', (
                    news_data.get('url'),
                    news_data.get('title', '–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞'),
                    news_data.get('description', ''),
                    news_data.get('published'),
                    news_data.get('source', '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω'),
                    news_data.get('content_type', 'webpage'),
                    user_id,
                    chat_id,
                    news_data.get('fact_verification', {}).get('accuracy_score'),
                    news_data.get('fact_verification', {}).get('verification_status')
                ))

                news_id = cursor.lastrowid

                # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
                images = news_data.get('images', [])
                for image_url in images:
                    conn.execute('''
                        INSERT INTO news_images (news_id, image_url)
                        VALUES (?, ?)
                    ''', (news_id, image_url))

                # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–∞–∫—Ç–æ–≤
                verification_sources = news_data.get('verification_sources', [])
                for source in verification_sources:
                    conn.execute('''
                        INSERT INTO fact_check_sources (
                            news_id, source_url, source_title, confidence_score
                        ) VALUES (?, ?, ?, ?)
                    ''', (
                        news_id,
                        source.get('uri', ''),
                        source.get('title', ''),
                        0.8  # –ü–æ–∫–∞ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
                    ))

                conn.commit()
                logger.info(f"–ù–æ–≤–æ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –ë–î —Å ID {news_id}")
                return news_id

            except Exception as e:
                conn.rollback()
                logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–∏: {e}")
                raise

    def _save_user_news(self, url: str, user_id: int, chat_id: int) -> int:
        """–£—Å—Ç–∞—Ä–µ–≤—à–∏–π –º–µ—Ç–æ–¥ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ - —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –±–∞–∑–æ–≤—É—é –Ω–æ–≤–æ—Å—Ç—å"""
        news_data = {
            'url': url,
            'title': f'–°—Å—ã–ª–∫–∞: {url}',
            'description': f'–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Å—ã–ª–∫–∏: {url}',
            'source': 'URL',
            'content_type': 'url_only'
        }
        return self._save_parsed_news(news_data, user_id, chat_id)

    def mark_news_processed(self, news_id: int, title: str = None, description: str = None):
        """–û—Ç–º–µ—Ç–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—É—é"""
        with sqlite3.connect(self.db_path) as conn:
            conn.execute('''
                UPDATE user_news
                SET processed = 1, processed_at = ?
                WHERE id = ?
            ''', (datetime.now(), news_id))

            # –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –æ–±–Ω–æ–≤–ª—è–µ–º –∏—Ö
            if title or description:
                update_fields = []
                update_values = []

                if title:
                    update_fields.append("title = ?")
                    update_values.append(title)

                if description:
                    update_fields.append("description = ?")
                    update_values.append(description)

                if update_fields:
                    update_values.append(news_id)
                    conn.execute(f'''
                        UPDATE user_news
                        SET {', '.join(update_fields)}
                        WHERE id = ?
                    ''', update_values)

            conn.commit()

    def get_pending_news(self, limit: int = 10) -> list:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π"""
        with sqlite3.connect(self.db_path) as conn:
            conn.row_factory = sqlite3.Row

            # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π
            news_cursor = conn.execute('''
                SELECT * FROM user_news
                WHERE processed = 0
                ORDER BY received_at ASC
                LIMIT ?
            ''', (limit,))

            news_list = []
            for news_row in news_cursor.fetchall():
                news_dict = dict(news_row)
                
                # –ú–∞–ø–ø–∏–Ω–≥ –ø–æ–ª–µ–π –ë–î –∫ –æ–∂–∏–¥–∞–µ–º—ã–º –Ω–∞–∑–≤–∞–Ω–∏—è–º
                if 'published_date' in news_dict:
                    news_dict['published'] = news_dict['published_date']

                # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –Ω–æ–≤–æ—Å—Ç–∏
                images_cursor = conn.execute('''
                    SELECT image_url, local_path, downloaded
                    FROM news_images
                    WHERE news_id = ?
                    ORDER BY id ASC
                ''', (news_dict['id'],))

                news_dict['images'] = [
                    {
                        'url': img['image_url'],
                        'local_path': img['local_path'],
                        'downloaded': img['downloaded']
                    } for img in images_cursor.fetchall()
                ]

                # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–∞–∫—Ç–æ–≤
                sources_cursor = conn.execute('''
                    SELECT source_url, source_title, confidence_score
                    FROM fact_check_sources
                    WHERE news_id = ?
                    ORDER BY confidence_score DESC
                ''', (news_dict['id'],))

                news_dict['verification_sources'] = [
                    {
                        'url': src['source_url'],
                        'title': src['source_title'],
                        'confidence': src['confidence_score']
                    } for src in sources_cursor.fetchall()
                ]

                news_list.append(news_dict)

            return news_list

    def get_news_by_id(self, news_id: int) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ ID"""
        with sqlite3.connect(self.db_path) as conn:
            conn.row_factory = sqlite3.Row
            
            cursor = conn.execute('''
                SELECT * FROM user_news
                WHERE id = ?
            ''', (news_id,))
            
            news_row = cursor.fetchone()
            if not news_row:
                return None
                
            news_dict = dict(news_row)
            
            # –ú–∞–ø–ø–∏–Ω–≥ –ø–æ–ª–µ–π –ë–î –∫ –æ–∂–∏–¥–∞–µ–º—ã–º –Ω–∞–∑–≤–∞–Ω–∏—è–º
            if 'published_date' in news_dict:
                news_dict['published'] = news_dict['published_date']
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –Ω–æ–≤–æ—Å—Ç–∏
            images_cursor = conn.execute('''
                SELECT image_url, local_path, downloaded
                FROM news_images
                WHERE news_id = ?
                ORDER BY id ASC
            ''', (news_id,))
            
            news_dict['images'] = [
                {
                    'url': img['image_url'],
                    'local_path': img['local_path'],
                    'downloaded': img['downloaded']
                } for img in images_cursor.fetchall()
            ]
            
            return news_dict

    def mark_video_created(self, news_id: int, video_url: str = None):
        """–û—Ç–º–µ—Ç–∏—Ç—å, —á—Ç–æ –≤–∏–¥–µ–æ —Å–æ–∑–¥–∞–Ω–æ –¥–ª—è –Ω–æ–≤–æ—Å—Ç–∏"""
        with sqlite3.connect(self.db_path) as conn:
            conn.execute('''
                UPDATE user_news
                SET video_created = 1, video_url = ?
                WHERE id = ?
            ''', (video_url, news_id))
            conn.commit()
            logger.info(f"–í–∏–¥–µ–æ –æ—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ —Å–æ–∑–¥–∞–Ω–Ω–æ–µ –¥–ª—è –Ω–æ–≤–æ—Å—Ç–∏ {news_id}")

    async def _trigger_news_processing(self, news_id: int, url: str):
        """–¢—Ä–∏–≥–≥–µ—Ä –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–æ–≤–æ—Å—Ç–∏ (–∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è –±—É–¥—É—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è)"""
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –≤—ã–∑–æ–≤–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π
        logger.info(f"–¢—Ä–∏–≥–≥–µ—Ä –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–æ–≤–æ—Å—Ç–∏ {news_id}: {url}")

        # –ò–º–∏—Ç–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        await asyncio.sleep(2)

        # –û—Ç–º–µ—Ç–∫–∞ –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è
        self.mark_news_processed(news_id, "–û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –Ω–æ–≤–æ—Å—Ç—å", "–û–ø–∏—Å–∞–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏")

        logger.info(f"–ù–æ–≤–æ—Å—Ç—å {news_id} –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è")

    async def run_bot(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        if not self.bot_token:
            logger.error("–¢–æ–∫–µ–Ω Telegram –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
            logger.error(f"–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é: {self.telegram_config['bot_token_env']}")
            return

        logger.info("ü§ñ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")

        # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        application = Application.builder().token(self.bot_token).build()

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        application.add_handler(CommandHandler("start", self.start_command))
        application.add_handler(CommandHandler("help", self.help_command))
        application.add_handler(CommandHandler("stats", self.stats_command))
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))

        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
        logger.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
        logger.info("–î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")

        # –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—É—Å–∫ –±–µ–∑ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏–π
        await application.run_polling(allowed_updates=Update.ALL_TYPES)

def create_systemd_service():
    """–°–æ–∑–¥–∞–Ω–∏–µ systemd service —Ñ–∞–π–ª–∞ –¥–ª—è –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    service_content = f"""[Unit]
Description=Shorts News Telegram Bot
After=network.target

[Service]
Type=simple
User={os.getenv('USER', 'www-data')}
WorkingDirectory={os.path.dirname(os.path.abspath(__file__))}/..
ExecStart={sys.executable} scripts/telegram_bot.py
Restart=always
RestartSec=10

[Install]
WantedBy=multi-user.target
"""

    service_path = "/etc/systemd/system/shorts-news-bot.service"
    try:
        with open(service_path, 'w') as f:
            f.write(service_content)
        logger.info(f"–°–æ–∑–¥–∞–Ω systemd service —Ñ–∞–π–ª: {service_path}")
        logger.info("–î–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ:")
        logger.info("sudo systemctl daemon-reload")
        logger.info("sudo systemctl enable shorts-news-bot")
        logger.info("sudo systemctl start shorts-news-bot")
    except PermissionError:
        logger.warning("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è systemd service —Ñ–∞–π–ª–∞")
        logger.info("–°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª –≤—Ä—É—á–Ω—É—é –∏–ª–∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å sudo")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    import argparse

    parser = argparse.ArgumentParser(description='Telegram Bot for Shorts News System')
    parser.add_argument('--config', default='../config/config.yaml',
                       help='–ü—É—Ç—å –∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É')
    parser.add_argument('--create-service', action='store_true',
                       help='–°–æ–∑–¥–∞—Ç—å systemd service —Ñ–∞–π–ª')

    args = parser.parse_args()

    if args.create_service:
        create_systemd_service()
        return

    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—É—Ç–∏ –∫ –∫–æ–Ω—Ñ–∏–≥—É
    if not os.path.isabs(args.config):
        config_path = os.path.join(os.path.dirname(__file__), args.config)
    else:
        config_path = args.config

    if not os.path.exists(config_path):
        logger.error(f"–§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: {config_path}")
        sys.exit(1)

    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
        bot = NewsTelegramBot(config_path)
        asyncio.run(bot.run_bot())

    except KeyboardInterrupt:
        logger.info("üõë –ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()
