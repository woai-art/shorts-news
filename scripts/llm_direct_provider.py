#!/usr/bin/env python3

"""
–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π LLM –ø—Ä–æ–≤–∞–π–¥–µ—Ä —Å –ø—Ä—è–º—ã–º HTTP –≤—ã–∑–æ–≤–æ–º –∫ Gemini API
–û–±—Ö–æ–¥–∏—Ç –ø—Ä–æ–±–ª–µ–º—É OAuth redirect_uri_mismatch
"""

import os
import json
import requests
import logging
from typing import Optional, Dict, Any, List
from logger_config import logger
from scripts.llm_base import LLMProvider
from scripts.prompt_loader import load_prompts, format_prompt

class GeminiDirectProvider(LLMProvider):
    """Gemini –ø—Ä–æ–≤–∞–π–¥–µ—Ä —Å –ø—Ä—è–º—ã–º HTTP –≤—ã–∑–æ–≤–æ–º"""

    def __init__(self, api_key: str, model: str = "models/gemini-2.0-flash", config: Dict = None):
        if not api_key or len(api_key) < 10:
             raise ValueError("–ü–æ–ª—É—á–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π Gemini API –∫–ª—é—á.")

        self.api_key = api_key
        # –õ–æ–≥–∏—Ä—É–µ–º –º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–ª—é—á –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        masked_key = f"{self.api_key[:4]}...{self.api_key[-4:]}"
        logger.info(f"üîë [DEBUG] –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä—è–º–æ–π API Gemini —Å –∫–ª—é—á–æ–º: {masked_key}")

        self.model = model
        self.base_url = "https://generativelanguage.googleapis.com/v1beta/models"
        self.session = requests.Session()
        self.session.headers.update({
            'Content-Type': 'application/json',
            'User-Agent': 'ShortsNews/1.0'
        })

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        self.temperature = config.get('temperature', 0.7) if config else 0.7
        self.max_tokens = config.get('max_tokens', 2000) if config else 2000

        logger.info("‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –ø—Ä—è–º–æ–π Gemini –ø—Ä–æ–≤–∞–π–¥–µ—Ä")

    def _call_gemini_api(self, prompt: str, temperature: float = None) -> Optional[str]:
        """–ü—Ä—è–º–æ–π –≤—ã–∑–æ–≤ Gemini API"""
        if temperature is None:
            temperature = self.temperature

        # –î–ª—è API –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ—Ä–æ—Ç–∫–æ–µ –∏–º—è –º–æ–¥–µ–ª–∏
        model_name = self.model.replace("models/", "") if self.model.startswith("models/") else self.model
        url = f"{self.base_url}/{model_name}:generateContent"
        params = {'key': self.api_key}

        data = {
            "contents": [{
                "parts": [{
                    "text": prompt
                }]
            }],
            "generationConfig": {
                "temperature": temperature,
                "maxOutputTokens": self.max_tokens,
                "topP": 1,
                "topK": 1
            }
        }

        try:
            logger.debug(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ Gemini API: {prompt[:100]}...")
            response = self.session.post(url, params=params, json=data, timeout=30)

            if response.status_code == 200:
                result = response.json()
                if 'candidates' in result and len(result['candidates']) > 0:
                    content = result['candidates'][0]['content']
                    if 'parts' in content and len(content['parts']) > 0:
                        return content['parts'][0]['text']

            logger.error(f"Gemini API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É {response.status_code}: {response.text[:300]}")
            return None

        except requests.exceptions.Timeout:
            logger.error("Timeout –ø—Ä–∏ –≤—ã–∑–æ–≤–µ Gemini API")
            return None
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ Gemini API: {e}")
            return None

    def summarize_for_video(self, text: str) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫—Ä–∞—Ç–∫–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –≤–∏–¥–µ–æ"""
        prompts = load_prompts()
        template = prompts.get('content', {}).get('summarize_for_video', '')
        prompt = format_prompt(template, text=text)
        
        result = self._call_gemini_api(prompt)
        if result:
            # –û—á–∏—â–∞–µ–º –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
            result = result.strip()
            if result.startswith('"') and result.endswith('"'):
                result = result[1:-1]
            
            # –°–æ–∑–¥–∞–µ–º —Ä—É—Å—Å–∫—É—é –≤–µ—Ä—Å–∏—é –¥–ª—è –ª–æ–≥–æ–≤
            russian_prompt = f"""
            –ü–µ—Ä–µ–≤–µ–¥–∏ —ç—Ç–æ—Ç –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —Ç–µ–∫—Å—Ç –Ω–∞ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫, —Å–æ—Ö—Ä–∞–Ω—è—è —Å–º—ã—Å–ª –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É:
            {result}
            
            –†—É—Å—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥:
            """
            russian_result = self._call_gemini_api(russian_prompt)
            if russian_result:
                russian_result = russian_result.strip()
                if russian_result.startswith('"') and russian_result.endswith('"'):
                    russian_result = russian_result[1:-1]
                logger.info(f"üìù –†—É—Å—Å–∫–∏–π —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è: '{russian_result}'")
            
            return result

        # Fallback
        return text[:100] + "..." if len(text) > 100 else text

    def generate_seo_package(self, text: str, source_url: str = "") -> Dict[str, Any]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è SEO –ø–∞–∫–µ—Ç–∞ –¥–ª—è YouTube Shorts"""
        prompts = load_prompts()
        template = prompts.get('seo', {}).get('generate_seo_package', '')
        prompt = format_prompt(template, text=text, source_url=source_url)

        result = self._call_gemini_api(prompt, temperature=0.3)
        if result:
            try:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞
                json_text = self._extract_json_from_text(result)
                if json_text:
                    return json.loads(json_text)
            except json.JSONDecodeError as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞ Gemini: {e}")

        # Fallback
        return {
            "title": text[:87] + "..." if len(text) > 87 else text,
            "description": text[:147] + "..." if len(text) > 147 else text,
            "tags": ["news", "shorts"],
            "hashtags": ["#news", "#shorts"]
        }

    def generate_video_package(self, news_data: Dict) -> Dict[str, Any]:
        """Generates a complete video data package using a single prompt."""
        text = news_data.get('description', '') or news_data.get('title', '')
        source_name = news_data.get('source', 'Unknown')
        source_url = news_data.get('url', '')

        prompts = load_prompts()
        template = prompts.get('video_package', {}).get('generate', '')
        prompt = format_prompt(template, text=text, source_name=source_name, source_url=source_url)

        result = self._call_gemini_api(prompt, temperature=0.5)
        if result:
            try:
                json_text = self._extract_json_from_text(result)
                if json_text:
                    return json.loads(json_text)
            except json.JSONDecodeError as e:
                logger.error(f"Error parsing JSON from Gemini in generate_video_package: {e}")
                # –ï—Å–ª–∏ JSON –Ω–µ –ø–∞—Ä—Å–∏—Ç—Å—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback
                logger.info("Using fallback due to JSON parsing error")
                return self._generate_fallback_video_package(news_data)
        else:
            # –ï—Å–ª–∏ API –Ω–µ –≤–µ—Ä–Ω—É–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback
            logger.info("Using fallback due to API error")

        # Fallback
        return self._generate_fallback_video_package(news_data)

    def _generate_fallback_video_package(self, news_data: Dict) -> Dict[str, Any]:
        """Creates a fallback video package when the LLM fails."""
        title = news_data.get('title', 'News Update')
        description = news_data.get('description', '')

        return {
            "video_content": {
                "title": title[:80],
                "summary": description[:250]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 250 —Å–∏–º–≤–æ–ª–æ–≤
            },
            "seo_package": {
                "youtube_title": title,
                "youtube_description": f"{description[:200]}... #news #breaking",
                "tags": ["news", "breaking", "update"]
            }
        }

    def generate_structured_content(self, news_data: Dict) -> Dict[str, Any]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å)"""
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ –ø–∞–∫–µ—Ç–∞
        complete_package = self.generate_complete_news_package(news_data)
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ —Å—Ç–∞—Ä–æ–º —Ñ–æ—Ä–º–∞—Ç–µ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        content = complete_package.get('content', {})
        
        # –û—á–∏—â–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –æ—Ç –ª–∏—à–Ω–µ–π —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        import re
        title = content.get('title', '').strip()
        
        # –£–¥–∞–ª—è–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ö–≤–æ—Å—Ç—ã
        cleanup_patterns = [
            r"\s*-\s*Live Updates\s*-\s*POLITICO\s*$",
            r"\s*\|\s*POLITICO\s*$",
            r"\s*-\s*POLITICO\s*$",
            r"\s*‚Äì\s*POLITICO\s*$",
            r"\s*\(.*?\)\s*$",
            r"\s*\[.*?\]\s*$",
        ]
        for pattern in cleanup_patterns:
            title = re.sub(pattern, "", title, flags=re.IGNORECASE)
        
        # –£–¥–∞–ª—è–µ–º –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞
        banned_words = ["live updates", "explainer", "opinion", "analysis", "breaking", "news", "today", "update"]
        for word in banned_words:
            title = re.sub(rf"\b{re.escape(word)}\b", "", title, flags=re.IGNORECASE)
        
        # –£–¥–∞–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏ –∏ –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
        title = re.sub(r"\s+\|\s+.*$", "", title)
        title = re.sub(r"\s+", " ", title).strip().rstrip('.!')
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
        if len(title) > 60:
            cut = title[:60]
            if ' ' in cut:
                cut = cut[:cut.rfind(' ')]
            title = cut
        
        return {
            "main_title": title,
            "subtitle": content.get('summary', '')[:100] + ('...' if len(content.get('summary', '')) > 100 else ''),
            "key_points": content.get('key_points', []),
            "animation_style": "fade",
            "duration_seconds": 30
        }

    def _extract_json_from_text(self, text: str) -> Optional[str]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ JSON –∏–∑ —Ç–µ–∫—Å—Ç–∞ –æ—Ç–≤–µ—Ç–∞"""
        import re

        # –ò—â–µ–º JSON –±–ª–æ–∫
        json_match = re.search(r'\{.*\}', text, re.DOTALL)
        if json_match:
            return json_match.group(0)

        # –ò—â–µ–º –±–ª–æ–∫ —Å ```json
        json_block = re.search(r'```json\s*(\{.*?\})\s*```', text, re.DOTALL)
        if json_block:
            return json_block.group(1)

        return None

def test_direct_provider():
    """–¢–µ—Å—Ç –ø—Ä—è–º–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞"""
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–†–Ø–ú–û–ì–û GEMINI –ü–†–û–í–ê–ô–î–ï–†–ê")
    print("=" * 60)

    # –ü–æ–ª—É—á–∞–µ–º API –∫–ª—é—á
    api_key = os.getenv('GOOGLE_API_KEY') or os.getenv('GEMINI_API_KEY')

    if not api_key:
        print("‚ùå API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return False

    print(f"‚úÖ API –∫–ª—é—á –Ω–∞–π–¥–µ–Ω (–¥–ª–∏–Ω–∞: {len(api_key)} —Å–∏–º–≤–æ–ª–æ–≤)")

    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä
    provider = GeminiDirectProvider(api_key)

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å
    test_text = "Test news about technology and AI."
    print(f"üì§ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ summarization: {test_text}")

    summary = provider.summarize_for_video(test_text)
    if summary:
        print(f"‚úÖ Summarization: {summary}")
    else:
        print("‚ùå Summarization failed")
        return False

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º SEO
    print("\\nüì§ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ SEO generation...")
    seo = provider.generate_seo_package(test_text)
    if seo:
        print(f"‚úÖ SEO Title: {seo.get('title', 'N/A')}")
        print(f"‚úÖ SEO Tags: {seo.get('tags', [])}")
    else:
        print("‚ùå SEO generation failed")
        return False

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º structured content
    print("\\nüì§ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ structured content...")
    structured = provider.generate_structured_content({'title': 'Test', 'description': test_text})
    if structured:
        print(f"‚úÖ Main Title: {structured.get('main_title', 'N/A')}")
        print(f"‚úÖ Key Points: {len(structured.get('key_points', []))}")
    else:
        print("‚ùå Structured content failed")
        return False

    return True

if __name__ == "__main__":
    success = test_direct_provider()
    if success:
        print("\\nüéâ –ü–†–Ø–ú–û–ô –ü–†–û–í–ê–ô–î–ï–† –†–ê–ë–û–¢–ê–ï–¢!")
        print("‚úÖ –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ")
    else:
        print("\\nüí• –ü–†–Ø–ú–û–ô –ü–†–û–í–ê–ô–î–ï–† –ù–ï –†–ê–ë–û–¢–ê–ï–¢!")
        print("üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ API –∫–ª—é—á –∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ")
