#!/usr/bin/env python3
"""
–ì–ª–∞–≤–Ω—ã–π –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä —Å–∏—Å—Ç–µ–º—ã shorts_news
–£–ø—Ä–∞–≤–ª—è–µ—Ç –≤—Å–µ–º –ø—Ä–æ—Ü–µ—Å—Å–æ–º –æ—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π –¥–æ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ –Ω–∞ YouTube
"""

import os
import sys
import time
import logging
import schedule
from pathlib import Path
from typing import Dict, List, Optional, Any
import yaml
import argparse

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—É—Ç–∏ –∫ –º–æ–¥—É–ª—è–º
sys.path.append(os.path.dirname(__file__))

from news_processor import NewsProcessor
from llm_processor import LLMProcessor
from video_exporter import VideoExporter
from youtube_uploader import YouTubeUploader
from telegram_publisher import TelegramPublisher
from analytics import NewsAnalytics

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–æ–≤—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É –¥–≤–∏–∂–∫–æ–≤
from engines import registry, PoliticoEngine, WashingtonPostEngine, TwitterEngine, NBCNewsEngine, ABCNewsEngine, TelegramPostEngine, FinancialTimesEngine
# from engines import WSJEngine  # –û—Ç–∫–ª—é—á–µ–Ω: —Ç—Ä–µ–±—É–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É + Cloudflare

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('logs/shorts_news.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class ShortsNewsOrchestrator:
    """–ì–ª–∞–≤–Ω—ã–π –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä —Å–∏—Å—Ç–µ–º—ã shorts_news"""

    def __init__(self, config_path: str):
        self.config_path = config_path
        self.config = self._load_config(config_path)
        self.project_path = self.config['project']['base_path']

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        self.news_processor = None
        self.llm_processor = None
        self.video_exporter = None
        self.youtube_uploader = None
        self.telegram_bot = None
        self.telegram_publisher = None
        self.analytics = NewsAnalytics()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–≤–∏–∂–∫–æ–≤
        self.engines_initialized = False

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–±–æ—Ç—ã
        self.stats = {
            'processed_news': 0,
            'successful_videos': 0,
            'failed_videos': 0,
            'uploaded_videos': 0,
            'skipped_low_quality': 0,
            'skipped_no_media': 0,
            'start_time': time.time()
        }

    def _load_config(self, config_path: str) -> Dict:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        with open(config_path, 'r', encoding='utf-8') as f:
            return yaml.safe_load(f)

    def initialize_engines(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–≤–∏–∂–∫–æ–≤ –Ω–æ–≤–æ—Å—Ç–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤"""
        if self.engines_initialized:
            return
            
        logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–≤–∏–∂–∫–æ–≤ –Ω–æ–≤–æ—Å—Ç–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤...")
        
        try:
            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –¥–≤–∏–∂–∫–∏
            registry.register_engine('politico', PoliticoEngine)
            registry.register_engine('washingtonpost', WashingtonPostEngine)
            registry.register_engine('twitter', TwitterEngine)
            registry.register_engine('nbcnews', NBCNewsEngine)
            registry.register_engine('abcnews', ABCNewsEngine)
            registry.register_engine('telegrampost', TelegramPostEngine)
            registry.register_engine('financialtimes', FinancialTimesEngine)
            # registry.register_engine('wsj', WSJEngine)  # –û—Ç–∫–ª—é—á–µ–Ω: —Ç—Ä–µ–±—É–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É + Cloudflare
            
            # TODO: –î–æ–±–∞–≤–∏—Ç—å –æ—Å—Ç–∞–ª—å–Ω—ã–µ –¥–≤–∏–∂–∫–∏
            # registry.register_engine('apnews', APNewsEngine)
            # registry.register_engine('cnn', CNNEngine)
            # registry.register_engine('reuters', ReutersEngine)
            
            self.engines_initialized = True
            logger.info("‚úì –î–≤–∏–∂–∫–∏ –Ω–æ–≤–æ—Å—Ç–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–≤–∏–∂–∫–æ–≤: {e}")
            self.engines_initialized = False

    def parse_url_with_engines(self, url: str) -> Optional[Dict[str, Any]]:
        """
        –ü–∞—Ä—Å–∏—Ç URL –∏—Å–ø–æ–ª—å–∑—É—è –¥–≤–∏–∂–∫–∏ –Ω–æ–≤–æ—Å—Ç–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        
        Args:
            url: URL –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –Ω–æ–≤–æ—Å—Ç–∏ –∏–ª–∏ None
        """
        if not self.engines_initialized:
            logger.warning("–î–≤–∏–∂–∫–∏ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback")
            return None
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–π –¥–≤–∏–∂–æ–∫
            engine = registry.get_engine_for_url(url, self.config)
            
            if not engine:
                logger.warning(f"–ù–µ –Ω–∞–π–¥–µ–Ω –ø–æ–¥—Ö–æ–¥—è—â–∏–π –¥–≤–∏–∂–æ–∫ –¥–ª—è URL: {url[:50]}...")
                return None
            
            # –ü–∞—Ä—Å–∏–º URL —á–µ—Ä–µ–∑ –¥–≤–∏–∂–æ–∫
            logger.info(f"üîç –ü–∞—Ä—Å–∏–Ω–≥ —á–µ—Ä–µ–∑ –¥–≤–∏–∂–æ–∫ {engine.source_name}: {url[:50]}...")
            content = engine.parse_url(url)
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –º–µ–¥–∏–∞
            media = engine.extract_media(url, content)
            content.update(media)
            
            # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
            if not engine.validate_content(content):
                logger.warning(f"–ö–æ–Ω—Ç–µ–Ω—Ç –Ω–µ –ø—Ä–æ—à–µ–ª –≤–∞–ª–∏–¥–∞—Ü–∏—é –¥–≤–∏–∂–∫–∞ {engine.source_name}")
                return None
            
            logger.info(f"‚úÖ URL —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –¥–≤–∏–∂–∫–æ–º {engine.source_name}")
            return content
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —á–µ—Ä–µ–∑ –¥–≤–∏–∂–∫–∏: {e}")
            return None

    def initialize_components(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã"""
        logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã...")

        try:
            # –°–Ω–∞—á–∞–ª–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–≤–∏–∂–∫–∏
            self.initialize_engines()
            # Telegram Bot –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π
            from telegram_bot import NewsTelegramBot
            self.telegram_bot = NewsTelegramBot(self.config_path)
            logger.info("‚úì Telegram Bot –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

            # LLM Processor
            self.llm_processor = LLMProcessor(self.config_path)
            logger.info("‚úì LLM Processor –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

            # Video Exporter (–∏—Å–ø–æ–ª—å–∑—É–µ–º Selenium –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ HTML5 –∞–Ω–∏–º–∞—Ü–∏–π)
            video_config = self.config['video'].copy()
            video_config['news_sources'] = self.config.get('news_sources', {})
            self.video_exporter = VideoExporter(video_config, self.config['paths'])
            logger.info("‚úì Video Exporter (Selenium) –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            

            # YouTube Uploader (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω)
            if self.config['youtube'].get('upload_enabled', True):
                try:
                    self.youtube_uploader = YouTubeUploader(self.config_path)
                    logger.info("‚úì YouTube Uploader –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                except Exception as e:
                    logger.error(f"YouTube Uploader –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
                    logger.warning("–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞ YouTube –±—É–¥–µ—Ç –æ—Ç–∫–ª—é—á–µ–Ω–∞")
            else:
                logger.info("YouTube –∑–∞–≥—Ä—É–∑–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")

            # Telegram Publisher (–¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤)
            try:
                self.telegram_publisher = TelegramPublisher(self.config_path)
                if self.telegram_publisher.is_available():
                    logger.info("‚úì Telegram Publisher –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                else:
                    logger.warning("Telegram Publisher –æ—Ç–∫–ª—é—á–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
            except Exception as e:
                logger.error(f"Telegram Publisher –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
                logger.warning("–ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤ Telegram –±—É–¥–µ—Ç –æ—Ç–∫–ª—é—á–µ–Ω–∞")

            logger.info("–í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: {e}")
            raise

    def process_single_news_cycle(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –Ω–æ–≤–æ—Å—Ç–µ–π –∏–∑ Telegram –±–æ—Ç–∞"""
        logger.info("üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π –∏–∑ Telegram...")

        try:
            # –®–∞–≥ 1: –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –∏–∑ Telegram –±–æ—Ç–∞
            logger.info("–®–∞–≥ 1: –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–µ–π –∏–∑ Telegram –±–æ—Ç–∞...")
            pending_news = self.telegram_bot.get_pending_news(limit=10)  # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ 10 –Ω–æ–≤–æ—Å—Ç–µ–π

            if not pending_news:
                logger.info("–ù–µ—Ç –Ω–æ–≤—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –∏–∑ Telegram –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
                return

            logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(pending_news)} –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")

            # –®–∞–≥ 2: –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–∂–¥–æ–π –Ω–æ–≤–æ—Å—Ç–∏
            for news_item in pending_news:
                try:
                    self._process_single_news(news_item)
                    self.stats['processed_news'] += 1

                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–æ–≤–æ—Å—Ç–∏ ID {news_item['id']}: {e}")
                    continue

            logger.info(f"‚úÖ –¶–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω. –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {self.stats['processed_news']}")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")

    def process_news_by_id(self, news_id: int):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ ID"""
        logger.info(f"[TARGET] –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ—Å—Ç–∏ ID {news_id}...")
        
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã, –µ—Å–ª–∏ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã
            if not self.telegram_bot:
                self.initialize_components()
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤–æ—Å—Ç—å –ø–æ ID
            news_data = self.telegram_bot.get_news_by_id(news_id)
            if not news_data:
                logger.error(f"[ERROR] –ù–æ–≤–æ—Å—Ç—å ID {news_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return False
            
            logger.info(f"[SUCCESS] –ù–∞–π–¥–µ–Ω–∞ –Ω–æ–≤–æ—Å—Ç—å: {news_data.get('title', '')[:50]}...")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–æ–≤–æ—Å—Ç—å –∏ –ø–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            success = self._process_single_news(news_data)
            self.stats['processed_news'] += 1
            
            if success:
                logger.info(f"[SUCCESS] –ù–æ–≤–æ—Å—Ç—å ID {news_id} —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞")
            else:
                logger.warning(f"[WARNING] –ù–æ–≤–æ—Å—Ç—å ID {news_id} –±—ã–ª–∞ –∑–∞–±—Ä–∞–∫–æ–≤–∞–Ω–∞")
            
            return success
            
        except Exception as e:
            logger.error(f"[ERROR] –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–æ–≤–æ—Å—Ç–∏ ID {news_id}: {e}")
            return False

    def _process_single_news(self, news_data: Dict) -> bool:
        """Processes a single news item from raw data to a finished video."""
        news_id = news_data['id']
        logger.info(f"üé¨ Processing news ID {news_id}: {news_data.get('title', '')[:50]}...")

        try:
            # Step 1: LLM Processing
            llm_result = self.llm_processor.process_news_for_shorts(news_data)
            logger.info(f"üîç DEBUG: llm_result = {llm_result}")
            if llm_result.get('status') == 'error':
                logger.error(f"  LLM processing failed: {llm_result.get('error')}")
                return False
            video_package = llm_result.get('video_package', {})
            logger.info(f"üîç DEBUG: video_package = {video_package}")

            # Step 2: Media Processing
            media_data = self._process_media_for_news(news_data)
            if not media_data.get('has_media'):
                logger.warning(f"  ‚ùå News item {news_id} has no usable media. Rejecting.")
                return False

            # Step 3: Enrich video_package with runtime data
            video_package['media'] = media_data
            video_package['source_info'] = {
                'name': news_data.get('source', ''),
                'username': news_data.get('username', ''),
                'url': news_data.get('url', ''),
                'publish_date': self._parse_publish_date(news_data.get('published', '')),
                'avatar_path': media_data.get('avatar_path')
            }
            
            # –û—Ç–ª–∞–¥–∫–∞
            logger.info(f"üîç DEBUG Media data: {media_data}")
            logger.info(f"üîç DEBUG Source info: {video_package['source_info']}")

            # Step 4: Content Quality Validation
            if not self._validate_content_quality(video_package, news_data):
                logger.warning(f"  ‚ö†Ô∏è Content for news {news_id} failed quality validation. Skipping.")
                return False

            # Step 5: Video Export
            video_path = self._export_video(news_id, video_package)
            if not video_path:
                return False

            # Step 6: YouTube Upload
            self._upload_to_youtube(video_path, video_package)

            # Step 7: Finalize
            self.telegram_bot.mark_news_processed(news_id)
            logger.info(f"  ‚úì News item {news_id} marked as processed.")
            return True

        except Exception as e:
            logger.error(f"Critical error processing news {news_id}: {e}", exc_info=True)
            return False

    def _parse_publish_date(self, published_date: str) -> str:
        """Parses various date formats into a consistent string."""
        from datetime import datetime
        if not published_date:
            return datetime.now().strftime('%d.%m.%Y')
        try:
            if 'GMT' in published_date or 'UTC' in published_date:
                date_without_updated = published_date.split(' / Updated')[0]
                date_without_tz = date_without_updated.split(' GMT')[0].split(' UTC')[0]
                dt = datetime.strptime(date_without_tz, '%b. %d, %Y, %I:%M %p')
            elif 'T' in published_date:
                dt = datetime.fromisoformat(published_date.replace('Z', '+00:00'))
            else:
                dt = datetime.strptime(published_date, '%Y-%m-%d %H:%M:%S')
            return dt.strftime('%d.%m.%Y')
        except Exception:
            return datetime.now().strftime('%d.%m.%Y')

    def _process_media_for_news(self, news_data: Dict) -> Dict:
        """Selects a media manager and processes media for the given news item."""
        source = (news_data.get('source') or '').lower()
        # This logic can be expanded to a more robust factory pattern
        if 'politico' in source:
            from engines.politico.politico_media_manager import PoliticoMediaManager
            media_manager = PoliticoMediaManager(self.config)
        elif 'washington' in source:
            from engines.washingtonpost.washingtonpost_media_manager import WashingtonPostMediaManager
            media_manager = WashingtonPostMediaManager(self.config)
        elif 'twitter' in source:
            from engines.twitter.twitter_media_manager import TwitterMediaManager
            media_manager = TwitterMediaManager(self.config)
        elif 'nbc' in source:
            from engines.nbcnews.nbcnews_media_manager import NBCNewsMediaManager
            media_manager = NBCNewsMediaManager(self.config)
        elif 'telegram' in source:
            from engines.telegrampost.telegrampost_media_manager import TelegramPostMediaManager
            media_manager = TelegramPostMediaManager(self.config)
        elif 'financial' in source or 'ft' in source:
            from engines.financialtimes.financialtimes_media_manager import FinancialTimesMediaManager
            media_manager = FinancialTimesMediaManager(self.config)
        # elif 'wsj' in source or 'wall street' in source:
        #     from engines.wsj.wsj_media_manager import WSJMediaManager
        #     media_manager = WSJMediaManager(self.config)
        else:
            from scripts.media_manager import MediaManager
            media_manager = MediaManager(self.config)
        
        return media_manager.process_news_media(news_data)


    def _export_video(self, news_id: int, video_package: Dict) -> Optional[str]:
        """Exports the video and returns the path."""
        logger.info(f"  Exporting video for news {news_id}...")
        output_filename = f"short_{news_id}_{int(time.time())}.mp4"
        output_path = os.path.join(self.config['paths']['outputs_dir'], output_filename)
        
        video_path = self.video_exporter.create_news_short_video(video_package, output_path)
        if not video_path:
            logger.error(f"  Video export failed for news {news_id}")
            self.stats['failed_videos'] += 1
            return None
        
        self.stats['successful_videos'] += 1
        logger.info(f"  ‚úì Video created: {video_path}")
        return video_path

    def _upload_to_youtube(self, video_path: str, video_package: Dict):
        """Uploads the video to YouTube if enabled."""
        if not self.youtube_uploader:
            logger.info("  YouTube Uploader is not available, skipping upload.")
            return

        logger.info("  üì§ Uploading video to YouTube...")
        seo_package = video_package.get('seo_package', {})
        source_name = video_package.get('source_info', {}).get('name', 'Unknown')

        youtube_metadata = {
            'title': seo_package.get('youtube_title', 'News Update')[:100],
            'description': seo_package.get('youtube_description', ''),
            'tags': seo_package.get('tags', ['news', 'shorts']),
            'category_id': '25',  # News & Politics
            'privacy_status': 'private',
            'source_name': source_name
        }

        video_url = self.youtube_uploader.upload_video_with_metadata(video_path, youtube_metadata)
        if video_url:
            logger.info(f"  ‚úÖ Video uploaded to YouTube: {video_url}")
            self.stats['uploaded_videos'] += 1
        else:
            logger.error("  ‚ùå YouTube upload failed.")

    def _send_media_rejection_notification(self, news_id: int, news_data: Dict):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –±—Ä–∞–∫–æ–≤–∫–µ –≤–∏–¥–µ–æ –∏–∑-–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –º–µ–¥–∏–∞"""
        try:
            title = news_data.get('title', 'Unknown')[:50]
            source = news_data.get('source', 'Unknown')
            url = news_data.get('url', '')
            
            message = f"‚ùå **–í–∏–¥–µ–æ –∑–∞–±—Ä–∞–∫–æ–≤–∞–Ω–æ**\n\n"
            message += f"üì∞ **–ù–æ–≤–æ—Å—Ç—å ID:** {news_id}\n"
            message += f"üìù **–ó–∞–≥–æ–ª–æ–≤–æ–∫:** {title}...\n"
            message += f"üì° **–ò—Å—Ç–æ—á–Ω–∏–∫:** {source}\n"
            message += f"üîó **URL:** {url}\n\n"
            message += f"‚ö†Ô∏è **–ü—Ä–∏—á–∏–Ω–∞:** –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –º–µ–¥–∏–∞ –¥–ª—è —à–∞–ø–∫–∏ –≤–∏–¥–µ–æ\n"
            message += f"üì∏ **–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:** {len(news_data.get('images', []))}\n"
            message += f"üé¨ **–í–∏–¥–µ–æ:** {len(news_data.get('videos', []))}\n\n"
            message += f"üí° **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:** –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–∞—Ä—Å–∏–Ω–≥ –º–µ–¥–∏–∞ –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ fallback –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ Telegram Publisher
            if hasattr(self, 'telegram_publisher'):
                self.telegram_publisher.send_message(message)
                logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –±—Ä–∞–∫–æ–≤–∫–µ –Ω–æ–≤–æ—Å—Ç–∏ {news_id}")
            else:
                logger.warning(f"‚ö†Ô∏è Telegram Publisher –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –±—Ä–∞–∫–æ–≤–∫–µ")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –±—Ä–∞–∫–æ–≤–∫–µ: {e}")

            raise

    def _find_source_logo(self, source_name: str) -> Optional[str]:
        """–ü–æ–∏—Å–∫ –ª–æ–≥–æ—Ç–∏–ø–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∞"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω—ã –ª–∏ –ª–æ–≥–æ—Ç–∏–ø—ã –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        if not self.config.get('source_logos', {}).get('enabled', False):
            return None

        logo_dir = os.path.join(self.project_path, self.config['source_logos']['logo_dir'])

        if not os.path.exists(logo_dir):
            logger.warning(f"–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ª–æ–≥–æ—Ç–∏–ø–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {logo_dir}")
            return None

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–æ–º–µ–Ω –∏–∑ source_name
        domain = self._extract_domain(source_name)
        if not domain:
            return None

        # –ò—â–µ–º –ª–æ–≥–æ—Ç–∏–ø –ø–æ –¥–æ–º–µ–Ω—É
        supported_formats = self.config['source_logos']['supported_formats']

        for ext in supported_formats:
            logo_path = os.path.join(logo_dir, f"{domain}.{ext}")
            if os.path.exists(logo_path):
                logger.info(f"–ù–∞–π–¥–µ–Ω –ª–æ–≥–æ—Ç–∏–ø –¥–ª—è {domain}: {logo_path}")
                return logo_path

        # –ï—Å–ª–∏ –ª–æ–≥–æ—Ç–∏–ø –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π
        default_logo = self.config['source_logos']['default_logo']
        default_path = os.path.join(self.project_path, default_logo)

        if os.path.exists(default_path):
            logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –ª–æ–≥–æ—Ç–∏–ø: {default_path}")
            return default_path

        logger.warning(f"–õ–æ–≥–æ—Ç–∏–ø –¥–ª—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞ '{source_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return None

    def _extract_domain(self, source_name: str) -> Optional[str]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–æ–º–µ–Ω –∏–∑ URL –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞"""
        import re
        from urllib.parse import urlparse

        if not source_name:
            return None

        # –ï—Å–ª–∏ —ç—Ç–æ URL, –∏–∑–≤–ª–µ–∫–∞–µ–º –¥–æ–º–µ–Ω
        if '://' in source_name:
            try:
                parsed = urlparse(source_name)
                domain = parsed.netloc.lower()
                # –£–±–∏—Ä–∞–µ–º www. –µ—Å–ª–∏ –µ—Å—Ç—å
                if domain.startswith('www.'):
                    domain = domain[4:]
                return domain.split('.')[0]  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω—É—é —á–∞—Å—Ç—å
            except:
                pass

        # –ï—Å–ª–∏ —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏–µ, –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
        source_lower = source_name.lower()

        # –ò–∑–≤–µ—Å—Ç–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –∏ –∏—Ö –¥–æ–º–µ–Ω—ã
        known_sources = {
            'cnn': 'cnn',
            'bbc': 'bbc',
            'reuters': 'reuters',
            'ap': 'ap',
            'nyt': 'nyt',
            'washington post': 'washingtonpost',
            'guardian': 'guardian',
            'fox news': 'foxnews',
            'nbc': 'nbc',
            'abc': 'abc',
            'cbs': 'cbs'
        }

        for name, domain in known_sources.items():
            if name in source_lower:
                return domain

        # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—á–∏—â–µ–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
        clean_name = re.sub(r'[^\w]', '', source_lower)
        return clean_name if clean_name else None

    def _validate_content_quality(self, video_data: Dict, news_data: Dict) -> bool:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –≤–∏–¥–µ–æ"""
        logger.info("üîç –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è - –∏–∑–≤–ª–µ–∫–∞–µ–º –∏–∑ video_content
        video_content = video_data.get('video_content', {})
        title = video_content.get('title', '').strip()
        summary = video_content.get('summary', '').strip()
        description = video_data.get('description', '').strip()
        
        # –°–ø–∏—Å–æ–∫ –ø—Ä–æ–±–ª–µ–º
        issues = []
        
        # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞
        if not title or len(title) < 10:
            issues.append("–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
        elif len(title) > 300:  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ª–∏–º–∏—Ç –¥–ª—è Twitter
            issues.append("–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π")
        elif title.lower() in ['breaking news', 'news', 'update', 'breaking']:
            issues.append("–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–ª–∏—à–∫–æ–º –æ–±—â–∏–π")
        
        # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—Å—Ç–∞ –Ω–æ–≤–æ—Å—Ç–∏
        if not summary or len(summary) < 50:
            issues.append("–¢–µ–∫—Å—Ç –Ω–æ–≤–æ—Å—Ç–∏ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
        elif len(summary) > 2000:
            issues.append("–¢–µ–∫—Å—Ç –Ω–æ–≤–æ—Å—Ç–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π")
        
        # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ CAPTCHA –∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
        captcha_indicators = [
            "–ø—Ä–æ–≤–µ—Ä—è–µ–º, —á–µ–ª–æ–≤–µ–∫ –ª–∏ –≤—ã",
            "please verify you are human",
            "checking your browser",
            "captcha",
            "cloudflare",
            "access denied",
            "verification required",
            "human verification",
            "you are blocked",
            "access blocked",
            "request blocked"
        ]
        
        summary_lower = summary.lower()
        for indicator in captcha_indicators:
            if indicator in summary_lower:
                issues.append(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ CAPTCHA/–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞: '{indicator}'")
                break
        
        # 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–≥–ª—É—à–∫–∏ LLM
        llm_placeholders = [
            "please provide the news article",
            "i need the text of the article",
            "i need the news story",
            "please provide the news",
            "i need the content",
            "please provide content",
            "i need more information",
            "please provide more details"
        ]
        
        for placeholder in llm_placeholders:
            if placeholder in summary_lower:
                issues.append(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∑–∞–≥–ª—É—à–∫–∞ LLM: '{placeholder}'")
                break
        
        # 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —Å–∏–º–≤–æ–ª—ã
        if len(set(summary)) < 10:  # –ú–µ–Ω–µ–µ 10 —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
            issues.append("–¢–µ–∫—Å—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–ª–∏—à–∫–æ–º –º–∞–ª–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤")
        
        # 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç—ã–µ –∏–ª–∏ —Å–ª—É–∂–µ–±–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        # –°–Ω–∏–∂–µ–Ω–æ —Å 100 –¥–æ 70 –¥–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö —Å—Ç–∞—Ç–µ–π (–Ω–∞–ø—Ä. FT —Å paywall)
        if not description or description in ['...', '']:
            if len(summary) < 70:  # –ï—Å–ª–∏ –Ω–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è, —Ç–µ–∫—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–ª–∏–Ω–Ω–µ–µ
                issues.append("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–¥–µ–æ")
        
        # 6. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ JSON –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ (–æ—à–∏–±–∫–∞ LLM)
        if '{' in title and '}' in title:
            issues.append("–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–æ–¥–µ—Ä–∂–∏—Ç JSON –∫–æ–¥ (–æ—à–∏–±–∫–∞ LLM)")
        
        # 7. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
        special_chars = sum(1 for c in summary if not c.isalnum() and not c.isspace())
        if special_chars > len(summary) * 0.3:  # –ë–æ–ª–µ–µ 30% —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
            issues.append("–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –≤ —Ç–µ–∫—Å—Ç–µ")
        
        # 8. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–∫—Ç–æ–≤ (–≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–∞)
        # fact_issues = self._validate_facts(title, summary, description)
        # issues.extend(fact_issues)
        
        # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        if issues:
            logger.warning(f"‚ùå –ö–æ–Ω—Ç–µ–Ω—Ç –Ω–µ –ø—Ä–æ—à–µ–ª –≤–∞–ª–∏–¥–∞—Ü–∏—é:")
            for issue in issues:
                logger.warning(f"   - {issue}")
            logger.warning(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: –∑–∞–≥–æ–ª–æ–≤–æ–∫={len(title)} —Å–∏–º–≤–æ–ª–æ–≤, —Ç–µ–∫—Å—Ç={len(summary)} —Å–∏–º–≤–æ–ª–æ–≤")
            return False
        else:
            logger.info(f"‚úÖ –ö–æ–Ω—Ç–µ–Ω—Ç –ø—Ä–æ—à–µ–ª –≤–∞–ª–∏–¥–∞—Ü–∏—é: –∑–∞–≥–æ–ª–æ–≤–æ–∫={len(title)} —Å–∏–º–≤–æ–ª–æ–≤, —Ç–µ–∫—Å—Ç={len(summary)} —Å–∏–º–≤–æ–ª–æ–≤")
            return True

    def run_continuous_mode(self):
        """–ó–∞–ø—É—Å–∫ –≤ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–º —Ä–µ–∂–∏–º–µ"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã –≤ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–º —Ä–µ–∂–∏–º–µ")
        logger.info(f"–ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {self.config['news_parser']['update_interval_minutes']} –º–∏–Ω—É—Ç")

        # –ó–∞–ø—É—Å–∫ –ø–µ—Ä–≤–æ–≥–æ —Ü–∏–∫–ª–∞
        self.process_single_news_cycle()

        # –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –∑–∞–ø—É—Å–∫–æ–≤
        interval = self.config['news_parser']['update_interval_minutes']
        schedule.every(interval).minutes.do(self.process_single_news_cycle)

        # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
        try:
            while True:
                schedule.run_pending()
                time.sleep(60)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É

        except KeyboardInterrupt:
            logger.info("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è")
            self._print_final_stats()
            self.cleanup()

    def run_single_cycle(self):
        """–ó–∞–ø—É—Å–∫ –æ–¥–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        logger.info("üîÑ –ó–∞–ø—É—Å–∫ –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏")
        self.process_single_news_cycle()
        self._print_final_stats()
        self.cleanup()

    def _print_final_stats(self):
        """–í—ã–≤–æ–¥ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        runtime = time.time() - self.stats['start_time']
        logger.info("=" * 50)
        logger.info("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –†–ê–ë–û–¢–´ –°–ò–°–¢–ï–ú–´")
        logger.info("=" * 50)
        logger.info(f"‚è±Ô∏è  –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {runtime:.1f} —Å–µ–∫")
        logger.info(f"üì∞ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –Ω–æ–≤–æ—Å—Ç–µ–π: {self.stats['processed_news']}")
        logger.info(f"üé¨ –°–æ–∑–¥–∞–Ω–æ –≤–∏–¥–µ–æ: {self.stats['successful_videos']}")
        logger.info(f"‚ùå –û—à–∏–±–æ–∫ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤–∏–¥–µ–æ: {self.stats['failed_videos']}")
        logger.info(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ –Ω–∏–∑–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö: {self.stats['skipped_low_quality']}")
        logger.info(f"üì∏ –ü—Ä–æ–ø—É—â–µ–Ω–æ –±–µ–∑ –º–µ–¥–∏–∞: {self.stats['skipped_no_media']}")
        logger.info(f"üì§ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –Ω–∞ YouTube: {self.stats['uploaded_videos']}")

        if self.stats['processed_news'] > 0:
            success_rate = (self.stats['successful_videos'] / self.stats['processed_news']) * 100
            logger.info(f"üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫–∏: {success_rate:.1f}%")

    def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        logger.info("üßπ –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤...")

        # –ó–∞–∫—Ä—ã–≤–∞–µ–º VideoExporter
        if self.video_exporter:
            try:
                self.video_exporter.close()
                logger.info("‚úì VideoExporter –∑–∞–∫—Ä—ã—Ç")
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è VideoExporter: {e}")

        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –¥—Ä—É–≥–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        if hasattr(self, 'telegram_bot') and self.telegram_bot:
            try:
                if hasattr(self.telegram_bot, 'close'):
                    self.telegram_bot.close()
                logger.info("‚úì Telegram Bot –∑–∞–∫—Ä—ã—Ç")
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è Telegram Bot: {e}")

        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–±–æ—Ä–∫–∞ –º—É—Å–æ—Ä–∞
        try:
            import gc
            gc.collect()
        except:
            pass

        logger.info("‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

def create_env_file():
    """–°–æ–∑–¥–∞–Ω–∏–µ .env —Ñ–∞–π–ª–∞ —Å –ø—Ä–∏–º–µ—Ä–æ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    env_content = """# YouTube API Configuration
YOUTUBE_CLIENT_SECRET_FILE=config/client_secret.json

# Telegram Bot Configuration
TELEGRAM_API_ID=your_api_id
TELEGRAM_API_HASH=your_api_hash
TELEGRAM_BOT_TOKEN=your_bot_token
TELEGRAM_CHANNEL=@your_channel

# LLM API Keys
GEMINI_API_KEY=your_gemini_api_key
OPENAI_API_KEY=your_openai_api_key
ANTHROPIC_API_KEY=your_anthropic_api_key

# Optional: Twitter/X API (if using)
TWITTER_API_KEY=your_twitter_api_key
TWITTER_API_SECRET=your_twitter_api_secret
TWITTER_ACCESS_TOKEN=your_access_token
TWITTER_ACCESS_TOKEN_SECRET=your_access_token_secret
"""

    env_path = "config/.env"
    if not os.path.exists(env_path):
        with open(env_path, 'w', encoding='utf-8') as f:
            f.write(env_content)
        logger.info(f"–°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª —Å –ø—Ä–∏–º–µ—Ä–æ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è: {env_path}")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    parser = argparse.ArgumentParser(description='Shorts News System Orchestrator')
    parser.add_argument('--config', default='../config/config.yaml',
                       help='–ü—É—Ç—å –∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É')
    parser.add_argument('--mode', choices=['continuous', 'single'],
                       default='single', help='–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã')
    parser.add_argument('--create-env', action='store_true',
                       help='–°–æ–∑–¥–∞—Ç—å –ø—Ä–∏–º–µ—Ä .env —Ñ–∞–π–ª–∞')

    args = parser.parse_args()

    if args.create_env:
        create_env_file()
        return

    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—É—Ç–∏ –∫ –∫–æ–Ω—Ñ–∏–≥—É
    if not os.path.isabs(args.config):
        config_path = os.path.join(os.path.dirname(__file__), args.config)
    else:
        config_path = args.config

    if not os.path.exists(config_path):
        logger.error(f"–§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: {config_path}")
        sys.exit(1)

    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        orchestrator = ShortsNewsOrchestrator(config_path)

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        orchestrator.initialize_components()

        # –ó–∞–ø—É—Å–∫ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ
        if args.mode == 'continuous':
            orchestrator.run_continuous_mode()
        else:
            # –í–†–ï–ú–ï–ù–ù–û –û–¢–ö–õ–Æ–ß–ï–ù–û –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è —Å channel_monitor.py
            # orchestrator.run_single_cycle()
            logger.info("üì¢ –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —á–µ—Ä–µ–∑ channel_monitor.py")
            logger.info("üì¢ –ü—Ä—è–º–æ–π –∑–∞–ø—É—Å–∫ main_orchestrator.py –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω")

    except KeyboardInterrupt:
        logger.info("üõë –ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()
