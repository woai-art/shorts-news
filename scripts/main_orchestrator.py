#!/usr/bin/env python3
"""
–ì–ª–∞–≤–Ω—ã–π –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä —Å–∏—Å—Ç–µ–º—ã shorts_news
–£–ø—Ä–∞–≤–ª—è–µ—Ç –≤—Å–µ–º –ø—Ä–æ—Ü–µ—Å—Å–æ–º –æ—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π –¥–æ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ –Ω–∞ YouTube
"""

import os
import sys
import time
import logging
import schedule
from pathlib import Path
from typing import Dict, List, Optional, Any
import yaml
import argparse

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—É—Ç–∏ –∫ –º–æ–¥—É–ª—è–º
sys.path.append(os.path.dirname(__file__))

from news_processor import NewsProcessor
from llm_processor import LLMProcessor
from video_exporter import VideoExporter
from youtube_uploader import YouTubeUploader
from telegram_publisher import TelegramPublisher
from analytics import NewsAnalytics

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('logs/shorts_news.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class ShortsNewsOrchestrator:
    """–ì–ª–∞–≤–Ω—ã–π –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä —Å–∏—Å—Ç–µ–º—ã shorts_news"""

    def __init__(self, config_path: str):
        self.config_path = config_path
        self.config = self._load_config(config_path)
        self.project_path = self.config['project']['base_path']

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        self.news_processor = None
        self.llm_processor = None
        self.video_exporter = None
        self.youtube_uploader = None
        self.telegram_bot = None
        self.telegram_publisher = None
        self.analytics = NewsAnalytics()

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–±–æ—Ç—ã
        self.stats = {
            'processed_news': 0,
            'successful_videos': 0,
            'failed_videos': 0,
            'uploaded_videos': 0,
            'skipped_low_quality': 0,
            'start_time': time.time()
        }

    def _load_config(self, config_path: str) -> Dict:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        with open(config_path, 'r', encoding='utf-8') as f:
            return yaml.safe_load(f)

    def initialize_components(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã"""
        logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã...")

        try:
            # Telegram Bot –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π
            from telegram_bot import NewsTelegramBot
            self.telegram_bot = NewsTelegramBot(self.config_path)
            logger.info("‚úì Telegram Bot –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

            # LLM Processor
            self.llm_processor = LLMProcessor(self.config_path)
            logger.info("‚úì LLM Processor –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

            # Video Exporter (–∏—Å–ø–æ–ª—å–∑—É–µ–º Selenium –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ HTML5 –∞–Ω–∏–º–∞—Ü–∏–π)
            self.video_exporter = VideoExporter(self.config['video'], self.config['paths'])
            logger.info("‚úì Video Exporter (Selenium) –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            

            # YouTube Uploader (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω)
            if self.config['youtube'].get('upload_enabled', True):
                try:
                    self.youtube_uploader = YouTubeUploader(self.config_path)
                    logger.info("‚úì YouTube Uploader –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                except Exception as e:
                    logger.error(f"YouTube Uploader –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
                    logger.warning("–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞ YouTube –±—É–¥–µ—Ç –æ—Ç–∫–ª—é—á–µ–Ω–∞")
            else:
                logger.info("YouTube –∑–∞–≥—Ä—É–∑–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")

            # Telegram Publisher (–¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤)
            try:
                self.telegram_publisher = TelegramPublisher(self.config_path)
                if self.telegram_publisher.is_available():
                    logger.info("‚úì Telegram Publisher –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                else:
                    logger.warning("Telegram Publisher –æ—Ç–∫–ª—é—á–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
            except Exception as e:
                logger.error(f"Telegram Publisher –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
                logger.warning("–ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤ Telegram –±—É–¥–µ—Ç –æ—Ç–∫–ª—é—á–µ–Ω–∞")

            logger.info("–í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: {e}")
            raise

    def process_single_news_cycle(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –Ω–æ–≤–æ—Å—Ç–µ–π –∏–∑ Telegram –±–æ—Ç–∞"""
        logger.info("üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π –∏–∑ Telegram...")

        try:
            # –®–∞–≥ 1: –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –∏–∑ Telegram –±–æ—Ç–∞
            logger.info("–®–∞–≥ 1: –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–µ–π –∏–∑ Telegram –±–æ—Ç–∞...")
            pending_news = self.telegram_bot.get_pending_news(limit=10)  # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ 10 –Ω–æ–≤–æ—Å—Ç–µ–π

            if not pending_news:
                logger.info("–ù–µ—Ç –Ω–æ–≤—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –∏–∑ Telegram –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
                return

            logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(pending_news)} –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")

            # –®–∞–≥ 2: –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–∂–¥–æ–π –Ω–æ–≤–æ—Å—Ç–∏
            for news_item in pending_news:
                try:
                    self._process_single_news(news_item)
                    self.stats['processed_news'] += 1

                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–æ–≤–æ—Å—Ç–∏ ID {news_item['id']}: {e}")
                    continue

            logger.info(f"‚úÖ –¶–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω. –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {self.stats['processed_news']}")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")

    def _process_single_news(self, news_data: Dict):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–π –Ω–æ–≤–æ—Å—Ç–∏"""
        news_id = news_data['id']
        start_time = time.time()  # –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
        logger.info(f"üé¨ –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ—Å—Ç–∏ ID {news_id}: {news_data.get('title', '')[:50]}...")

        try:
            # –®–∞–≥ 3.1: LLM –æ–±—Ä–∞–±–æ—Ç–∫–∞
            logger.info(f"  LLM –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ—Å—Ç–∏ {news_id}...")
            llm_result = self.llm_processor.process_news_for_shorts(news_data)

            if llm_result.get('status') == 'error':
                logger.error(f"  –û—à–∏–±–∫–∞ LLM –æ–±—Ä–∞–±–æ—Ç–∫–∏: {llm_result.get('error')}")
                return

            # –®–∞–≥ 3.2: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤–∏–¥–µ–æ
            
            # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
            publish_date = '–°–µ–≥–æ–¥–Ω—è'
            publish_time = '–°–µ–π—á–∞—Å'
            
            published_date = news_data.get('published', '') or news_data.get('publish_date', '')
            if published_date:
                try:
                    from datetime import datetime
                    if isinstance(published_date, str):
                        if 'T' in published_date:  # ISO —Ñ–æ—Ä–º–∞—Ç
                            dt = datetime.fromisoformat(published_date.replace('Z', '+00:00'))
                        else:
                            # –ü—Ä–æ–±—É–µ–º –¥—Ä—É–≥–∏–µ —Ñ–æ—Ä–º–∞—Ç—ã
                            try:
                                dt = datetime.strptime(published_date, '%Y-%m-%d %H:%M:%S')
                            except:
                                dt = datetime.strptime(published_date, '%Y-%m-%d')
                        
                        publish_date = dt.strftime('%d.%m.%Y')
                        publish_time = dt.strftime('%H:%M')
                except Exception as e:
                    logger.warning(f"  –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –¥–∞—Ç—É '{published_date}': {e}")
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–¥–∏–∞-–¥–∞–Ω–Ω—ã—Ö
            media_data = {}
            try:
                if news_data.get('images'):
                    from scripts.media_manager import MediaManager
                    media_manager = MediaManager(self.config)
                    media_result = media_manager.process_news_media(news_data)
                    media_data = media_result
                    logger.info(f"  üì∏ –ú–µ–¥–∏–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ={bool(media_result.get('local_image_path'))}")
            except Exception as e:
                logger.warning(f"  ‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–µ–¥–∏–∞: {e}")

            video_data = {
                'title': news_data.get('title', 'Breaking News'),  # –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–æ–≤–æ—Å—Ç–∏ –¥–ª—è –≤–∏–¥–µ–æ
                'description': news_data.get('description', ''),
                'summary': llm_result.get('summary', llm_result.get('video_text', news_data.get('description', 'Brief news summary'))),
                'url': news_data.get('url', ''),
                'source': news_data.get('source', ''),
                'publish_date': publish_date,
                'publish_time': publish_time,
                'images': news_data.get('images', []),
                **media_data  # –î–æ–±–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞-–¥–∞–Ω–Ω—ã–µ
            }
            
            # –û—Ç–ª–∞–¥–∫–∞: –ø–æ—Å–º–æ—Ç—Ä–∏–º, —á—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç LLM –∏ —á—Ç–æ –≤ –∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            logger.info(f"  –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: title='{news_data.get('title', '')[:50]}...', description='{news_data.get('description', '')[:50]}...'")
            logger.info(f"  üìÖ –î–∞—Ç–∞ –≤ –∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: published='{news_data.get('published', '')}', publish_date='{news_data.get('publish_date', '')}'")
            logger.info(f"  üìÖ –°–ø–∞—Ä—Å–µ–Ω–Ω–∞—è –¥–∞—Ç–∞: {publish_date} {publish_time}")
            logger.info(f"  LLM —Ä–µ–∑—É–ª—å—Ç–∞—Ç: title={bool(llm_result.get('title'))}, summary={bool(llm_result.get('summary'))}, video_text={bool(llm_result.get('video_text'))}")
            if llm_result.get('video_text'):
                logger.info(f"  LLM video_text: '{llm_result.get('video_text')[:100]}...'")
            if llm_result.get('title'):
                logger.info(f"  LLM title: '{llm_result.get('title')[:100]}...'")
            logger.info(f"  –§–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤–∏–¥–µ–æ: title='{video_data['title'][:50]}...', summary='{video_data['summary'][:50]}...'")
            
            # –®–∞–≥ 3.2.5: –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –≤–∏–¥–µ–æ
            if not self._validate_content_quality(video_data, news_data):
                logger.warning(f"  ‚ö†Ô∏è –ö–æ–Ω—Ç–µ–Ω—Ç –Ω–æ–≤–æ—Å—Ç–∏ {news_id} –Ω–µ –ø—Ä–æ—à–µ–ª –≤–∞–ª–∏–¥–∞—Ü–∏—é - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–µ–æ")
                self.stats['skipped_low_quality'] = self.stats.get('skipped_low_quality', 0) + 1
                return

            # –®–∞–≥ 3.3: –≠–∫—Å–ø–æ—Ä—Ç –≤–∏–¥–µ–æ —Å –Ω–æ–≤—ã–º —à–∞–±–ª–æ–Ω–æ–º
            logger.info(f"  –≠–∫—Å–ø–æ—Ä—Ç –≤–∏–¥–µ–æ –¥–ª—è –Ω–æ–≤–æ—Å—Ç–∏ {news_id}...")
            output_filename = f"short_{news_id}_{int(time.time())}.mp4"
            output_path = os.path.join(self.config['paths']['outputs_dir'], output_filename)
            
            # –£—á–µ—Ç —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ —Å–º–µ—â–µ–Ω–∏—è –≤–∏–¥–µ–æ—à–∞–ø–∫–∏, –µ—Å–ª–∏ –∑–∞–¥–∞–Ω–æ –≤ –ë–î
            try:
                start_seconds = float(news_data.get('video_start_seconds') or 0)
            except Exception:
                start_seconds = 0.0
            try:
                self.video_exporter.header_video_start_seconds = start_seconds
            except Exception:
                pass

            video_path = self.video_exporter.create_news_short_video(video_data, output_path)

            if not video_path:
                logger.error(f"  –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤–∏–¥–µ–æ –¥–ª—è –Ω–æ–≤–æ—Å—Ç–∏ {news_id}")
                self.stats['failed_videos'] += 1
                return

            self.stats['successful_videos'] += 1
            logger.info(f"  ‚úì –í–∏–¥–µ–æ —Å–æ–∑–¥–∞–Ω–æ: {video_path}")

            # –®–∞–≥ 3.4: –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞ YouTube
            video_url = None
            if self.youtube_uploader:
                try:
                    logger.info(f"  üì§ –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–∏–¥–µ–æ –Ω–∞ YouTube...")
                    
                    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–ª—è YouTube
                    seo_package = llm_result.get('seo_package', {})
                    
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ –Ω–æ–≤–æ—Å—Ç–∏ –¥–ª—è –ø–ª–µ–π–ª–∏—Å—Ç–∞ (—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –≤–∞—à–∏–º –ø–ª–µ–π–ª–∏—Å—Ç–∞–º)
                    source_name = video_data.get('source', 'Unknown')
                    if 'new york times' in source_name.lower() or 'nytimes' in source_name.lower():
                        source_name = 'NYTIMES'
                    elif 'politico' in source_name.lower():
                        source_name = 'POLITICO'
                    elif 'washington post' in source_name.lower():
                        source_name = 'WASHINGTON POST'
                    elif 'foxnews' in source_name.lower() or 'fox news' in source_name.lower():
                        source_name = 'FOXNEWS'
                    elif 'cnn' in source_name.lower():
                        source_name = 'CNN'
                    elif 'bbc' in source_name.lower():
                        source_name = 'BBC'
                    elif 'reuters' in source_name.lower():
                        source_name = 'REUTERS'
                    elif 'twitter' in source_name.lower() or 'x.com' in source_name.lower():
                        source_name = 'TWITTER'
                    else:
                        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤–æ–µ —Å–ª–æ–≤–æ –∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –∏ –¥–µ–ª–∞–µ–º —á–∏—Ç–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
                        first_word = source_name.split()[0] if source_name else 'OTHER'
                        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —á–∏—Ç–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, "www.politico.com" -> "POLITICO")
                        if '.' in first_word:
                            clean_name = first_word.replace('www.', '').split('.')[0]
                            source_name = clean_name.upper()
                        else:
                            source_name = first_word.upper()
                    
                    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º SEO –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è YouTube —Å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–æ–π –Ω–∞ –∏—Å—Ç–æ—á–Ω–∏–∫
                    seo_description = seo_package.get('description', '')
                    source_url = video_data.get('url', '')
                    
                    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è YouTube
                    if seo_description:
                        description = seo_description
                    else:
                        # Fallback: –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫—Ä–∞—Ç–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –µ—Å–ª–∏ SEO –æ–ø–∏—Å–∞–Ω–∏—è –Ω–µ—Ç
                        description = video_data.get('summary', '')[:200]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∏—Å—Ç–æ—á–Ω–∏–∫ (–≤—Å–µ–≥–¥–∞)
                    if source_url:
                        if description:
                            description += f"\n\nSource: {source_url}"
                        else:
                            description = f"Source: {source_url}"
                    
                    youtube_metadata = {
                        'title': seo_package.get('title', video_data.get('title', 'Breaking News'))[:100],
                        'description': description,
                        'tags': seo_package.get('tags', ['news', 'politics', 'breaking news', 'shorts', 'usa politics']),
                        'category_id': '25',  # News & Politics
                        'privacy_status': 'private',  # –ü—Ä–∏–≤–∞—Ç–Ω–æ–µ –¥–ª—è —Ä—É—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
                        'source_name': source_name  # –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–µ–π–ª–∏—Å—Ç–∞
                    }
                    
                    video_url = self.youtube_uploader.upload_video_with_metadata(video_path, youtube_metadata)
                    
                    if video_url:
                        logger.info(f"  ‚úÖ –í–∏–¥–µ–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –Ω–∞ YouTube: {video_url}")
                        logger.info(f"  üìÇ –ò—Å—Ç–æ—á–Ω–∏–∫: {source_name} - –≤–∏–¥–µ–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –ø–ª–µ–π–ª–∏—Å—Ç")
                        self.stats['uploaded_videos'] += 1
                    else:
                        logger.error(f"  ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤–∏–¥–µ–æ –Ω–∞ YouTube")
                        video_url = f"file://{video_path}"
                        
                except Exception as e:
                    logger.error(f"  ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ YouTube: {e}")
                    video_url = f"file://{video_path}"
            else:
                logger.info(f"  ‚ö†Ô∏è YouTube Uploader –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω")
                video_url = f"file://{video_path}"
            
            # –®–∞–≥ 3.5: –ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤ Telegram –∫–∞–Ω–∞–ª (–í–†–ï–ú–ï–ù–ù–û –û–¢–ö–õ–Æ–ß–ï–ù–ê)
            logger.info(f"  üì§ –ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤ Telegram –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–∞ –¥–ª—è —Ñ–æ–∫—É—Å–∞ –Ω–∞ YouTube")
            logger.info(f"  ‚úÖ –í–∏–¥–µ–æ –≥–æ—Ç–æ–≤–æ: {os.path.basename(video_path)}")

            # –®–∞–≥ 3.6: –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∞–Ω–∞–ª–∏—Ç–∏–∫—É
            processing_time = time.time() - start_time
            news_analytics_data = {
                'title': news_data.get('title', ''),
                'source': news_data.get('source', ''),
                'category': llm_result.get('category', 'unknown'),
                'language': llm_result.get('language', 'unknown')
            }
            self.analytics.record_news_processing(news_analytics_data, True, processing_time)

            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –Ω–æ–≤–æ—Å—Ç–∏ –≤ Telegram –±–æ—Ç–µ
            self.telegram_bot.mark_news_processed(news_id)
            if video_url:
                self.telegram_bot.mark_video_created(news_id, video_url)
            logger.info(f"  ‚úì –ù–æ–≤–æ—Å—Ç—å {news_id} –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–æ–≤–æ—Å—Ç–∏ {news_id}: {e}")

            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –≤ –∞–Ω–∞–ª–∏—Ç–∏–∫—É
            try:
                processing_time = time.time() - start_time
                news_analytics_data = {
                    'title': news_data.get('title', ''),
                    'source': news_data.get('source', ''),
                    'category': 'error',
                    'language': 'unknown'
                }
                self.analytics.record_news_processing(news_analytics_data, False, processing_time)
            except:
                pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏

            raise

    def _find_source_logo(self, source_name: str) -> Optional[str]:
        """–ü–æ–∏—Å–∫ –ª–æ–≥–æ—Ç–∏–ø–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∞"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω—ã –ª–∏ –ª–æ–≥–æ—Ç–∏–ø—ã –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        if not self.config.get('source_logos', {}).get('enabled', False):
            return None

        logo_dir = os.path.join(self.project_path, self.config['source_logos']['logo_dir'])

        if not os.path.exists(logo_dir):
            logger.warning(f"–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ª–æ–≥–æ—Ç–∏–ø–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {logo_dir}")
            return None

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–æ–º–µ–Ω –∏–∑ source_name
        domain = self._extract_domain(source_name)
        if not domain:
            return None

        # –ò—â–µ–º –ª–æ–≥–æ—Ç–∏–ø –ø–æ –¥–æ–º–µ–Ω—É
        supported_formats = self.config['source_logos']['supported_formats']

        for ext in supported_formats:
            logo_path = os.path.join(logo_dir, f"{domain}.{ext}")
            if os.path.exists(logo_path):
                logger.info(f"–ù–∞–π–¥–µ–Ω –ª–æ–≥–æ—Ç–∏–ø –¥–ª—è {domain}: {logo_path}")
                return logo_path

        # –ï—Å–ª–∏ –ª–æ–≥–æ—Ç–∏–ø –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π
        default_logo = self.config['source_logos']['default_logo']
        default_path = os.path.join(self.project_path, default_logo)

        if os.path.exists(default_path):
            logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –ª–æ–≥–æ—Ç–∏–ø: {default_path}")
            return default_path

        logger.warning(f"–õ–æ–≥–æ—Ç–∏–ø –¥–ª—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞ '{source_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return None

    def _extract_domain(self, source_name: str) -> Optional[str]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–æ–º–µ–Ω –∏–∑ URL –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞"""
        import re
        from urllib.parse import urlparse

        if not source_name:
            return None

        # –ï—Å–ª–∏ —ç—Ç–æ URL, –∏–∑–≤–ª–µ–∫–∞–µ–º –¥–æ–º–µ–Ω
        if '://' in source_name:
            try:
                parsed = urlparse(source_name)
                domain = parsed.netloc.lower()
                # –£–±–∏—Ä–∞–µ–º www. –µ—Å–ª–∏ –µ—Å—Ç—å
                if domain.startswith('www.'):
                    domain = domain[4:]
                return domain.split('.')[0]  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω—É—é —á–∞—Å—Ç—å
            except:
                pass

        # –ï—Å–ª–∏ —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏–µ, –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
        source_lower = source_name.lower()

        # –ò–∑–≤–µ—Å—Ç–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –∏ –∏—Ö –¥–æ–º–µ–Ω—ã
        known_sources = {
            'cnn': 'cnn',
            'bbc': 'bbc',
            'reuters': 'reuters',
            'ap': 'ap',
            'nyt': 'nyt',
            'washington post': 'washingtonpost',
            'guardian': 'guardian',
            'fox news': 'foxnews',
            'nbc': 'nbc',
            'abc': 'abc',
            'cbs': 'cbs'
        }

        for name, domain in known_sources.items():
            if name in source_lower:
                return domain

        # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—á–∏—â–µ–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
        clean_name = re.sub(r'[^\w]', '', source_lower)
        return clean_name if clean_name else None

    def _validate_content_quality(self, video_data: Dict, news_data: Dict) -> bool:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –≤–∏–¥–µ–æ"""
        logger.info("üîç –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è
        title = video_data.get('title', '').strip()
        summary = video_data.get('summary', '').strip()
        description = video_data.get('description', '').strip()
        
        # –°–ø–∏—Å–æ–∫ –ø—Ä–æ–±–ª–µ–º
        issues = []
        
        # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞
        if not title or len(title) < 10:
            issues.append("–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
        elif len(title) > 200:
            issues.append("–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π")
        elif title.lower() in ['breaking news', 'news', 'update', 'breaking']:
            issues.append("–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–ª–∏—à–∫–æ–º –æ–±—â–∏–π")
        
        # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—Å—Ç–∞ –Ω–æ–≤–æ—Å—Ç–∏
        if not summary or len(summary) < 50:
            issues.append("–¢–µ–∫—Å—Ç –Ω–æ–≤–æ—Å—Ç–∏ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
        elif len(summary) > 2000:
            issues.append("–¢–µ–∫—Å—Ç –Ω–æ–≤–æ—Å—Ç–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π")
        
        # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ CAPTCHA –∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
        captcha_indicators = [
            "–ø—Ä–æ–≤–µ—Ä—è–µ–º, —á–µ–ª–æ–≤–µ–∫ –ª–∏ –≤—ã",
            "please verify you are human",
            "checking your browser",
            "captcha",
            "cloudflare",
            "access denied",
            "blocked",
            "verification required",
            "human verification"
        ]
        
        summary_lower = summary.lower()
        for indicator in captcha_indicators:
            if indicator in summary_lower:
                issues.append(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ CAPTCHA/–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞: '{indicator}'")
                break
        
        # 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–≥–ª—É—à–∫–∏ LLM
        llm_placeholders = [
            "please provide the news article",
            "i need the text of the article",
            "i need the news story",
            "please provide the news",
            "i need the content",
            "please provide content",
            "i need more information",
            "please provide more details"
        ]
        
        for placeholder in llm_placeholders:
            if placeholder in summary_lower:
                issues.append(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∑–∞–≥–ª—É—à–∫–∞ LLM: '{placeholder}'")
                break
        
        # 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —Å–∏–º–≤–æ–ª—ã
        if len(set(summary)) < 10:  # –ú–µ–Ω–µ–µ 10 —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
            issues.append("–¢–µ–∫—Å—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–ª–∏—à–∫–æ–º –º–∞–ª–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤")
        
        # 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç—ã–µ –∏–ª–∏ —Å–ª—É–∂–µ–±–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        if not description or description in ['...', '']:
            if len(summary) < 100:  # –ï—Å–ª–∏ –Ω–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è, —Ç–µ–∫—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–ª–∏–Ω–Ω–µ–µ
                issues.append("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–¥–µ–æ")
        
        # 6. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ JSON –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ (–æ—à–∏–±–∫–∞ LLM)
        if '{' in title and '}' in title:
            issues.append("–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–æ–¥–µ—Ä–∂–∏—Ç JSON –∫–æ–¥ (–æ—à–∏–±–∫–∞ LLM)")
        
        # 7. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
        special_chars = sum(1 for c in summary if not c.isalnum() and not c.isspace())
        if special_chars > len(summary) * 0.3:  # –ë–æ–ª–µ–µ 30% —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
            issues.append("–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –≤ —Ç–µ–∫—Å—Ç–µ")
        
        # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        if issues:
            logger.warning(f"‚ùå –ö–æ–Ω—Ç–µ–Ω—Ç –Ω–µ –ø—Ä–æ—à–µ–ª –≤–∞–ª–∏–¥–∞—Ü–∏—é:")
            for issue in issues:
                logger.warning(f"   - {issue}")
            logger.warning(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: –∑–∞–≥–æ–ª–æ–≤–æ–∫={len(title)} —Å–∏–º–≤–æ–ª–æ–≤, —Ç–µ–∫—Å—Ç={len(summary)} —Å–∏–º–≤–æ–ª–æ–≤")
            return False
        else:
            logger.info(f"‚úÖ –ö–æ–Ω—Ç–µ–Ω—Ç –ø—Ä–æ—à–µ–ª –≤–∞–ª–∏–¥–∞—Ü–∏—é: –∑–∞–≥–æ–ª–æ–≤–æ–∫={len(title)} —Å–∏–º–≤–æ–ª–æ–≤, —Ç–µ–∫—Å—Ç={len(summary)} —Å–∏–º–≤–æ–ª–æ–≤")
            return True

    def run_continuous_mode(self):
        """–ó–∞–ø—É—Å–∫ –≤ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–º —Ä–µ–∂–∏–º–µ"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã –≤ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–º —Ä–µ–∂–∏–º–µ")
        logger.info(f"–ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {self.config['news_parser']['update_interval_minutes']} –º–∏–Ω—É—Ç")

        # –ó–∞–ø—É—Å–∫ –ø–µ—Ä–≤–æ–≥–æ —Ü–∏–∫–ª–∞
        self.process_single_news_cycle()

        # –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –∑–∞–ø—É—Å–∫–æ–≤
        interval = self.config['news_parser']['update_interval_minutes']
        schedule.every(interval).minutes.do(self.process_single_news_cycle)

        # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
        try:
            while True:
                schedule.run_pending()
                time.sleep(60)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É

        except KeyboardInterrupt:
            logger.info("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è")
            self._print_final_stats()
            self.cleanup()

    def run_single_cycle(self):
        """–ó–∞–ø—É—Å–∫ –æ–¥–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        logger.info("üîÑ –ó–∞–ø—É—Å–∫ –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏")
        self.process_single_news_cycle()
        self._print_final_stats()
        self.cleanup()

    def _print_final_stats(self):
        """–í—ã–≤–æ–¥ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        runtime = time.time() - self.stats['start_time']
        logger.info("=" * 50)
        logger.info("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –†–ê–ë–û–¢–´ –°–ò–°–¢–ï–ú–´")
        logger.info("=" * 50)
        logger.info(f"‚è±Ô∏è  –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {runtime:.1f} —Å–µ–∫")
        logger.info(f"üì∞ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –Ω–æ–≤–æ—Å—Ç–µ–π: {self.stats['processed_news']}")
        logger.info(f"üé¨ –°–æ–∑–¥–∞–Ω–æ –≤–∏–¥–µ–æ: {self.stats['successful_videos']}")
        logger.info(f"‚ùå –û—à–∏–±–æ–∫ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤–∏–¥–µ–æ: {self.stats['failed_videos']}")
        logger.info(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ –Ω–∏–∑–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö: {self.stats['skipped_low_quality']}")
        logger.info(f"üì§ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –Ω–∞ YouTube: {self.stats['uploaded_videos']}")

        if self.stats['processed_news'] > 0:
            success_rate = (self.stats['successful_videos'] / self.stats['processed_news']) * 100
            logger.info(f"üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫–∏: {success_rate:.1f}%")

    def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        logger.info("üßπ –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤...")

        # –ó–∞–∫—Ä—ã–≤–∞–µ–º VideoExporter
        if self.video_exporter:
            try:
                self.video_exporter.close()
                logger.info("‚úì VideoExporter –∑–∞–∫—Ä—ã—Ç")
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è VideoExporter: {e}")

        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –¥—Ä—É–≥–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        if hasattr(self, 'telegram_bot') and self.telegram_bot:
            try:
                if hasattr(self.telegram_bot, 'close'):
                    self.telegram_bot.close()
                logger.info("‚úì Telegram Bot –∑–∞–∫—Ä—ã—Ç")
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è Telegram Bot: {e}")

        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–±–æ—Ä–∫–∞ –º—É—Å–æ—Ä–∞
        try:
            import gc
            gc.collect()
        except:
            pass

        logger.info("‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

def create_env_file():
    """–°–æ–∑–¥–∞–Ω–∏–µ .env —Ñ–∞–π–ª–∞ —Å –ø—Ä–∏–º–µ—Ä–æ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    env_content = """# YouTube API Configuration
YOUTUBE_CLIENT_SECRET_FILE=config/client_secret.json

# Telegram Bot Configuration
TELEGRAM_API_ID=your_api_id
TELEGRAM_API_HASH=your_api_hash
TELEGRAM_BOT_TOKEN=your_bot_token
TELEGRAM_CHANNEL=@your_channel

# LLM API Keys
GEMINI_API_KEY=your_gemini_api_key
OPENAI_API_KEY=your_openai_api_key
ANTHROPIC_API_KEY=your_anthropic_api_key

# Optional: Twitter/X API (if using)
TWITTER_API_KEY=your_twitter_api_key
TWITTER_API_SECRET=your_twitter_api_secret
TWITTER_ACCESS_TOKEN=your_access_token
TWITTER_ACCESS_TOKEN_SECRET=your_access_token_secret
"""

    env_path = "config/.env"
    if not os.path.exists(env_path):
        with open(env_path, 'w', encoding='utf-8') as f:
            f.write(env_content)
        logger.info(f"–°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª —Å –ø—Ä–∏–º–µ—Ä–æ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è: {env_path}")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    parser = argparse.ArgumentParser(description='Shorts News System Orchestrator')
    parser.add_argument('--config', default='../config/config.yaml',
                       help='–ü—É—Ç—å –∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É')
    parser.add_argument('--mode', choices=['continuous', 'single'],
                       default='single', help='–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã')
    parser.add_argument('--create-env', action='store_true',
                       help='–°–æ–∑–¥–∞—Ç—å –ø—Ä–∏–º–µ—Ä .env —Ñ–∞–π–ª–∞')

    args = parser.parse_args()

    if args.create_env:
        create_env_file()
        return

    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—É—Ç–∏ –∫ –∫–æ–Ω—Ñ–∏–≥—É
    if not os.path.isabs(args.config):
        config_path = os.path.join(os.path.dirname(__file__), args.config)
    else:
        config_path = args.config

    if not os.path.exists(config_path):
        logger.error(f"–§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: {config_path}")
        sys.exit(1)

    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        orchestrator = ShortsNewsOrchestrator(config_path)

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        orchestrator.initialize_components()

        # –ó–∞–ø—É—Å–∫ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ
        if args.mode == 'continuous':
            orchestrator.run_continuous_mode()
        else:
            # –í–†–ï–ú–ï–ù–ù–û –û–¢–ö–õ–Æ–ß–ï–ù–û –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è —Å channel_monitor.py
            # orchestrator.run_single_cycle()
            logger.info("üì¢ –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —á–µ—Ä–µ–∑ channel_monitor.py")
            logger.info("üì¢ –ü—Ä—è–º–æ–π –∑–∞–ø—É—Å–∫ main_orchestrator.py –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω")

    except KeyboardInterrupt:
        logger.info("üõë –ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()
