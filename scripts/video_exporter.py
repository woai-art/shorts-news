#!/usr/bin/env python3
"""
–ú–æ–¥—É–ª—å —ç–∫—Å–ø–æ—Ä—Ç–∞ –∞–Ω–∏–º–∞—Ü–∏–π –≤ –≤–∏–¥–µ–æ –¥–ª—è shorts_news
–û—Å–Ω–æ–≤–Ω–æ–π —ç–∫—Å–ø–æ—Ä—Ç–µ—Ä –∏—Å–ø–æ–ª—å–∑—É–µ—Ç MoviePy –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–¥–µ–æ.
–†–µ–∑–µ—Ä–≤–Ω—ã–π (—Å—Ç–∞—Ä—ã–π) —ç–∫—Å–ø–æ—Ä—Ç–µ—Ä –∏—Å–ø–æ–ª—å–∑—É–µ—Ç Selenium.
"""

import os
import json
import logging
import time
from pathlib import Path
from typing import Dict, Optional, List, Tuple, Any
import yaml
from datetime import datetime

from PIL import Image, ImageDraw, ImageFont, ImageFilter
import numpy as np
from moviepy import (
    ColorClip, CompositeVideoClip, ImageClip, VideoFileClip, AudioFileClip,
    concatenate_audioclips
)
import cv2  # OpenCV –≤—Å–µ –µ—â–µ –Ω—É–∂–µ–Ω –¥–ª—è Selenium-–≤–µ—Ä—Å–∏–∏

from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
import io
import subprocess

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# –ò–º–ø–æ—Ä—Ç –Ω–∞—à–µ–≥–æ –º–æ–¥—É–ª—è –¥–ª—è –ª–æ–≥–æ—Ç–∏–ø–æ–≤
try:
    from logo_manager import LogoManager
except ImportError:
    LogoManager = None
    logger.warning("LogoManager –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω")


def _wrap_text(draw: ImageDraw.ImageDraw, text: str, font: ImageFont.ImageFont, max_width: int) -> list[str]:
    """Helper function to wrap text into lines."""
    words = text.strip().split()
    if not words:
        return []
    lines: list[str] = []
    current: list[str] = []
    for word in words:
        trial = (" ".join(current + [word])).strip()
        w = draw.textbbox((0, 0), trial, font=font)[2]
        if w <= max_width or not current:
            current.append(word)
        else:
            lines.append(" ".join(current))
            current = [word]
    if current:
        lines.append(" ".join(current))
    return lines


class VideoExporter:
    """
    –ö–ª–∞—Å—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–¥–µ–æ-—à–æ—Ä—Ç—Å–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º MoviePy.
    –≠—Ç–∞ –≤–µ—Ä—Å–∏—è –æ—Å–Ω–æ–≤–∞–Ω–∞ –Ω–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–º —Ä–∞–±–æ—á–µ–º –ø—Ä–∏–º–µ—Ä–µ –∏ –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω–∞,
    —á–µ–º —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥ —á–µ—Ä–µ–∑ HTML/Selenium.
    """
    def __init__(self, video_config: Dict, paths_config: Dict):
        self.video_config = video_config
        self.paths_config = paths_config

        # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤–∏–¥–µ–æ
        self.width = int(video_config.get('width', 1080))
        self.height = int(video_config.get('height', 1920))
        self.duration = int(video_config.get('duration_seconds', 8))
        self.fps = int(video_config.get('fps', 30))
        
        # –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª–∏–ø–æ–≤ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è
        self._active_clips = []

        # –†–∞–∑–º–µ—Ç–∫–∞
        self.header_ratio = float(video_config.get('header_ratio', 0.35))
        self.title_ratio = float(video_config.get('title_ratio', 0.15))
        self.middle_ratio = float(video_config.get('middle_ratio', 0.40))
        
        # –°—Ç–∏–ª–∏
        self.title_bg_rgb = tuple(video_config.get('title_bg_rgb', [60, 60, 60]))
        self.middle_bg_rgb = tuple(video_config.get('middle_bg_rgb', [40, 40, 40]))
        self.footer_bg_rgb = tuple(video_config.get('footer_bg_rgb', [0, 0, 0]))
        
        # –†–∞–∑–Ω—ã–µ —à—Ä–∏—Ñ—Ç—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        self.title_font_path = video_config.get('title_font_path', 'resources/fonts/Arsenal-Bold.ttf')
        self.middle_font_path = video_config.get('middle_font_path', 'resources/fonts/Arsenal-Bold.ttf')
        self.footer_font_path = video_config.get('footer_font_path', 'resources/fonts/Arsenal-Bold.ttf')
        
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –Ω–æ–≤–æ—Å—Ç–µ–π
        self.news_sources = video_config.get('news_sources', {})
        self.logos_dir = self.paths_config.get('logos_dir', 'resources/logos')
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ª–æ–≥–æ—Ç–∏–ø–æ–≤
        self.logo_manager = None
        if LogoManager:
            try:
                # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ config –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —Ä—è–¥–æ–º —Å–æ —Å–∫—Ä–∏–ø—Ç–∞–º–∏
                config_path = Path(__file__).parent.parent / 'config' / 'config.yaml'
                self.logo_manager = LogoManager(str(config_path))
                logger.info("üé® LogoManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å LogoManager: {e}")

        # –≠—Ñ—Ñ–µ–∫—Ç—ã
        self.header_zoom_start = float(video_config.get('header_zoom_start', 1.05))
        self.header_zoom_end = float(video_config.get('header_zoom_end', 1.00))

    def _load_font(self, font_path: str, size: int) -> ImageFont.FreeTypeFont | ImageFont.ImageFont:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —à—Ä–∏—Ñ—Ç –∏–ª–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π."""
        font_file = Path(font_path)
        if font_file.exists():
            try:
                return ImageFont.truetype(str(font_file), size=size)
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —à—Ä–∏—Ñ—Ç–∞ '{font_file}': {e}")
        else:
            logger.warning(f"‚ö†Ô∏è –®—Ä–∏—Ñ—Ç '{font_file}' –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        
        logger.warning("–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —à—Ä–∏—Ñ—Ç.")
        return ImageFont.load_default(size)

    def _make_header_clip(self, media_path: Optional[str], header_size: Tuple[int, int]):
        """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∏–ø –¥–ª—è —à–∞–ø–∫–∏ –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–ª–∏ –≤–∏–¥–µ–æ."""
        target_w, target_h = header_size  # –¶–µ–ª–µ–≤–æ–π —Ä–∞–∑–º–µ—Ä –¥–ª—è –º–µ–¥–∏–∞ (16:9)
        full_w, full_h = self.width, self.height  # –†–∞–∑–º–µ—Ä –≤—Å–µ–≥–æ –≤–∏–¥–µ–æ (9:16)
        logger.info(f"üé¨ –°–æ–∑–¥–∞–Ω–∏–µ —à–∞–ø–∫–∏: –º–µ–¥–∏–∞='{media_path}', —Ü–µ–ª–µ–≤–æ–π —Ä–∞–∑–º–µ—Ä={target_w}x{target_h}, –ø–æ–ª–Ω—ã–π —Ä–∞–∑–º–µ—Ä={full_w}x{full_h}")
        
        if media_path and Path(media_path).exists():
            suffix = Path(media_path).suffix.lower()
            try:
                if suffix in {'.mp4', '.mov', '.mkv', '.avi', '.webm'}:
                    # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Å—Ç–∞—Ä—Ç–∞ —Å –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ (—Å–µ–∫—É–Ω–¥—ã) –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–æ —á–µ—Ä–µ–∑ news_data
                    start_offset = float(getattr(self, 'header_video_start_seconds', 0) or 0)
                    base_clip = VideoFileClip(media_path).without_audio()
                    if start_offset > 0 and start_offset < max(0.1, getattr(base_clip, 'duration', 0)):
                        video_clip = base_clip.subclipped(start_offset)
                    else:
                        video_clip = base_clip
                    if video_clip.duration > self.duration:
                        video_clip = video_clip.with_duration(self.duration)
                    
                    # –£–±–∏—Ä–∞–µ–º —á—ë—Ä–Ω—ã–µ –∫—Ä–∞—è –ø–µ—Ä–µ–¥ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ–º
                    video_clip = self._crop_video_black_borders(video_clip)
                    # –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –≤–∏–¥–µ–æ, —á—Ç–æ–±—ã –∑–∞–ø–æ–ª–Ω–∏—Ç—å –≤—Å—é –æ–±–ª–∞—Å—Ç—å —à–∞–ø–∫–∏
                    scale_factor = max(target_w / video_clip.w, target_h / video_clip.h)
                    scaled_w, scaled_h = int(video_clip.w * scale_factor), int(video_clip.h * scale_factor)
                    video_clip = video_clip.resized((scaled_w, scaled_h))
                    
                    # –û–±—Ä–µ–∑–∞–µ–º –≤–∏–¥–µ–æ –¥–æ —Ä–∞–∑–º–µ—Ä–∞ –æ–±–ª–∞—Å—Ç–∏ —à–∞–ø–∫–∏, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                    if scaled_w > target_w or scaled_h > target_h:
                        x_crop = max(0, (scaled_w - target_w) // 2)
                        y_crop = max(0, (scaled_h - target_h) // 2)
                        video_clip = video_clip.cropped(x1=x_crop, y1=y_crop, x2=x_crop+target_w, y2=y_crop+target_h)
                    
                    # –°–æ–∑–¥–∞—ë–º —á—ë—Ä–Ω—ã–π —Ñ–æ–Ω —Ä–∞–∑–º–µ—Ä–æ–º –≤—Å–µ–≥–æ –≤–∏–¥–µ–æ
                    background = ColorClip(size=(full_w, full_h), color=(0, 0, 0)).with_duration(self.duration)
                    
                    # –†–∞–∑–º–µ—â–∞–µ–º –≤–∏–¥–µ–æ —à–∞–ø–∫–∏ –≤ –≤–µ—Ä—Ö–Ω–µ–π —á–∞—Å—Ç–∏ (–∑–∞–ø–æ–ª–Ω—è–µ–º –≤—Å—é —à–∏—Ä–∏–Ω—É)
                    x_offset = 0  # –ó–∞–ø–æ–ª–Ω—è–µ–º –≤—Å—é —à–∏—Ä–∏–Ω—É
                    y_offset = 0  # –†–∞–∑–º–µ—â–∞–µ–º –≤ —Å–∞–º–æ–º –≤–µ—Ä—Ö—É
                    video_clip = video_clip.with_position((x_offset, y_offset)).with_duration(self.duration)
                    video_clip = CompositeVideoClip([background, video_clip], size=(full_w, full_h))
                    
                    final_clip = video_clip.with_duration(self.duration)
                    logger.info("‚úÖ –í–∏–¥–µ–æ –¥–ª—è —à–∞–ø–∫–∏ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ")
                    return self._add_header_effects(final_clip)
                elif suffix == '.gif':
                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ GIF —Ñ–∞–π–ª–æ–≤
                    try:
                        # –ü—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞–∫ –≤–∏–¥–µ–æ
                        gif_clip = VideoFileClip(media_path).without_audio()
                        if gif_clip.duration > self.duration:
                            # –ó–∞—Ü–∏–∫–ª–∏–≤–∞–µ–º GIF –Ω–∞ –≤—Ä–µ–º—è –≤–∏–¥–µ–æ
                            gif_clip = gif_clip.loop(duration=self.duration)
                        else:
                            gif_clip = gif_clip.with_duration(self.duration)
                        
                        # –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º GIF, —á—Ç–æ–±—ã –∑–∞–ø–æ–ª–Ω–∏—Ç—å –≤—Å—é –æ–±–ª–∞—Å—Ç—å —à–∞–ø–∫–∏
                        scale_factor = max(target_w / gif_clip.w, target_h / gif_clip.h)
                        scaled_w, scaled_h = int(gif_clip.w * scale_factor), int(gif_clip.h * scale_factor)
                        gif_clip = gif_clip.resized((scaled_w, scaled_h))
                        
                        # –û–±—Ä–µ–∑–∞–µ–º GIF –¥–æ —Ä–∞–∑–º–µ—Ä–∞ –æ–±–ª–∞—Å—Ç–∏ —à–∞–ø–∫–∏, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                        if scaled_w > target_w or scaled_h > target_h:
                            x_crop = max(0, (scaled_w - target_w) // 2)
                            y_crop = max(0, (scaled_h - target_h) // 2)
                            gif_clip = gif_clip.cropped(x1=x_crop, y1=y_crop, x2=x_crop+target_w, y2=y_crop+target_h)
                        
                        # –°–æ–∑–¥–∞—ë–º —á—ë—Ä–Ω—ã–π —Ñ–æ–Ω —Ä–∞–∑–º–µ—Ä–æ–º –≤—Å–µ–≥–æ –≤–∏–¥–µ–æ
                        background = ColorClip(size=(full_w, full_h), color=(0, 0, 0)).with_duration(self.duration)
                        
                        # –†–∞–∑–º–µ—â–∞–µ–º GIF –≤ –≤–µ—Ä—Ö–Ω–µ–π —á–∞—Å—Ç–∏
                        x_offset = 0
                        y_offset = 0
                        gif_clip = gif_clip.with_position((x_offset, y_offset))
                        gif_clip = CompositeVideoClip([background, gif_clip], size=(full_w, full_h))
                        
                        final_clip = gif_clip.with_duration(self.duration)
                        logger.info("‚úÖ GIF –¥–ª—è —à–∞–ø–∫–∏ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω")
                        return self._add_header_effects(final_clip)
                    except Exception as gif_error:
                        logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å GIF –∫–∞–∫ –≤–∏–¥–µ–æ: {gif_error}")
                        logger.info("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º GIF –∫–∞–∫ —Å—Ç–∞—Ç–∏—á–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
                        # Fallback: –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –æ–±—ã—á–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                        try:
                            pil_img = Image.open(media_path).convert('RGB')
                            # –£–±–∏—Ä–∞–µ–º —á—ë—Ä–Ω—ã–µ –∫—Ä–∞—è –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
                            pil_img = self._crop_black_borders(pil_img)
                            
                            # –£–º–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                            pil_img = self._smart_image_processing(pil_img, target_w, target_h)
                            
                            # –°–æ–∑–¥–∞—ë–º —á—ë—Ä–Ω—ã–π —Ñ–æ–Ω —Ä–∞–∑–º–µ—Ä–æ–º –≤—Å–µ–≥–æ –≤–∏–¥–µ–æ
                            background = Image.new('RGB', (full_w, full_h), color=(0, 0, 0))
                            # –†–∞–∑–º–µ—â–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —à–∞–ø–∫–∏ –≤ –≤–µ—Ä—Ö–Ω–µ–π —á–∞—Å—Ç–∏
                            x_offset = 0
                            y_offset = 0
                            background.paste(pil_img, (x_offset, y_offset))
                            
                            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ ImageClip
                            img_clip = ImageClip(np.array(background)).with_duration(self.duration)
                            logger.info("‚úÖ GIF –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∫–∞–∫ —Å—Ç–∞—Ç–∏—á–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
                            return self._add_header_effects(img_clip)
                        except Exception as fallback_error:
                            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ GIF –∫–∞–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {fallback_error}")
                            # –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback —Ñ–æ–Ω
                else:
                    pil_img = Image.open(media_path).convert('RGB')
                    # –£–±–∏—Ä–∞–µ–º —á—ë—Ä–Ω—ã–µ –∫—Ä–∞—è –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
                    pil_img = self._crop_black_borders(pil_img)
                    
                    # –£–º–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                    pil_img = self._smart_image_processing(pil_img, target_w, target_h)
                    
                    # –°–æ–∑–¥–∞—ë–º —á—ë—Ä–Ω—ã–π —Ñ–æ–Ω —Ä–∞–∑–º–µ—Ä–æ–º –≤—Å–µ–≥–æ –≤–∏–¥–µ–æ
                    background = Image.new('RGB', (full_w, full_h), color=(0, 0, 0))
                    # –†–∞–∑–º–µ—â–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —à–∞–ø–∫–∏ –≤ –≤–µ—Ä—Ö–Ω–µ–π —á–∞—Å—Ç–∏ (–±–µ–∑ —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏)
                    x_offset = 0  # –ó–∞–ø–æ–ª–Ω—è–µ–º –≤—Å—é —à–∏—Ä–∏–Ω—É
                    y_offset = 0  # –†–∞–∑–º–µ—â–∞–µ–º –≤ —Å–∞–º–æ–º –≤–µ—Ä—Ö—É
                    background.paste(pil_img, (x_offset, y_offset))
                    
                    clip = ImageClip(np.array(background))
                    logger.info("‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —à–∞–ø–∫–∏ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ")
                    return self._add_header_effects(clip.with_duration(self.duration))
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–µ–¥–∏–∞ '{media_path}': {e}", exc_info=True)

        logger.warning("‚ö†Ô∏è –ú–µ–¥–∏–∞ –¥–ª—è —à–∞–ø–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –æ—à–∏–±–∫–∞. –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback —Ñ–æ–Ω.")
        bg_path = Path('resources') / 'default_backgrounds' / 'news_default.jpg'
        if bg_path.exists():
            try:
                clip = ImageClip(str(bg_path)).resized(height=target_h)
                # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –∏ –æ–±—Ä–µ–∑–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                x_center = clip.w / 2
                y_center = clip.h / 2
                x1 = max(0, int(x_center - target_w / 2))
                y1 = max(0, int(y_center - target_h / 2))
                x2 = min(clip.w, x1 + target_w)
                y2 = min(clip.h, y1 + target_h)
                clip = clip.cropped(x1=x1, y1=y1, x2=x2, y2=y2)
                return self._add_header_effects(clip.with_duration(self.duration))
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ fallback —Ñ–æ–Ω–∞ {bg_path}: {e}")

        return self._add_header_effects(ColorClip(size=(target_w, target_h), color=(25, 25, 50)).with_duration(self.duration))

    def _add_header_effects(self, clip):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç –ø–ª–∞–≤–Ω–æ–≥–æ –∑—É–º–∞: 3 —Å–µ–∫ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ + 3 —Å–µ–∫ —É–º–µ–Ω—å—à–µ–Ω–∏–µ."""
        def zoom_resize(t: float) -> float:
            half_duration = self.duration / 2
            
            # –ü–µ—Ä–≤–∞—è –ø–æ–ª–æ–≤–∏–Ω–∞ (0-3 —Å–µ–∫): –ø–ª–∞–≤–Ω–æ–µ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –æ—Ç 1.0 –¥–æ header_zoom_start (1.05)
            if t <= half_duration:
                progress = t / half_duration  # 0 -> 1 –∑–∞ –ø–µ—Ä–≤—É—é –ø–æ–ª–æ–≤–∏–Ω—É
                return 1.0 + (self.header_zoom_start - 1.0) * progress
            
            # –í—Ç–æ—Ä–∞—è –ø–æ–ª–æ–≤–∏–Ω–∞ (3-6 —Å–µ–∫): –ø–ª–∞–≤–Ω–æ–µ —É–º–µ–Ω—å—à–µ–Ω–∏–µ –æ—Ç header_zoom_start (1.05) –æ–±—Ä–∞—Ç–Ω–æ –∫ 1.0
            else:
                progress = (t - half_duration) / half_duration  # 0 -> 1 –∑–∞ –≤—Ç–æ—Ä—É—é –ø–æ–ª–æ–≤–∏–Ω—É
                return self.header_zoom_start - (self.header_zoom_start - 1.0) * progress
                
        return clip.resized(zoom_resize)

    def _smart_image_processing(self, image: Image.Image, target_w: int, target_h: int) -> Image.Image:
        """–£–º–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ª—É—á—à–∏–π —Å–ø–æ—Å–æ–± –ø–æ–¥–≥–æ–Ω–∫–∏ –ø–æ–¥ —Ñ–æ—Ä–º–∞—Ç."""
        orig_w, orig_h = image.size
        target_ratio = target_w / target_h  # 16:9 ‚âà 1.78
        orig_ratio = orig_w / orig_h
        
        logger.info(f"üß† –£–º–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞: –æ—Ä–∏–≥–∏–Ω–∞–ª {orig_w}x{orig_h} (—Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ {orig_ratio:.2f}) -> —Ü–µ–ª—å {target_w}x{target_h} (—Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ {target_ratio:.2f})")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –æ–±—Ä–∞–±–æ—Ç–∫–∏
        ratio_diff = abs(orig_ratio - target_ratio)
        
        if ratio_diff < 0.3:  # –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è –±–ª–∏–∑–∫–∏ - –ø—Ä–æ—Å—Ç–æ –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º
            logger.info("üìè –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è –±–ª–∏–∑–∫–∏, –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –±–µ–∑ –æ–±—Ä–µ–∑–∫–∏")
            return image.resize((target_w, target_h), Image.Resampling.LANCZOS)
        
        elif orig_ratio > target_ratio * 1.5:  # –û—á–µ–Ω—å —à–∏—Ä–æ–∫–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞–∑–º—ã—Ç—ã–π —Ñ–æ–Ω
            logger.info("üñºÔ∏è –®–∏—Ä–æ–∫–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, —Å–æ–∑–¥–∞–µ–º —Ä–∞–∑–º—ã—Ç—ã–π —Ñ–æ–Ω")
            return self._create_blurred_background_composition(image, target_w, target_h)
        
        elif orig_ratio < target_ratio / 1.5:  # –û—á–µ–Ω—å –≤—ã—Å–æ–∫–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ - —Ç–æ–∂–µ —Ä–∞–∑–º—ã—Ç—ã–π —Ñ–æ–Ω
            logger.info("üì± –í—ã—Å–æ–∫–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, —Å–æ–∑–¥–∞–µ–º —Ä–∞–∑–º—ã—Ç—ã–π —Ñ–æ–Ω")
            return self._create_blurred_background_composition(image, target_w, target_h)
        
        else:  # –°—Ä–µ–¥–Ω–∏–µ —Ä–∞–∑–ª–∏—á–∏—è - —É–º–Ω–∞—è –æ–±—Ä–µ–∑–∫–∞
            logger.info("‚úÇÔ∏è –£–º–Ω–∞—è –æ–±—Ä–µ–∑–∫–∞ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≤–∞–∂–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞")
            return self._smart_crop(image, target_w, target_h)
    
    def _create_blurred_background_composition(self, image: Image.Image, target_w: int, target_h: int) -> Image.Image:
        """–°–æ–∑–¥–∞–µ—Ç –∫–æ–º–ø–æ–∑–∏—Ü–∏—é —Å —Ä–∞–∑–º—ã—Ç—ã–º —Ñ–æ–Ω–æ–º –∏ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º."""
        # –°–æ–∑–¥–∞–µ–º —Ä–∞–∑–º—ã—Ç—ã–π —Ñ–æ–Ω –∏–∑ —Ç–æ–≥–æ –∂–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        background = image.resize((target_w, target_h), Image.Resampling.LANCZOS)
        background = background.filter(ImageFilter.GaussianBlur(radius=20))
        
        # –ó–∞—Ç–µ–º–Ω—è–µ–º —Ñ–æ–Ω
        background = Image.blend(background, Image.new('RGB', (target_w, target_h), (0, 0, 0)), 0.4)
        
        # –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, —á—Ç–æ–±—ã –æ–Ω–æ –ø–æ–º–µ—Å—Ç–∏–ª–æ—Å—å —Ü–µ–ª–∏–∫–æ–º
        scale_factor = min(target_w / image.width, target_h / image.height) * 0.85  # 85% –æ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
        new_w, new_h = int(image.width * scale_factor), int(image.height * scale_factor)
        scaled_image = image.resize((new_w, new_h), Image.Resampling.LANCZOS)
        
        # –†–∞–∑–º–µ—â–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Ü–µ–Ω—Ç—Ä–µ
        x_offset = (target_w - new_w) // 2
        y_offset = (target_h - new_h) // 2
        background.paste(scaled_image, (x_offset, y_offset))
        
        return background
    
    def _smart_crop(self, image: Image.Image, target_w: int, target_h: int) -> Image.Image:
        """–£–º–Ω–∞—è –æ–±—Ä–µ–∑–∫–∞: –ø—ã—Ç–∞–µ—Ç—Å—è —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤–∞–∂–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –≤ —Ü–µ–Ω—Ç—Ä–µ."""
        orig_w, orig_h = image.size
        
        # –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, —á—Ç–æ–±—ã –∑–∞–ø–æ–ª–Ω–∏—Ç—å —Ü–µ–ª–µ–≤—É—é –æ–±–ª–∞—Å—Ç—å
        scale_factor = max(target_w / orig_w, target_h / orig_h)
        new_w, new_h = int(orig_w * scale_factor), int(orig_h * scale_factor)
        scaled_image = image.resize((new_w, new_h), Image.Resampling.LANCZOS)
        
        # –£–º–Ω–∞—è –æ–±—Ä–µ–∑–∫–∞ - –ø—ã—Ç–∞–µ–º—Å—è —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—É—é –æ–±–ª–∞—Å—Ç—å
        if new_w > target_w:
            # –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è –æ–±—Ä–µ–∑–∫–∞ - –±–µ—Ä–µ–º —Ü–µ–Ω—Ç—Ä, –Ω–æ —Å –Ω–µ–±–æ–ª—å—à–∏–º —Å–º–µ—â–µ–Ω–∏–µ–º –≤–≤–µ—Ä—Ö –¥–ª—è –ª–∏—Ü
            left = (new_w - target_w) // 2
        else:
            left = 0
            
        if new_h > target_h:
            # –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è –æ–±—Ä–µ–∑–∫–∞ - —Å–º–µ—â–∞–µ–º –Ω–µ–º–Ω–æ–≥–æ –≤–≤–µ—Ä—Ö (–≤–∞–∂–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–±—ã—á–Ω–æ –≤ –≤–µ—Ä—Ö–Ω–µ–π —á–∞—Å—Ç–∏)
            top = int((new_h - target_h) * 0.3)  # 30% –æ—Ç –∏–∑–±—ã—Ç–∫–∞ —Å–≤–µ—Ä—Ö—É, 70% —Å–Ω–∏–∑—É
        else:
            top = 0
        
        return scaled_image.crop((left, top, left + target_w, top + target_h))

    def _crop_black_borders(self, img: Image.Image, threshold: int = 10) -> Image.Image:
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±—Ä–µ–∑–∞–µ—Ç —á—ë—Ä–Ω—ã–µ –∫—Ä–∞—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è."""
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ numpy –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        img_array = np.array(img)
        
        # –ù–∞—Ö–æ–¥–∏–º –≥—Ä–∞–Ω–∏—Ü—ã –Ω–µ–ø—É—Å—Ç–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (–Ω–µ —á—ë—Ä–Ω–æ–≥–æ)
        # –ò—â–µ–º –ø–∏–∫—Å–µ–ª–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —è–≤–ª—è—é—Ç—Å—è –ø–æ—á—Ç–∏ —á—ë—Ä–Ω—ã–º–∏
        mask = np.any(img_array > threshold, axis=2)
        
        # –ù–∞—Ö–æ–¥–∏–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–µ–ø—É—Å—Ç—ã—Ö –ø–∏–∫—Å–µ–ª–µ–π
        coords = np.argwhere(mask)
        
        if coords.size == 0:
            # –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é —á—ë—Ä–Ω–æ–µ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
            return img
            
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã –æ–±—Ä–µ–∑–∫–∏
        y_min, x_min = coords.min(axis=0)
        y_max, x_max = coords.max(axis=0)
        
        # –û–±—Ä–µ–∑–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        cropped = img.crop((x_min, y_min, x_max + 1, y_max + 1))
        
        logger.info(f"üî™ –û–±—Ä–µ–∑–∫–∞ —á—ë—Ä–Ω—ã—Ö –∫—Ä–∞—ë–≤: {img.width}x{img.height} -> {cropped.width}x{cropped.height}")
        return cropped

    def _crop_video_black_borders(self, video_clip, threshold: int = 10):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±—Ä–µ–∑–∞–µ—Ç —á—ë—Ä–Ω—ã–µ –∫—Ä–∞—è –≤–∏–¥–µ–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–µ—Ä–≤–æ–≥–æ –∫–∞–¥—Ä–∞."""
        # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–π –∫–∞–¥—Ä –∫–∞–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ PIL
        first_frame = video_clip.get_frame(0)
        pil_frame = Image.fromarray(first_frame.astype('uint8'))
        
        # –ù–∞—Ö–æ–¥–∏–º –≥—Ä–∞–Ω–∏—Ü—ã –æ–±—Ä–µ–∑–∫–∏ –Ω–∞ –ø–µ—Ä–≤–æ–º –∫–∞–¥—Ä–µ
        img_array = np.array(pil_frame)
        mask = np.any(img_array > threshold, axis=2)
        coords = np.argwhere(mask)
        
        if coords.size == 0:
            # –ï—Å–ª–∏ –∫–∞–¥—Ä –ø–æ–ª–Ω–æ—Å—Ç—å—é —á—ë—Ä–Ω—ã–π, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
            return video_clip
            
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã –æ–±—Ä–µ–∑–∫–∏
        y_min, x_min = coords.min(axis=0)
        y_max, x_max = coords.max(axis=0)
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –æ–±—Ä–µ–∑–∫—É –∫ –≤–∏–¥–µ–æ (MoviePy 2.x)
        try:
            # –í MoviePy 2.x –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –º–µ—Ç–æ–¥ cropped
            cropped_video = video_clip.cropped(x1=x_min, y1=y_min, x2=x_max + 1, y2=y_max + 1)
        except AttributeError:
            try:
                # Fallback –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –≤–µ—Ä—Å–∏–π MoviePy
                cropped_video = video_clip.crop(x1=x_min, y1=y_min, x2=x_max + 1, y2=y_max + 1)
            except AttributeError:
                # –ï—Å–ª–∏ –Ω–∏ –æ–¥–∏–Ω –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª
                logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–µ–∑–∞—Ç—å –≤–∏–¥–µ–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª")
                return video_clip
        
        logger.info(f"üî™ –û–±—Ä–µ–∑–∫–∞ —á—ë—Ä–Ω—ã—Ö –∫—Ä–∞—ë–≤ –≤–∏–¥–µ–æ: {video_clip.w}x{video_clip.h} -> {cropped_video.w}x{cropped_video.h}")
        return cropped_video

    def _render_title_image(self, title: str, size: Tuple[int, int]) -> np.ndarray:
        """–†–µ–Ω–¥–µ—Ä–∏—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–æ–≤–æ—Å—Ç–∏."""
        w, h = size
        img = Image.new('RGB', (w, h), color=self.title_bg_rgb)
        draw = ImageDraw.Draw(img)
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –∫—Ä—É–ø–Ω—ã–π —à—Ä–∏—Ñ—Ç –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ (Cinzel)
        title_font_size = int(self.height * 0.025)  # ~48px –¥–ª—è 1920px –≤—ã—Å–æ—Ç—ã
        font = self._load_font(self.title_font_path, title_font_size)
        
        # –û—Ç—Å—Ç—É–ø—ã
        padding = int(w * 0.05)  # 5% –æ—Ç —à–∏—Ä–∏–Ω—ã
        max_width = w - 2 * padding
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–∞ —Å—Ç—Ä–æ–∫–∏
        lines = _wrap_text(draw, title, font, max_width)
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â—É—é –≤—ã—Å–æ—Ç—É —Ç–µ–∫—Å—Ç–∞
        line_height = int(title_font_size * 1.2)
        total_text_height = len(lines) * line_height
        
        # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏
        y_start = (h - total_text_height) // 2
        
        # –†–µ–Ω–¥–µ—Ä–∏–º –∫–∞–∂–¥—É—é —Å—Ç—Ä–æ–∫—É
        for i, line in enumerate(lines):
            y_pos = y_start + i * line_height
            
            # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏
            bbox = draw.textbbox((0, 0), line, font=font)
            text_width = bbox[2] - bbox[0]
            x_pos = (w - text_width) // 2
            
            # –†–∏—Å—É–µ–º —Ç–µ–∫—Å—Ç –±–µ–ª—ã–º —Ü–≤–µ—Ç–æ–º
            draw.text((x_pos, y_pos), line, fill=(255, 255, 255), font=font)
        
        return np.array(img)

    def _render_text_image(self, text: str, size: Tuple[int, int]) -> np.ndarray:
        """–†–µ–Ω–¥–µ—Ä–∏—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –±–ª–æ–∫ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏."""
        w, h = size
        img = Image.new('RGB', (w, h), color=self.middle_bg_rgb)
        draw = ImageDraw.Draw(img)

        font_size = 80
        font = self._load_font(self.middle_font_path, font_size)
        max_width = int(w * 0.9)
        max_height = int(h * 0.85)
        line_spacing = 12
        padding_y = (h - max_height) // 2

        while font_size > 20:
            lines = _wrap_text(draw, text, font, max_width)
            if not lines:
                break
            
            line_heights = [draw.textbbox((0, 0), L, font=font)[3] for L in lines]
            total_height = sum(line_heights) + (len(lines) - 1) * line_spacing
            
            if total_height <= max_height:
                break
            font_size -= 2
            font = self._load_font(self.middle_font_path, font_size)
        
        y = padding_y + (max_height - total_height) // 2
        for i, line in enumerate(lines):
            bbox = draw.textbbox((0, 0), line, font=font)
            line_w = bbox[2]
            x = (w - line_w) // 2
            
            draw.text((x + 2, y + 2), line, font=font, fill=(0, 0, 0, 128)) # Shadow
            draw.text((x, y), line, font=font, fill=(255, 255, 255)) # Text
            y += line_heights[i] + line_spacing
            
        return np.array(img)

    def _render_footer_image(self, left_text: str, right_text: str, size: Tuple[int, int]) -> np.ndarray:
        """–†–µ–Ω–¥–µ—Ä–∏—Ç —Ñ—É—Ç–µ—Ä —Å –¥–∞—Ç–æ–π –∏ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–º."""
        w, h = size
        img = Image.new('RGB', (w, h), color=self.footer_bg_rgb)
        draw = ImageDraw.Draw(img)
        font = self._load_font(self.footer_font_path, 36)

        draw.text((int(w * 0.05), int(h * 0.25)), left_text, font=font, fill=(255, 255, 255))
        
        right_bbox = draw.textbbox((0, 0), right_text, font=font)
        rx = w - right_bbox[2] - int(w * 0.05)
        draw.text((rx, int(h * 0.25)), right_text, font=font, fill=(255, 255, 255))
        
        return np.array(img)

    def _render_smart_footer_image(self, left_text: str, news_data: Dict, size: Tuple[int, int]) -> np.ndarray:
        """–†–µ–Ω–¥–µ—Ä–∏—Ç —É–º–Ω—ã–π —Ñ—É—Ç–µ—Ä —Å –ª–æ–≥–æ—Ç–∏–ø–æ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –∏ –∞–≤–∞—Ç–∞—Ä–æ–º –∞–≤—Ç–æ—Ä–∞ (–¥–ª—è Twitter)."""
        w, h = size
        img = Image.new('RGB', (w, h), color=self.footer_bg_rgb)
        draw = ImageDraw.Draw(img)
        font = self._load_font(self.footer_font_path, 32)  # –ù–µ–º–Ω–æ–≥–æ —É–º–µ–Ω—å—à–∏–ª–∏ —à—Ä–∏—Ñ—Ç –¥–ª—è –ª—É—á—à–µ–≥–æ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
        
        url = news_data.get('url', '')
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏—Å—Ç–æ—á–Ω–∏–∫–µ
        source_info = self._get_source_info(url)
        source_name = source_info['name']
        logo_path = source_info['logo_path']
        
        # –û—Ç—Å—Ç—É–ø—ã
        padding = int(w * 0.05)
        
        # –†–∏—Å—É–µ–º –¥–∞—Ç—É —Å–ª–µ–≤–∞ - —Ü–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏
        date_bbox = draw.textbbox((0, 0), left_text, font=font)
        date_h = date_bbox[3] - date_bbox[1]
        date_y = (h - date_h) // 2  # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏
        draw.text((padding, date_y), left_text, font=font, fill=(255, 255, 255))
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–º Twitter/X –¥–ª—è –æ—Å–æ–±–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
        is_twitter = any(domain in url.lower() for domain in ['twitter.com', 'x.com'])
        
        if is_twitter:
            # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è Twitter: –¥–∞—Ç–∞, –∞–≤–∞—Ç–∞—Ä –∞–≤—Ç–æ—Ä–∞, –Ω–∏–∫–Ω–µ–π–º, –ª–æ–≥–æ—Ç–∏–ø X
            self._render_twitter_footer_elements(img, draw, font, news_data, w, h, padding)
        else:
            # –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –ø–æ–¥–ø–∏—Å—å –∏—Å—Ç–æ—á–Ω–∏–∫–∞ (–¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏ –±—Ä–µ–Ω–¥–∞) - —Ç–æ–ª—å–∫–æ –¥–ª—è –ù–ï-Twitter –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
            try:
                center_font = self._load_font(self.footer_font_path, 30)
                center_text = source_name.upper()

                # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —à–∏—Ä–∏–Ω—É —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–π –ø–æ–¥–ø–∏—Å–∏ (–æ—Å—Ç–∞–≤–ª—è—è –ø–æ–ª—è —Å–ª–µ–≤–∞/—Å–ø—Ä–∞–≤–∞ –ø–æ–¥ –¥–∞—Ç—É –∏ –ª–æ–≥–æ—Ç–∏–ø)
                max_center_width = int(w * 0.5)
                text_w, text_h = draw.textbbox((0, 0), center_text, font=center_font)[2:4]

                # –§—É–Ω–∫—Ü–∏—è —É—Å–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ —Å —Ç—Ä–æ–µ—Ç–æ—á–∏–µ–º, —á—Ç–æ–±—ã –≤–ª–µ–∑–∞–ª
                def _fit_text(text: str) -> str:
                    if draw.textbbox((0, 0), text, font=center_font)[2] <= max_center_width:
                        return text
                    ellipsis = '‚Ä¶'
                    for cut in range(len(text) - 1, 0, -1):
                        candidate = text[:cut].rstrip() + ellipsis
                        if draw.textbbox((0, 0), candidate, font=center_font)[2] <= max_center_width:
                            return candidate
                    return ellipsis

                center_text = _fit_text(center_text)

                # –õ—ë–≥–∫–∞—è —Ç–µ–Ω—å –¥–ª—è –∫–æ–Ω—Ç—Ä–∞—Å—Ç–∞
                cx = (w - draw.textbbox((0, 0), center_text, font=center_font)[2]) // 2
                cy = (h - draw.textbbox((0, 0), center_text, font=center_font)[3]) // 2
                shadow_offset = 2
                draw.text((cx + shadow_offset, cy + shadow_offset), center_text, font=center_font, fill=(0, 0, 0))
                draw.text((cx, cy), center_text, font=center_font, fill=(230, 230, 230))
            except Exception as _e:
                pass
            
            # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –¥—Ä—É–≥–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
            self._render_standard_footer_elements(img, draw, font, source_name, logo_path, w, h, padding)
        
        return np.array(img)
    
    def _render_twitter_footer_elements(self, img: Image.Image, draw: ImageDraw.ImageDraw, 
                                      font: ImageFont.ImageFont, news_data: Dict, 
                                      w: int, h: int, padding: int):
        """–†–µ–Ω–¥–µ—Ä–∏—Ç —ç–ª–µ–º–µ–Ω—Ç—ã —Ñ—É—Ç–µ—Ä–∞ –¥–ª—è Twitter –ø–æ—Å—Ç–æ–≤."""
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä–∞
        username = news_data.get('username', '')
        url = news_data.get('url', '')
        
        if not username and url:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º username –∏–∑ URL –µ—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
            import re
            username_match = re.search(r'(?:twitter\.com|x\.com)/([^/]+)', url)
            if username_match:
                username = username_match.group(1)
        
        # –ü–æ–∑–∏—Ü–∏–∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ (—Å–ø—Ä–∞–≤–∞ –Ω–∞–ª–µ–≤–æ)
        current_x = w - padding
        
        # 1. –õ–æ–≥–æ—Ç–∏–ø X (—Å–∞–º—ã–π –ø—Ä–∞–≤—ã–π)
        x_logo_path = Path(self.logos_dir) / 'X.png'
        if x_logo_path.exists():
            try:
                x_logo = Image.open(x_logo_path).convert('RGBA')
                max_logo_size = int(h * 0.6)
                logo_scale = min(max_logo_size / x_logo.height, max_logo_size / x_logo.width)
                new_w = int(x_logo.width * logo_scale)
                new_h = int(x_logo.height * logo_scale)
                x_logo = x_logo.resize((new_w, new_h), Image.Resampling.LANCZOS)
                
                logo_x = current_x - new_w
                logo_y = (h - new_h) // 2
                
                if x_logo.mode == 'RGBA':
                    img.paste(x_logo, (logo_x, logo_y), x_logo)
                else:
                    img.paste(x_logo, (logo_x, logo_y))
                
                current_x = logo_x - padding // 2
                logger.info("üì± –î–æ–±–∞–≤–ª–µ–Ω –ª–æ–≥–æ—Ç–∏–ø X")
                
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ª–æ–≥–æ—Ç–∏–ø X: {e}")
        
        # 2. –ù–∏–∫–Ω–µ–π–º (—Å–ø—Ä–∞–≤–∞ –æ—Ç –∞–≤–∞—Ç–∞—Ä–∞) - —Ü–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏
        if username:
            nickname_text = f"@{username}" if not username.startswith('@') else username
            nickname_bbox = draw.textbbox((0, 0), nickname_text, font=font)
            nickname_w = nickname_bbox[2] - nickname_bbox[0]
            nickname_h = nickname_bbox[3] - nickname_bbox[1]
            
            nickname_x = current_x - nickname_w
            nickname_y = (h - nickname_h) // 2  # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏
            
            draw.text((nickname_x, nickname_y), nickname_text, font=font, fill=(255, 255, 255))
            current_x = nickname_x - padding // 2
            
            logger.info(f"üë§ –î–æ–±–∞–≤–ª–µ–Ω –Ω–∏–∫–Ω–µ–π–º: {nickname_text}")
        
        # 3. –ê–≤–∞—Ç–∞—Ä –∞–≤—Ç–æ—Ä–∞ (–ª–µ–≤–µ–µ –Ω–∏–∫–Ω–µ–π–º–∞) - —É–∂–µ —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω
        if username:
            # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∏–º–µ–Ω —Ñ–∞–π–ª–æ–≤ –∞–≤–∞—Ç–∞—Ä–æ–∫
            avatar_paths = [
                Path(self.logos_dir) / f'avatar_{username}.png',  # –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç Twitter –¥–≤–∏–∂–∫–∞
                Path(self.logos_dir) / f'twitter_{username}.png',  # –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç
                Path(self.logos_dir) / f'avatar_{username.lstrip("@")}.png'  # –ë–µ–∑ @
            ]
            
            avatar_path = None
            for path in avatar_paths:
                if path.exists():
                    avatar_path = path
                    break
            
            if avatar_path and avatar_path.exists():
                logger.info(f"üñºÔ∏è –ù–∞–π–¥–µ–Ω –∞–≤–∞—Ç–∞—Ä: {avatar_path}")
                try:
                    avatar = Image.open(avatar_path).convert('RGBA')
                    avatar_size = int(h * 0.7)  # –ê–≤–∞—Ç–∞—Ä –∑–∞–Ω–∏–º–∞–µ—Ç 70% –≤—ã—Å–æ—Ç—ã —Ñ—É—Ç–µ—Ä–∞
                    avatar = avatar.resize((avatar_size, avatar_size), Image.Resampling.LANCZOS)
                    
                    # –î–µ–ª–∞–µ–º –∞–≤–∞—Ç–∞—Ä –∫—Ä—É–≥–ª—ã–º
                    mask = Image.new('L', (avatar_size, avatar_size), 0)
                    mask_draw = ImageDraw.Draw(mask)
                    mask_draw.ellipse((0, 0, avatar_size, avatar_size), fill=255)
                    
                    avatar_x = current_x - avatar_size
                    avatar_y = (h - avatar_size) // 2  # –£–∂–µ —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω
                    
                    # –°–æ–∑–¥–∞–µ–º –∫—Ä—É–≥–ª—ã–π –∞–≤–∞—Ç–∞—Ä
                    output = Image.new('RGBA', (avatar_size, avatar_size), (0, 0, 0, 0))
                    output.paste(avatar, (0, 0))
                    output.putalpha(mask)
                    
                    img.paste(output, (avatar_x, avatar_y), output)
                    current_x = avatar_x - padding // 2
                    
                    logger.info(f"üñºÔ∏è –î–æ–±–∞–≤–ª–µ–Ω –∞–≤–∞—Ç–∞—Ä: {avatar_path.name}")
                    
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∞–≤–∞—Ç–∞—Ä {avatar_path}: {e}")
            else:
                logger.warning(f"‚ö†Ô∏è –ê–≤–∞—Ç–∞—Ä –¥–ª—è @{username} –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –ø—É—Ç–∏: {avatar_paths}")
    
    def _render_standard_footer_elements(self, img: Image.Image, draw: ImageDraw.ImageDraw,
                                       font: ImageFont.ImageFont, source_name: str, logo_path: str,
                                       w: int, h: int, padding: int):
        """–†–µ–Ω–¥–µ—Ä–∏—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Ñ—É—Ç–µ—Ä–∞ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤."""
        print(f"üîç DEBUG: _render_standard_footer_elements - source_name: '{source_name}', logo_path: '{logo_path}'")
        # –ï—Å–ª–∏ –µ—Å—Ç—å –ª–æ–≥–æ—Ç–∏–ø, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ —Å–ø—Ä–∞–≤–∞
        if logo_path and Path(logo_path).exists():
            try:
                # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏ –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –ª–æ–≥–æ—Ç–∏–ø
                logo_img = Image.open(logo_path).convert('RGBA')
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–∑–º–µ—Ä –ª–æ–≥–æ—Ç–∏–ø–∞ (–º–∞–∫—Å–∏–º—É–º 60% –≤—ã—Å–æ—Ç—ã —Ñ—É—Ç–µ—Ä–∞)
                max_logo_height = int(h * 0.6)
                logo_scale = min(max_logo_height / logo_img.height, max_logo_height / logo_img.width)
                
                new_logo_w = int(logo_img.width * logo_scale)
                new_logo_h = int(logo_img.height * logo_scale)
                
                logo_img = logo_img.resize((new_logo_w, new_logo_h), Image.Resampling.LANCZOS)
                
                # –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ–º –ª–æ–≥–æ—Ç–∏–ø —Å–ø—Ä–∞–≤–∞
                logo_x = w - new_logo_w - padding
                logo_y = (h - new_logo_h) // 2

                # –ü–æ–¥–ª–æ–∂–∫–∞ —Å –º—è–≥–∫–∏–º–∏ —É–≥–ª–∞–º–∏ –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è –∫–æ–Ω—Ç—Ä–∞—Å—Ç–∞ –ª–æ–≥–æ—Ç–∏–ø–∞
                try:
                    bg_pad = max(4, int(min(new_logo_w, new_logo_h) * 0.15))
                    overlay = Image.new('RGBA', (w, h), (0, 0, 0, 0))
                    from PIL import ImageDraw as _ImageDraw
                    odraw = _ImageDraw.Draw(overlay)
                    rect = (logo_x - bg_pad, logo_y - bg_pad, logo_x + new_logo_w + bg_pad, logo_y + new_logo_h + bg_pad)
                    odraw.rounded_rectangle(rect, radius=int(bg_pad*0.8), fill=(255, 255, 255, 42))  # —Å–≤–µ—Ç–ª–∞—è –ø–æ–ª—É–ø—Ä–æ–∑—Ä–∞—á–Ω–∞—è
                    # –ù–µ–±–æ–ª—å—à–∞—è —Ç–µ–Ω—å
                    odraw.rounded_rectangle((rect[0]+2, rect[1]+2, rect[2]+2, rect[3]+2), radius=int(bg_pad*0.8), outline=None, fill=(0,0,0,10))
                    img_alpha = img.convert('RGBA')
                    img_alpha.alpha_composite(overlay)
                    img.paste(img_alpha.convert('RGB'))
                except Exception as _e:
                    pass
                
                # –°–æ–∑–¥–∞—ë–º –º–∞—Å–∫—É –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –Ω–∞–ª–æ–∂–µ–Ω–∏—è PNG —Å –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å—é
                if logo_img.mode == 'RGBA':
                    img.paste(logo_img, (logo_x, logo_y), logo_img)
                else:
                    img.paste(logo_img, (logo_x, logo_y))
                    
                logger.info(f"üì∞ –î–æ–±–∞–≤–ª–µ–Ω –ª–æ–≥–æ—Ç–∏–ø {source_name}: {Path(logo_path).name}")
                
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ª–æ–≥–æ—Ç–∏–ø {logo_path}: {e}")
                # –ï—Å–ª–∏ –ª–æ–≥–æ—Ç–∏–ø –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª—Å—è, —Ä–∏—Å—É–µ–º —Ç–µ–∫—Å—Ç - —Ü–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏
                right_bbox = draw.textbbox((0, 0), source_name, font=font)
                text_h = right_bbox[3] - right_bbox[1]
                rx = w - right_bbox[2] - padding
                ry = (h - text_h) // 2  # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏
                draw.text((rx, ry), source_name, font=font, fill=(255, 255, 255))
        else:
            # –ï—Å–ª–∏ –ª–æ–≥–æ—Ç–∏–ø–∞ –Ω–µ—Ç, —Ä–∏—Å—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ —Ç–µ–∫—Å—Ç–æ–º - —Ü–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏
            right_bbox = draw.textbbox((0, 0), source_name, font=font)
            text_h = right_bbox[3] - right_bbox[1]
            rx = w - right_bbox[2] - padding
            ry = (h - text_h) // 2  # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏
            draw.text((rx, ry), source_name, font=font, fill=(255, 255, 255))
    
    def _extract_source_name(self, url: str) -> str:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–º—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –∏–∑ URL (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)."""
        from urllib.parse import urlparse
        try:
            domain = urlparse(url).netloc
            if domain.startswith('www.'):
                domain = domain[4:]
            return domain.split('.')[0].upper()
        except Exception:
            return "NEWS"

    def _get_source_info(self, url: str) -> Dict[str, str]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏—Å—Ç–æ—á–Ω–∏–∫–µ: –Ω–∞–∑–≤–∞–Ω–∏–µ, –ª–æ–≥–æ—Ç–∏–ø."""
        from urllib.parse import urlparse
        
        try:
            domain = urlparse(url).netloc.lower()
            if domain.startswith('www.'):
                domain = domain[4:]
            
            # –ò—â–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
            print(f"üîç DEBUG: _get_source_info - domain: '{domain}', news_sources: {list(self.news_sources.keys())}")
            for source_key, source_config in self.news_sources.items():
                print(f"üîç DEBUG: –ü—Ä–æ–≤–µ—Ä—è–µ–º {source_key}: domains={source_config.get('domains', [])}")
                if domain in source_config.get('domains', []):
                    logo_path = Path(self.logos_dir) / source_config.get('logo_file', '')
                    
                    # –ï—Å–ª–∏ –ª–æ–≥–æ—Ç–∏–ø —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
                    if logo_path.exists():
                        return {
                            'name': source_config.get('display_name', source_key.upper()),
                            'logo_path': str(logo_path)
                        }
                    
                    # –ï—Å–ª–∏ –ª–æ–≥–æ—Ç–∏–ø–∞ –Ω–µ—Ç, –ø—Ä–æ–±—É–µ–º —Å–∫–∞—á–∞—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
                    if self.logo_manager:
                        logger.info(f"üé® –ü—Ä–æ–±—É–µ–º —Å–∫–∞—á–∞—Ç—å –ª–æ–≥–æ—Ç–∏–ø –¥–ª—è {source_key} –∏–∑ {url}")
                        downloaded_logo = self.logo_manager.get_logo_path(url, source_config)
                        if downloaded_logo:
                            logger.info(f"‚úÖ –õ–æ–≥–æ—Ç–∏–ø —Å–∫–∞—á–∞–Ω: {downloaded_logo}")
                            return {
                                'name': source_config.get('display_name', source_key.upper()),
                                'logo_path': downloaded_logo
                            }
                        else:
                            logger.warning(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –ª–æ–≥–æ—Ç–∏–ø –¥–ª—è {source_key}")
                    
                    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–µ–∑ –ª–æ–≥–æ—Ç–∏–ø–∞
                    return {
                        'name': source_config.get('display_name', source_key.upper()),
                        'logo_path': ''
                    }
            
            # –ï—Å–ª–∏ –∏—Å—Ç–æ—á–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏, –ø—Ä–æ–±—É–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ
            if self.logo_manager:
                downloaded_logo = self.logo_manager.get_logo_path(url, {})
                if downloaded_logo:
                    return {
                        'name': domain.split('.')[0].upper(),
                        'logo_path': downloaded_logo
                    }
            
            # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–º–æ–≥–ª–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            return {
                'name': domain.split('.')[0].upper(),
                'logo_path': ''
            }
            
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –¥–ª—è {url}: {e}")
            return {'name': 'NEWS', 'logo_path': ''}

    def create_news_short_video(self, news_data: Dict, output_path: str) -> Optional[str]:
        """
        –°–æ–∑–¥–∞–µ—Ç –≤–∏–¥–µ–æ-—à–æ—Ä—Ç—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–∏, –∏—Å–ø–æ–ª—å–∑—É—è MoviePy.
        """
        try:
            logger.info(f"–ù–∞—á–∏–Ω–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–µ–æ: {output_path}")
            
            # 1. –†–∞–∑–º–µ—Ç–∫–∞ –æ–±–ª–∞—Å—Ç–µ–π
            header_h = int(self.height * self.header_ratio)
            title_h = int(self.height * self.title_ratio)
            middle_h = int(self.height * self.middle_ratio)
            footer_h = self.height - header_h - title_h - middle_h

            # 2. –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–ø–∞ –¥–ª—è —à–∞–ø–∫–∏
            media_path = news_data.get('local_video_path') or news_data.get('local_image_path')
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–Ω—É—é —à–∏—Ä–∏–Ω—É –≤–∏–¥–µ–æ –¥–ª—è —à–∞–ø–∫–∏
            header_clip = self._make_header_clip(media_path, (self.width, header_h))

            # 3. –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–ø–∞ —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º
            news_title = news_data.get('title', 'Breaking News')
            title_img = self._render_title_image(news_title, (self.width, title_h))
            title_clip = ImageClip(title_img).with_duration(self.duration)

            # 4. –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–ø–∞ —Å —Ç–µ–∫—Å—Ç–æ–º
            short_text = news_data.get('summary', '–ù–æ–≤–æ—Å—Ç—å –¥–Ω—è')
            middle_img = self._render_text_image(short_text, (self.width, middle_h))
            middle_clip = ImageClip(middle_img).with_duration(self.duration)
            
            # 5. –°–æ–∑–¥–∞–Ω–∏–µ —É–º–Ω–æ–≥–æ —Ñ—É—Ç–µ—Ä–∞ —Å –ª–æ–≥–æ—Ç–∏–ø–æ–º –∏ –∞–≤–∞—Ç–∞—Ä–æ–º –∞–≤—Ç–æ—Ä–∞
            date_str = news_data.get('publish_date', datetime.now().strftime('%d.%m.%Y'))
            footer_img = self._render_smart_footer_image(date_str, news_data, (self.width, footer_h))
            footer_clip = ImageClip(footer_img).with_duration(self.duration)

            # 6. –°–±–æ—Ä–∫–∞ –≤—Å–µ—Ö –∫–ª–∏–ø–æ–≤
            # –®–∞–ø–∫–∞ –∑–∞–ø–æ–ª–Ω—è–µ—Ç –≤—Å—é —à–∏—Ä–∏–Ω—É –∏ –ø–æ–ª–Ω—ã–π —Ä–∞–∑–º–µ—Ä –≤–∏–¥–µ–æ, –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∫–ª–∏–ø—ã –Ω–∞–∫–ª–∞–¥—ã–≤–∞–µ–º –ø–æ–≤–µ—Ä—Ö
            final_clip = CompositeVideoClip([
                header_clip,  # –§–æ–Ω (–ø–æ–ª–Ω—ã–π —Ä–∞–∑–º–µ—Ä)
                title_clip.with_position((0, header_h)),
                middle_clip.with_position((0, header_h + title_h)),
                footer_clip.with_position((0, header_h + title_h + middle_h)),
            ], size=(self.width, self.height))

            # 7. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞—É–¥–∏–æ
            music_dir = self.paths_config.get('music_dir', 'resources/music')
            music_files = [f for f in Path(music_dir).glob('*.mp3')]
            if music_files:
                import random
                music_path = random.choice(music_files)
                try:
                    audio_clip = AudioFileClip(str(music_path))
                    if audio_clip.duration >= self.duration:
                        audio = audio_clip.with_duration(self.duration)
                    else:
                        # –ü–æ–≤—Ç–æ—Ä—è–µ–º –∞—É–¥–∏–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑, —á—Ç–æ–±—ã –ø–æ–∫—Ä—ã—Ç—å –Ω—É–∂–Ω—É—é –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
                        repeats = int(self.duration / audio_clip.duration) + 1
                        audio = concatenate_audioclips([audio_clip] * repeats)
                        audio = audio.with_duration(self.duration)
                    
                    final_clip = final_clip.with_audio(audio.with_volume_scaled(0.3)) # –î–µ–ª–∞–µ–º –º—É–∑—ã–∫—É —Ç–∏—à–µ
                    logger.info(f"üéµ –î–æ–±–∞–≤–ª–µ–Ω–∞ –º—É–∑—ã–∫–∞: {music_path.name}")
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∞—É–¥–∏–æ: {e}")
            else:
                logger.warning("‚ö†Ô∏è –ú—É–∑—ã–∫–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")

            # 7. –ó–∞–ø–∏—Å—å –≤–∏–¥–µ–æ
            Path(output_path).parent.mkdir(parents=True, exist_ok=True)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∏–ø—ã –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
            self._active_clips.extend([header_clip, title_clip, middle_clip, footer_clip, final_clip])
            if 'audio' in locals():
                self._active_clips.append(audio)
            
            try:
                final_clip.write_videofile(
                    output_path,
                    fps=self.fps,
                    codec='libx264',
                    audio_codec='aac',
                    preset='medium',
                    threads=os.cpu_count() or 2,
                    logger='bar'
                )
                logger.info(f"‚úÖ –í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {output_path}")
                return output_path
            finally:
                # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –∫–ª–∏–ø—ã –ø–æ—Å–ª–µ –∑–∞–ø–∏—Å–∏
                self._close_all_clips()

        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤–∏–¥–µ–æ: {e}", exc_info=True)
            return None

    def _close_all_clips(self):
        """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–ª–∏–ø—ã –∏ –æ—Å–≤–æ–±–æ–∂–¥–∞–µ—Ç —Ä–µ—Å—É—Ä—Å—ã."""
        try:
            for clip in self._active_clips:
                try:
                    if hasattr(clip, 'close'):
                        clip.close()
                    elif hasattr(clip, 'reader') and hasattr(clip.reader, 'close'):
                        clip.reader.close()
                    elif hasattr(clip, 'audio') and hasattr(clip.audio, 'close'):
                        clip.audio.close()
                except Exception as e:
                    logger.debug(f"–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –∫–ª–∏–ø–∞: {e}")
            
            self._active_clips.clear()
            
            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–±–æ—Ä–∫–∞ –º—É—Å–æ—Ä–∞
            import gc
            gc.collect()
            
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –∫–ª–∏–ø–æ–≤: {e}")

    def close(self):
        """–ú–µ—Ç–æ–¥ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."""
        self._close_all_clips()

    def __del__(self):
        """–î–µ—Å—Ç—Ä—É–∫—Ç–æ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤."""
        try:
            self._close_all_clips()
        except Exception:
            pass


class SeleniumVideoExporter:
    """–ö–ª–∞—Å—Å –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –∞–Ω–∏–º–∞—Ü–∏–π –≤ –≤–∏–¥–µ–æ (—Å—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥ —á–µ—Ä–µ–∑ Selenium)"""

    def __init__(self, video_config: Dict, paths_config: Dict):
        self.video_config = video_config
        self.paths_config = paths_config
        self.driver = None

        self._setup_selenium()

    def _setup_selenium(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Selenium WebDriver –¥–ª—è headless —Ä–µ–∂–∏–º–∞"""
        try:
            chrome_options = Options()
            chrome_options.add_argument("--headless")
            chrome_options.add_argument("--no-sandbox")
            chrome_options.add_argument("--disable-dev-shm-usage")
            chrome_options.add_argument("--disable-gpu")
            chrome_options.add_argument(f"--window-size={self.video_config['width']},{self.video_config['height']}")
            chrome_options.add_argument("--hide-scrollbars")
            chrome_options.add_argument("--disable-extensions")
            chrome_options.add_argument("--disable-plugins")
            # –û—Ç–∫–ª—é—á–∞–µ–º GCM –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –æ—à–∏–±–æ–∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            chrome_options.add_argument("--disable-background-timer-throttling")
            chrome_options.add_argument("--disable-backgrounding-occluded-windows")
            chrome_options.add_argument("--disable-renderer-backgrounding")
            chrome_options.add_argument("--disable-features=TranslateUI,VizDisplayCompositor")
            chrome_options.add_argument("--disable-component-extensions-with-background-pages")
            chrome_options.add_argument("--disable-default-apps")
            chrome_options.add_argument("--disable-sync")
            
            self.driver = webdriver.Chrome(options=chrome_options)
            logger.info("Selenium WebDriver —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Selenium: {e}")
            raise

    def generate_html_from_template(self, animation_data: Dict, logo_path: Optional[str] = None) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è HTML —Ñ–∞–π–ª–∞ –∏–∑ —à–∞–±–ª–æ–Ω–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ –∞–Ω–∏–º–∞—Ü–∏–∏"""

        template_path = os.path.join(
            self.paths_config['templates_dir'],
            'animation_template.html'
        )

        with open(template_path, 'r', encoding='utf-8') as f:
            template = f.read()

        js_data = {
            'header': animation_data.get('animation_content', {}).get('header', {}),
            'body': animation_data.get('animation_content', {}).get('body', {}),
            'footer': animation_data.get('animation_content', {}).get('footer', {}),
            'style': animation_data.get('animation_content', {}).get('style', {}),
            'logo_url': logo_path or ''
        }

        js_data_json = json.dumps(js_data, ensure_ascii=False, indent=2)
        html_content = template.replace('{{ANIMATION_DATA}}', js_data_json)
        return html_content

    def render_animation_to_video(self, animation_data: Dict, output_path: str,
                               logo_path: Optional[str] = None) -> str:
        """–†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –∞–Ω–∏–º–∞—Ü–∏–∏ –≤ –≤–∏–¥–µ–æ —Ñ–∞–π–ª"""
        try:
            html_content = self.generate_html_from_template(animation_data, logo_path)
            temp_html_path = os.path.join(
                self.paths_config['temp_dir'],
                f"temp_animation_{int(time.time())}.html"
            )

            with open(temp_html_path, 'w', encoding='utf-8') as f:
                f.write(html_content)

            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å –≤ –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –¥–ª—è file URI
            absolute_path = os.path.abspath(temp_html_path)
            file_url = Path(absolute_path).as_uri()
            self.driver.get(file_url)

            WebDriverWait(self.driver, 10).until(
                EC.presence_of_element_located((By.CLASS_NAME, "container"))
            )

            frames = self._capture_animation_frames()
            video_path = self._create_video_from_frames(frames, output_path)

            os.remove(temp_html_path)
            self._cleanup_temp_frames(output_path)

            logger.info(f"–í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ: {video_path}")
            return video_path
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–µ –≤–∏–¥–µ–æ: {e}")
            raise

    def _capture_animation_frames(self) -> list:
        """–ó–∞—Ö–≤–∞—Ç –∫–∞–¥—Ä–æ–≤ –∞–Ω–∏–º–∞—Ü–∏–∏"""
        frames = []
        fps = self.video_config['fps']
        duration = self.video_config['duration_seconds']
        num_frames = int(duration * fps)

        for i in range(num_frames):
            screenshot = self.driver.get_screenshot_as_png()
            image = Image.open(io.BytesIO(screenshot))
            if image.size != (self.video_config['width'], self.video_config['height']):
                image = image.resize((self.video_config['width'], self.video_config['height']))
            frames.append(image)
            time.sleep(1/fps)
        
        logger.info(f"–ó–∞—Ö–≤–∞—á–µ–Ω–æ {len(frames)} –∫–∞–¥—Ä–æ–≤ –∞–Ω–∏–º–∞—Ü–∏–∏")
        return frames

    def _create_video_from_frames(self, frames: list, output_path: str) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–µ–æ —Ñ–∞–π–ª–∞ –∏–∑ –∫–∞–¥—Ä–æ–≤"""
        height, width, _ = cv2.cvtColor(np.array(frames[0]), cv2.COLOR_RGB2BGR).shape
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–¥–µ–∫ avc1 (H.264), –æ–Ω –±–æ–ª–µ–µ —Å–æ–≤–º–µ—Å—Ç–∏–º, —á–µ–º mp4v
        fourcc = cv2.VideoWriter_fourcc(*'avc1')
        video_writer = cv2.VideoWriter(output_path, fourcc, self.video_config['fps'], (width, height))

        for frame in frames:
            video_writer.write(cv2.cvtColor(np.array(frame), cv2.COLOR_RGB2BGR))

        video_writer.release()
        return output_path
    
    def _cleanup_temp_frames(self, video_path: str):
        pass

    def export_animation(self, animation_data: Dict, news_id: int,
                       logo_path: Optional[str] = None) -> Optional[str]:
        """–≠–∫—Å–ø–æ—Ä—Ç –∞–Ω–∏–º–∞—Ü–∏–∏ –≤ –≤–∏–¥–µ–æ —Ñ–∞–π–ª"""
        try:
            output_dir = self.paths_config['outputs_dir']
            output_filename = f"short_{news_id}_{int(time.time())}.mp4"
            output_path = os.path.join(output_dir, output_filename)

            video_path = self.render_animation_to_video(
                animation_data,
                output_path,
                logo_path
            )

            logger.info(f"–ê–Ω–∏–º–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞: {video_path}")
            return video_path
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –∞–Ω–∏–º–∞—Ü–∏–∏ –¥–ª—è –Ω–æ–≤–æ—Å—Ç–∏ {news_id}: {e}")
            return None

    def close(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ WebDriver"""
        if self.driver:
            self.driver.quit()
            logger.info("Selenium WebDriver –∑–∞–∫—Ä—ã—Ç")

    def __del__(self):
        """–î–µ—Å—Ç—Ä—É–∫—Ç–æ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è"""
        self.close()

    def create_news_short_video(self, news_data: Dict, output_path: str) -> str:
        """
        –°–æ–∑–¥–∞–µ—Ç –≤–∏–¥–µ–æ news short –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–æ–≤–æ–≥–æ —à–∞–±–ª–æ–Ω–∞
        
        Args:
            news_data: –î–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏
            output_path: –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–∏–¥–µ–æ
            
        Returns:
            str: –ü—É—Ç—å –∫ —Å–æ–∑–¥–∞–Ω–Ω–æ–º—É –≤–∏–¥–µ–æ –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        try:
            # –°–æ–∑–¥–∞–µ–º HTML —Ñ–∞–π–ª –¥–ª—è news short
            temp_html_path = self._create_news_short_html(news_data)
            if not temp_html_path:
                return None
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –∞–±—Å–æ–ª—é—Ç–Ω—ã–π URI –¥–ª—è –±—Ä–∞—É–∑–µ—Ä–∞
            temp_html_uri = Path(os.path.abspath(temp_html_path)).as_uri()
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º HTML –≤ –±—Ä–∞—É–∑–µ—Ä
            self.driver.get(temp_html_uri)
            
            # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏ —Ä–µ—Å—É—Ä—Å–æ–≤
            time.sleep(3)
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –≤ –≤–∏–¥–µ–æ (6 —Å–µ–∫—É–Ω–¥, 30 FPS)
            frames = self._capture_animation_frames()
            video_path = self._create_video_from_frames(frames, output_path)
            
            # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            if os.path.exists(temp_html_path):
                os.remove(temp_html_path)
            
            logger.info(f"News short –≤–∏–¥–µ–æ —Å–æ–∑–¥–∞–Ω–æ: {video_path}")
            return video_path
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ news short: {e}")
            return None

    def _create_news_short_html(self, news_data: Dict) -> str:
        """
        –°–æ–∑–¥–∞–µ—Ç HTML —Ñ–∞–π–ª –¥–ª—è news short –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–æ–≤–æ–≥–æ —à–∞–±–ª–æ–Ω–∞
        
        Args:
            news_data: –î–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏
            
        Returns:
            str: –ü—É—Ç—å –∫ —Å–æ–∑–¥–∞–Ω–Ω–æ–º—É HTML —Ñ–∞–π–ª—É
        """
        try:
            # –ß–∏—Ç–∞–µ–º —à–∞–±–ª–æ–Ω
            template_path = "templates/news_short_template.html"
            if not os.path.exists(template_path):
                logger.error(f"–®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω: {template_path}")
                return None
                
            with open(template_path, 'r', encoding='utf-8') as f:
                template_content = f.read()
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ –∏ –ª–æ–≥–æ—Ç–∏–ø
            source_name = self._extract_source_name(news_data.get('url', ''))
            print(f"üîç DEBUG: URL: '{news_data.get('url', '')}', –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫: '{source_name}'")
            print(f"üîç DEBUG: news_data source: '{news_data.get('source', '')}'")
            
            # –î–ª—è Twitter –∏—Å–ø–æ–ª—å–∑—É–µ–º logo_manager –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∫–∏
            if news_data.get('source', '').upper() == 'TWITTER' and news_data.get('username'):
                source_logo_path = self._get_twitter_avatar_path(news_data.get('username'), news_data.get('url', ''))
            else:
                source_logo_path = self._get_source_logo_path(source_name)
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏
            news_image_path = self._get_news_image(news_data)
            
            # –ü–æ–ª—É—á–∞–µ–º –≤–∏–¥–µ–æ –Ω–æ–≤–æ—Å—Ç–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)
            news_video_path = self._get_news_video(news_data)
            
            # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –º—É–∑—ã–∫—É
            background_music_path = self._get_background_music()
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∏
            replacements = {
                '{{NEWS_IMAGE}}': news_image_path or '../resources/default_backgrounds/news_default.jpg',
                '{{NEWS_VIDEO}}': news_video_path or '',
                '{{SOURCE_LOGO}}': source_logo_path,
                '{{TWITTER_AVATAR}}': self._get_twitter_avatar_path(news_data) if news_data.get('source', '').upper() == 'TWITTER' else '',
                '{{SOURCE_NAME}}': source_name,  # –¢–æ–ª—å–∫–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "CNN")
                '{{NEWS_TITLE}}': (news_data.get('title', '–ó–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–æ–≤–æ—Å—Ç–∏')[:80] + ('...' if len(news_data.get('title', '')) > 80 else '')),
                '{{NEWS_BRIEF}}': news_data.get('summary', news_data.get('description', ''))[:500] + ('...' if len(news_data.get('summary', news_data.get('description', ''))) > 500 else ''),
                '{{PUBLISH_DATE}}': news_data.get('publish_date', '–°–µ–≥–æ–¥–Ω—è'),
                '{{PUBLISH_TIME}}': news_data.get('publish_time', '–°–µ–π—á–∞—Å'),
                '{{BACKGROUND_MUSIC}}': background_music_path
            }
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∏
            html_content = template_content
            for placeholder, value in replacements.items():
                html_content = html_content.replace(placeholder, str(value))
            
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π HTML —Ñ–∞–π–ª
            temp_html_path = os.path.join(
                self.paths_config.get('temp_dir', 'temp'),
                f"news_short_{int(time.time())}.html"
            )
            
            with open(temp_html_path, 'w', encoding='utf-8') as f:
                f.write(html_content)
            
            return temp_html_path
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è HTML: {e}")
            return None

    def _extract_source_name(self, url: str) -> str:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–º—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –∏–∑ URL"""
        if 'cnn.com' in url.lower():
            return 'CNN'
        elif 'foxnews.com' in url.lower():
            return 'FoxNews'
        elif 'nytimes.com' in url.lower():
            return 'NYTimes'
        elif 'washingtonpost.com' in url.lower():
            return 'WashingtonPost'
        elif 'reuters.com' in url.lower():
            return 'Reuters'
        elif 'ap.org' in url.lower() or 'apnews.com' in url.lower():
            return 'AssociatedPress'
        elif 'wsj.com' in url.lower():
            return 'WSJ'
        elif 'cnbc.com' in url.lower():
            return 'CNBC'
        elif 'aljazeera.com' in url.lower():
            return 'ALJAZEERA'
        elif 'abc' in url.lower():
            return 'ABC'
        elif 'nbcnews.com' in url.lower():
            return 'NBCNEWS'
        else:
            return 'News'

    def _get_twitter_avatar_path(self, username: str, url: str) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç –ø—É—Ç—å –∫ –∞–≤–∞—Ç–∞—Ä–∫–µ Twitter –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            logger.info(f"üê¶ –ü–æ–ø—ã—Ç–∫–∞ —Å–∫–∞—á–∞—Ç—å –∞–≤–∞—Ç–∞—Ä–∫—É –¥–ª—è @{username} –∏–∑ {url}")
            if self.logo_manager:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º logo_manager –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∫–∏
                avatar_path = self.logo_manager.get_logo_path(url, {})
                logger.info(f"üê¶ LogoManager –≤–µ—Ä–Ω—É–ª: {avatar_path}")
                if avatar_path and os.path.exists(avatar_path):
                    logger.info(f"‚úÖ –ê–≤–∞—Ç–∞—Ä–∫–∞ –Ω–∞–π–¥–µ–Ω–∞: {avatar_path}")
                    return f"../{avatar_path}"
                else:
                    logger.warning(f"‚ùå –ê–≤–∞—Ç–∞—Ä–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {avatar_path}")
            else:
                logger.warning("‚ùå LogoManager –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –ª–æ–≥–æ—Ç–∏–ø X
            logger.info("üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –ª–æ–≥–æ—Ç–∏–ø X")
            return "../media/X_logo.png"
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∫–∏ Twitter –¥–ª—è @{username}: {e}")
            return "../media/X_logo.png"

    def _get_twitter_avatar_path(self, news_data: Dict[str, Any]) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç –ø—É—Ç—å –∫ –∞–≤–∞—Ç–∞—Ä—É Twitter –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            username = news_data.get('username', '').lstrip('@')
            if not username:
                return ''
            
            # –ò—â–µ–º –∞–≤–∞—Ç–∞—Ä –≤ –ø–∞–ø–∫–µ logos
            logos_avatar = f"resources/logos/avatar_{username}.png"
            if os.path.exists(logos_avatar):
                return logos_avatar
            
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É
            return ''
            
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—É—Ç–∏ –∫ –∞–≤–∞—Ç–∞—Ä—É Twitter: {e}")
            return ''
    
    def _get_source_logo_path(self, source_name: str) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç –ø—É—Ç—å –∫ –ª–æ–≥–æ—Ç–∏–ø—É –∏—Å—Ç–æ—á–Ω–∏–∫–∞"""
        logo_files = {
            'CNN': 'media/CNN.jpg',
            'FoxNews': 'media/FoxNews.png',
            'NYTimes': 'media/NYTimes.png',
            'WashingtonPost': 'media/WashingtonPost.jpg',
            'Reuters': 'media/Reuters.jpg',
            'AssociatedPress': 'media/AssociatedPress.jpg',
            'WSJ': 'media/WSJ.jpg',
            'CNBC': 'media/CNBC.png',
            'ALJAZEERA': 'media/ALJAZEERA.jpg',
            'ABC': 'media/ABC.jpg',
            'NBC': 'media/NBCNews.png',
            'NBCNEWS': 'media/NBCNews.png'
        }
        
        logo_path = logo_files.get(source_name, 'media/CNN.jpg')  # CNN –∫–∞–∫ –¥–µ—Ñ–æ–ª—Ç
        logger.info(f"üîç DEBUG: –ò—Å—Ç–æ—á–Ω–∏–∫: '{source_name}', –ª–æ–≥–æ—Ç–∏–ø: '{logo_path}'")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª
        if os.path.exists(logo_path):
            return f"../{logo_path}"
        else:
            logger.warning(f"–õ–æ–≥–æ—Ç–∏–ø –Ω–µ –Ω–∞–π–¥–µ–Ω: {logo_path}")
            return "../media/CNN.jpg"  # –§–æ–ª–ª–±—ç–∫

    def _get_news_image(self, news_data: Dict) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ª–æ–∫–∞–ª—å–Ω—ã–π –ø—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
        if 'local_image_path' in news_data and news_data['local_image_path']:
            local_path = news_data['local_image_path']
            if os.path.exists(local_path):
                return f"../{local_path}"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç
        if 'image_path' in news_data and os.path.exists(news_data['image_path']):
            return f"../{news_data['image_path']}"
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –ø–æ–ø—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–µ–¥–∏–∞-–º–µ–Ω–µ–¥–∂–µ—Ä
        if 'images' in news_data and news_data['images']:
            try:
                from scripts.media_manager import MediaManager
                # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è MediaManager –∏–∑ –∏–º–µ—é—â–∏—Ö—Å—è –¥–∞–Ω–Ω—ã—Ö
                config_path = 'config/config.yaml'
                media_manager = MediaManager(config_path)
                media_result = media_manager.process_news_media(news_data)
                
                if media_result.get('local_image_path'):
                    return f"../{media_result['local_image_path']}"
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ MediaManager: {e}")
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        return "../resources/default_backgrounds/news_default.jpg"

    def _get_news_video(self, news_data: Dict) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç –≤–∏–¥–µ–æ –Ω–æ–≤–æ—Å—Ç–∏"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ª–æ–∫–∞–ª—å–Ω—ã–π –ø—É—Ç—å –∫ –≤–∏–¥–µ–æ
        if 'local_video_path' in news_data and news_data['local_video_path']:
            local_path = news_data['local_video_path']
            if os.path.exists(local_path):
                return f"../{local_path}"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ URL –≤–∏–¥–µ–æ –≤ –¥–∞–Ω–Ω—ã—Ö
        if 'video_url' in news_data and news_data['video_url']:
            # –í –±—É–¥—É—â–µ–º –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É –≤–∏–¥–µ–æ
            # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É
            pass
        
        # –ï—Å–ª–∏ –≤–∏–¥–µ–æ –Ω–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É
        return ""

    def _get_background_music(self) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç –ø—É—Ç—å –∫ —Ñ–æ–Ω–æ–≤–æ–π –º—É–∑—ã–∫–µ"""
        try:
            from scripts.media_manager import MediaManager
            config_path = 'config/config.yaml'
            media_manager = MediaManager(config_path)
            music_path = media_manager.get_background_music()
            
            if music_path:
                return f"../{music_path}"
            else:
                return ""
                
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–æ–Ω–æ–≤–æ–π –º—É–∑—ã–∫–∏ —á–µ—Ä–µ–∑ MediaManager: {e}")
            
            # Fallback –∫ —Å—Ç–∞—Ä–æ–º—É –º–µ—Ç–æ–¥—É
            music_dir = "resources/music"
            
            if not os.path.exists(music_dir):
                logger.info(f"–ü–∞–ø–∫–∞ —Å –º—É–∑—ã–∫–æ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {music_dir}")
                return ""
                
            audio_extensions = ['.mp3', '.wav', '.ogg', '.m4a']
            
            for file in os.listdir(music_dir):
                if any(file.lower().endswith(ext) for ext in audio_extensions):
                    music_path = os.path.join(music_dir, file)
                    logger.info(f"–ù–∞–π–¥–µ–Ω–∞ —Ñ–æ–Ω–æ–≤–∞—è –º—É–∑—ã–∫–∞: {file}")
                    return f"../{music_path}"
                    
            logger.info("–§–æ–Ω–æ–≤–∞—è –º—É–∑—ã–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –ø–∞–ø–∫–µ resources/music")
            return ""

    def _export_frames_to_video_fallback(self, frames: List[np.ndarray], output_path: str, fps: int, music_path: Optional[str] = None):
        """–†–µ–∑–µ—Ä–≤–Ω—ã–π –º–µ—Ç–æ–¥ —ç–∫—Å–ø–æ—Ä—Ç–∞ –∫–∞–¥—Ä–æ–≤ –≤ –≤–∏–¥–µ–æ —Å –ø–æ–º–æ—â—å—é OpenCV –∏ FFMPEG –¥–ª—è –∞—É–¥–∏–æ"""
        if not frames:
            logger.error("–ù–µ—Ç –∫–∞–¥—Ä–æ–≤ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ –≤–∏–¥–µ–æ.")
            return

        height, width, layers = frames[0].shape
        fourcc = cv2.VideoWriter_fourcc(*'mp4v')
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –º—É–∑—ã–∫–∞, —Å–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–µ–º –≤–∏–¥–µ–æ –±–µ–∑ –∑–≤—É–∫–∞
        silent_video_path = output_path
        if music_path and os.path.exists(music_path.replace('../', '')):
            silent_video_path = os.path.join(os.path.dirname(output_path), f"silent_{os.path.basename(output_path)}")

        video = cv2.VideoWriter(silent_video_path, fourcc, fps, (width, height))
        for frame in frames:
            video.write(cv2.cvtColor(frame, cv2.COLOR_RGB2BGR))
        video.release()

        logger.info(f"–í–∏–¥–µ–æ –±–µ–∑ –∑–≤—É–∫–∞ —Å–æ–∑–¥–∞–Ω–æ: {silent_video_path}")

        # –î–æ–±–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ –¥–æ—Ä–æ–∂–∫—É —Å –ø–æ–º–æ—â—å—é FFMPEG
        actual_music_path = music_path.replace('../', '')
        if music_path and os.path.exists(actual_music_path):
            logger.info(f"üéµ –î–æ–±–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ–¥–æ—Ä–æ–∂–∫—É '{actual_music_path}' —Å –ø–æ–º–æ—â—å—é FFMPEG...")
            command = [
                'ffmpeg',
                '-y',  # –ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞—Ç—å –≤—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª –±–µ–∑ –∑–∞–ø—Ä–æ—Å–∞
                '-i', silent_video_path,
                '-i', actual_music_path,
                '-c:v', 'copy',  # –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –≤–∏–¥–µ–æ–ø–æ—Ç–æ–∫ –±–µ–∑ –ø–µ—Ä–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è
                '-c:a', 'aac',   # –ö–æ–¥–∏—Ä–æ–≤–∞—Ç—å –∞—É–¥–∏–æ –≤ AAC
                '-shortest',     # –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–∏–¥–µ–æ –±—É–¥–µ—Ç —Ä–∞–≤–Ω–∞ —Å–∞–º–æ–º—É –∫–æ—Ä–æ—Ç–∫–æ–º—É –ø–æ—Ç–æ–∫—É
                '-loglevel', 'error', # –°–∫—Ä—ã—Ç—å –ª–∏—à–Ω–∏–µ –ª–æ–≥–∏
                output_path
            ]
            
            try:
                subprocess.run(command, check=True, capture_output=True, text=True)
                logger.info(f"‚úÖ –ê—É–¥–∏–æ–¥–æ—Ä–æ–∂–∫–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ '{output_path}'")
                # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ –≤–∏–¥–µ–æ –±–µ–∑ –∑–≤—É–∫–∞
                os.remove(silent_video_path)
            except FileNotFoundError:
                logger.error("‚ùå FFMPEG –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ –¥–æ—Å—Ç—É–ø–µ–Ω –≤ PATH.")
                # –ï—Å–ª–∏ FFMPEG –Ω–µ—Ç, –æ—Å—Ç–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ –±–µ–∑ –∑–≤—É–∫–∞
                if silent_video_path != output_path:
                    os.rename(silent_video_path, output_path)
            except subprocess.CalledProcessError as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ FFMPEG –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞—É–¥–∏–æ: {e.stderr}")
                # –ï—Å–ª–∏ FFMPEG –≤—ã–¥–∞–ª –æ—à–∏–±–∫—É, –æ—Å—Ç–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ –±–µ–∑ –∑–≤—É–∫–∞
                if silent_video_path != output_path:
                    os.rename(silent_video_path, output_path)
        else:
            if not music_path:
                logger.info("üé∂ –ú—É–∑—ã–∫–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞, –≤–∏–¥–µ–æ –±—É–¥–µ—Ç –±–µ–∑ –∑–≤—É–∫–∞.")
            else:
                logger.warning(f"‚ö†Ô∏è –§–∞–π–ª –º—É–∑—ã–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: '{actual_music_path}', –≤–∏–¥–µ–æ –±—É–¥–µ—Ç –±–µ–∑ –∑–≤—É–∫–∞.")
        
    def create_short_from_html(self, news_data: Dict) -> Optional[str]:
        """–°–æ–∑–¥–∞–µ—Ç –≤–∏–¥–µ–æ-—à–æ—Ä—Ç –∏–∑ HTML-—à–∞–±–ª–æ–Ω–∞"""
        try:
            temp_html_path = self._create_news_short_html(news_data)
            self.driver.get(f"file:///{os.path.abspath(temp_html_path)}")
            
            # –ñ–¥–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ GSAP –∏ –º–µ–¥–∏–∞
            time.sleep(2)

            frames = []
            duration_seconds = self.video_config.get('duration_seconds', 5)
            fps = self.video_config.get('fps', 30)
            num_frames = duration_seconds * fps

            for i in range(num_frames):
                screenshot = self.driver.get_screenshot_as_png()
                img = Image.open(io.BytesIO(screenshot))
                frames.append(np.array(img))
                time.sleep(1 / fps)
            
            logger.info(f"–ó–∞—Ö–≤–∞—á–µ–Ω–æ {len(frames)} –∫–∞–¥—Ä–æ–≤ –∞–Ω–∏–º–∞—Ü–∏–∏")
            
            output_filename = f"short_{news_data.get('id', 'temp')}_{int(time.time())}.mp4"
            output_path = os.path.join(self.paths_config.get('output_dir', 'outputs'), output_filename)

            # –ü–æ–ª—É—á–∞–µ–º –º—É–∑—ã–∫—É –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ —ç–∫—Å–ø–æ—Ä—Ç–µ—Ä
            music_path = self._get_background_music()

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º MoviePy –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
            logger.info("–ò—Å–ø–æ–ª—å–∑—É–µ–º MoviePy –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–¥–µ–æ (–ª–æ–≥–∏–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞).")
            self._export_frames_to_video_fallback(frames, output_path, fps, music_path)

            os.remove(temp_html_path)
            logger.info(f"News short –≤–∏–¥–µ–æ —Å–æ–∑–¥–∞–Ω–æ: {output_path}")
            return output_path

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤–∏–¥–µ–æ –∏–∑ HTML: {e}")
            return None


def main():
    """–¢–µ—Å—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    config_path = os.path.join(os.path.dirname(__file__), '..', 'config', 'config.yaml')

    try:
        # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        with open(config_path, 'r', encoding='utf-8') as f:
            config = yaml.safe_load(f)

        # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        test_animation_data = {
            'animation_content': {
                'header': {
                    'text': 'BBC News',
                    'animation': 'fadeIn',
                    'duration': 1.5
                },
                'body': {
                    'text': '–ü—Ä–µ–∑–∏–¥–µ–Ω—Ç –æ–±—ä—è–≤–∏–ª –æ –Ω–æ–≤—ã—Ö —Ä–µ—Ñ–æ—Ä–º–∞—Ö –≤ —ç–∫–æ–Ω–æ–º–∏–∫–µ —Å—Ç—Ä–∞–Ω—ã',
                    'animation': 'typewriter',
                    'duration': 2.5
                },
                'footer': {
                    'date': '30.08.2025',
                    'animation': 'slideUp',
                    'duration': 1.0
                },
                'style': {
                    'theme': 'dark',
                    'accent_color': '#FF6B35'
                }
            }
        }

        # –ü–æ–ø—ã—Ç–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π —ç–∫—Å–ø–æ—Ä—Ç–µ—Ä
        try:
            exporter = VideoExporter(config['video'], config['paths'])
            output_path = os.path.join(
                os.path.dirname(__file__), '..', 'outputs', 'test_video.mp4'
            )
            # –î–ª—è —Ç–µ—Å—Ç–∞ –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å news_data
            test_news_data = {
                'summary': '–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç –Ω–æ–≤–æ—Å—Ç–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ. –û–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª–∏–Ω–Ω—ã–º, —á—Ç–æ–±—ã –ø–µ—Ä–µ–Ω–æ—Å–∏—Ç—å—Å—è –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫.',
                'local_image_path': 'resources/media/news/Test_Trump_Tariffs_N_086fd1c7.jpg',
                'url': 'https://www.bcs.com/test-news',
                'publish_date': '13.09.2025'
            }
            result = exporter.create_news_short_video(test_news_data, output_path)
            print(f"–í–∏–¥–µ–æ —Å–æ–∑–¥–∞–Ω–æ: {result}")

        except Exception as e:
            print(f"–û—Å–Ω–æ–≤–Ω–æ–π —ç–∫—Å–ø–æ—Ä—Ç–µ—Ä –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
            print("–ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç–µ—Ä...")
            # –¢—É—Ç –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å SeleniumVideoExporter –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            # fallback_exporter = SeleniumVideoExporter(config['video'], config['paths'])
            # ...

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–∏: {e}", exc_info=True)


if __name__ == "__main__":
    main()
