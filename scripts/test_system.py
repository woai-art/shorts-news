#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã shorts_news
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç—É –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –±–µ–∑ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∞–ª—å–Ω—ã—Ö –≤–∏–¥–µ–æ
"""

import os
import sys
import logging
import time
from pathlib import Path
from typing import Dict, Any
import yaml

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class SystemTester:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã"""

    def __init__(self, config_path: str):
        self.config = self._load_config(config_path)
        self.project_path = self.config['project']['base_path']
        self.test_results = []

    def _load_config(self, config_path: str) -> Dict:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        with open(config_path, 'r', encoding='utf-8') as f:
            return yaml.safe_load(f)

    def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
        logger.info("üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã shorts_news")
        logger.info("=" * 60)

        # –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞
        self.test_project_structure()

        # –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        self.test_config_files()

        # –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        self.test_dependencies()

        # –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ API –∫–ª—é—á–µ–π
        self.test_api_keys()

        # –¢–µ—Å—Ç 5: –¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–æ–≤ –º–æ–¥—É–ª–µ–π
        self.test_module_imports()

        # –¢–µ—Å—Ç 6: –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
        self.test_directory_creation()

        # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        self.print_test_results()

    def test_project_structure(self):
        """–¢–µ—Å—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞"""
        logger.info("üìÅ –¢–µ—Å—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞...")

        required_dirs = [
            'config',
            'sources',
            'templates',
            'animations',
            'outputs',
            'logs',
            'scripts',
            'media'
        ]

        missing_dirs = []
        for dir_name in required_dirs:
            dir_path = os.path.join(self.project_path, dir_name)
            if not os.path.exists(dir_path):
                missing_dirs.append(dir_name)

        if missing_dirs:
            self._add_test_result("–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞", False,
                                f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {', '.join(missing_dirs)}")
        else:
            self._add_test_result("–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞", True, "–í—Å–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –Ω–∞ –º–µ—Å—Ç–µ")

    def test_config_files(self):
        """–¢–µ—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
        logger.info("‚öôÔ∏è –¢–µ—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤...")

        config_files = [
            'config/config.yaml',
            'config/.env',
            'sources/news_sources.yaml',
            'requirements.txt'
        ]

        missing_files = []
        for file_path in config_files:
            full_path = os.path.join(self.project_path, file_path)
            if not os.path.exists(full_path):
                missing_files.append(file_path)

        if missing_files:
            self._add_test_result("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã", False,
                                f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ñ–∞–π–ª—ã: {', '.join(missing_files)}")
        else:
            self._add_test_result("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã", True, "–í—Å–µ —Ñ–∞–π–ª—ã –Ω–∞–π–¥–µ–Ω—ã")

    def test_dependencies(self):
        """–¢–µ—Å—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π Python"""
        logger.info("üì¶ –¢–µ—Å—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π Python...")

        required_packages = [
            'feedparser',
            'requests',
            'beautifulsoup4',
            'pyyaml',
            'python-dotenv'
        ]

        missing_packages = []
        for package in required_packages:
            try:
                __import__(package.replace('-', '_'))
            except ImportError:
                missing_packages.append(package)

        if missing_packages:
            self._add_test_result("–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ Python", False,
                                f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–∞–∫–µ—Ç—ã: {', '.join(missing_packages)}")
        else:
            self._add_test_result("–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ Python", True, "–í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")

    def test_api_keys(self):
        """–¢–µ—Å—Ç –Ω–∞–ª–∏—á–∏—è API –∫–ª—é—á–µ–π"""
        logger.info("üîë –¢–µ—Å—Ç API –∫–ª—é—á–µ–π...")

        required_env_vars = [
            'GEMINI_API_KEY',
            'TELEGRAM_API_ID',
            'TELEGRAM_API_HASH',
            'TELEGRAM_BOT_TOKEN'
        ]

        missing_vars = []
        for var in required_env_vars:
            if not os.getenv(var):
                missing_vars.append(var)

        # YouTube –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è –±–∞–∑–æ–≤–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        optional_vars = ['YOUTUBE_CLIENT_SECRET_FILE']
        missing_optional = []
        for var in optional_vars:
            if not os.getenv(var):
                missing_optional.append(var)

        if missing_vars:
            self._add_test_result("API –∫–ª—é—á–∏", False,
                                f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: {', '.join(missing_vars)}")
        else:
            status = "–í—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ API –∫–ª—é—á–∏ –Ω–∞–π–¥–µ–Ω—ã"
            if missing_optional:
                status += f" (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç: {', '.join(missing_optional)})"
            self._add_test_result("API –∫–ª—é—á–∏", True, status)

    def test_module_imports(self):
        """–¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–æ–≤ –º–æ–¥—É–ª–µ–π"""
        logger.info("üìö –¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–æ–≤ –º–æ–¥—É–ª–µ–π...")

        test_modules = [
            'news_processor',
            'llm_processor',
            'video_exporter',
            'youtube_uploader',
            'telegram_bot',
            'main_orchestrator'
        ]

        failed_imports = []
        for module in test_modules:
            try:
                module_path = os.path.join(self.project_path, 'scripts', f'{module}.py')
                if os.path.exists(module_path):
                    # –ü–æ–ø—ã—Ç–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª—è
                    spec = __import__('importlib.util').util.spec_from_file_location(module, module_path)
                    if spec and spec.loader:
                        spec.loader.exec_module(__import__('importlib.util').util.module_from_spec(spec))
                    else:
                        failed_imports.append(module)
                else:
                    failed_imports.append(f"{module} (—Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω)")
            except Exception as e:
                failed_imports.append(f"{module} ({str(e)})")

        if failed_imports:
            self._add_test_result("–ò–º–ø–æ—Ä—Ç—ã –º–æ–¥—É–ª–µ–π", False,
                                f"–ü—Ä–æ–±–ª–µ–º—ã —Å –º–æ–¥—É–ª—è–º–∏: {', '.join(failed_imports)}")
        else:
            self._add_test_result("–ò–º–ø–æ—Ä—Ç—ã –º–æ–¥—É–ª–µ–π", True, "–í—Å–µ –º–æ–¥—É–ª–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä—É—é—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")

    def test_directory_creation(self):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞–±–æ—á–∏—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π"""
        logger.info("üìÇ –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π...")

        test_dirs = [
            'data',
            'temp/frames',
            'logs/archive'
        ]

        failed_dirs = []
        for dir_path in test_dirs:
            full_path = os.path.join(self.project_path, dir_path)
            try:
                os.makedirs(full_path, exist_ok=True)
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø–∏—Å–∏
                test_file = os.path.join(full_path, 'test_write.tmp')
                with open(test_file, 'w') as f:
                    f.write('test')
                os.remove(test_file)
            except Exception as e:
                failed_dirs.append(f"{dir_path} ({str(e)})")

        if failed_dirs:
            self._add_test_result("–°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π", False,
                                f"–ü—Ä–æ–±–ª–µ–º—ã —Å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è–º–∏: {', '.join(failed_dirs)}")
        else:
            self._add_test_result("–°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π", True, "–í—Å–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å–æ–∑–¥–∞–Ω—ã –∏ –¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è –∑–∞–ø–∏—Å–∏")

    def _add_test_result(self, test_name: str, success: bool, message: str):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ç–µ—Å—Ç–∞"""
        self.test_results.append({
            'test': test_name,
            'success': success,
            'message': message
        })

        status = "‚úÖ" if success else "‚ùå"
        logger.info(f"{status} {test_name}: {message}")

    def print_test_results(self):
        """–í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        logger.info("\n" + "=" * 60)
        logger.info("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
        logger.info("=" * 60)

        successful_tests = 0
        total_tests = len(self.test_results)

        for result in self.test_results:
            status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result['success'] else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
            logger.info(f"{status}: {result['test']}")
            if not result['success']:
                logger.info(f"   –î–µ—Ç–∞–ª–∏: {result['message']}")

        successful_tests = sum(1 for r in self.test_results if r['success'])

        logger.info("-" * 60)
        logger.info(f"–ò–¢–û–ì–û: {successful_tests}/{total_tests} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")

        if successful_tests == total_tests:
            logger.info("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ.")
        else:
            logger.info("‚ö†Ô∏è –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–µ—Ç–∞–ª–∏ –≤—ã—à–µ.")

        logger.info("=" * 60)

def create_test_news_sample():
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–∞ —Ç–µ—Å—Ç–æ–≤–æ–π –Ω–æ–≤–æ—Å—Ç–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏"""
    sample_news = {
        'id': 1,
        'title': '–¢–µ—Å—Ç–æ–≤–∞—è –Ω–æ–≤–æ—Å—Ç—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã',
        'description': '–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–∞—è –Ω–æ–≤–æ—Å—Ç—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã shorts_news. –ù–æ–≤–æ—Å—Ç—å —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫—Ä–∞—Ç–∫–æ–≥–æ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è.',
        'link': 'https://example.com/test-news',
        'published': '2025-01-08T10:00:00Z',
        'source': 'Test Source',
        'category': '–¢–µ—Å—Ç',
        'language': 'ru'
    }

    sample_path = os.path.join(os.path.dirname(__file__), '..', 'temp', 'test_news_sample.json')
    os.makedirs(os.path.dirname(sample_path), exist_ok=True)

    with open(sample_path, 'w', encoding='utf-8') as f:
        import json
        json.dump(sample_news, f, ensure_ascii=False, indent=2)

    logger.info(f"–°–æ–∑–¥–∞–Ω –ø—Ä–∏–º–µ—Ä —Ç–µ—Å—Ç–æ–≤–æ–π –Ω–æ–≤–æ—Å—Ç–∏: {sample_path}")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    import argparse

    parser = argparse.ArgumentParser(description='System Testing for Shorts News')
    parser.add_argument('--config', default='../config/config.yaml',
                       help='–ü—É—Ç—å –∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É')
    parser.add_argument('--create-sample', action='store_true',
                       help='–°–æ–∑–¥–∞—Ç—å –ø—Ä–∏–º–µ—Ä —Ç–µ—Å—Ç–æ–≤–æ–π –Ω–æ–≤–æ—Å—Ç–∏')

    args = parser.parse_args()

    if args.create_sample:
        create_test_news_sample()
        return

    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—É—Ç–∏ –∫ –∫–æ–Ω—Ñ–∏–≥—É
    if not os.path.isabs(args.config):
        config_path = os.path.join(os.path.dirname(__file__), args.config)
    else:
        config_path = args.config

    if not os.path.exists(config_path):
        logger.error(f"–§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: {config_path}")
        logger.info("–°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å")
        sys.exit(1)

    try:
        # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        tester = SystemTester(config_path)
        tester.run_all_tests()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()
