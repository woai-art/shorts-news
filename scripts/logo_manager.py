#!/usr/bin/env python3
"""
–ú–æ–¥—É–ª—å –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–æ–≥–æ—Ç–∏–ø–∞–º–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –Ω–æ–≤–æ—Å—Ç–µ–π.
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –ª–æ–≥–æ—Ç–∏–ø–æ–≤ –∫–æ–º–ø–∞–Ω–∏–π, –∞–≤–∞—Ç–∞—Ä–æ–∫ –∏–∑ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç–µ–π –∏ —Ñ–∞–≤–∏–∫–æ–Ω–æ–≤ —Å–∞–π—Ç–æ–≤.
"""

import os
import sys
import logging
import hashlib
from pathlib import Path
from typing import Optional, Dict, Any
from urllib.parse import urlparse, urljoin
import requests
from PIL import Image
import yaml

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class LogoManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –ª–æ–≥–æ—Ç–∏–ø–æ–≤."""
    
    def __init__(self, config_path: str):
        self.config = self._load_config(config_path)
        self.logos_dir = Path(self.config['paths']['logos_dir'])
        self.logos_dir.mkdir(parents=True, exist_ok=True)
        
        # –ö—ç—à –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        self.cache_file = self.logos_dir / 'cache.yaml'
        self.cache = self._load_cache()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤
        self.session = requests.Session()
        self.session.headers.update({
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
        })
    
    def _load_config(self, config_path: str) -> Dict[str, Any]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ YAML —Ñ–∞–π–ª–∞."""
        with open(config_path, 'r', encoding='utf-8') as f:
            return yaml.safe_load(f)
    
    def _load_cache(self) -> Dict[str, Any]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫—ç—à —Å–∫–∞—á–∞–Ω–Ω—ã—Ö –ª–æ–≥–æ—Ç–∏–ø–æ–≤."""
        if self.cache_file.exists():
            try:
                with open(self.cache_file, 'r', encoding='utf-8') as f:
                    return yaml.safe_load(f) or {}
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫—ç—à: {e}")
        return {}
    
    def _save_cache(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫—ç—à –Ω–∞ –¥–∏—Å–∫."""
        try:
            with open(self.cache_file, 'w', encoding='utf-8') as f:
                yaml.dump(self.cache, f, default_flow_style=False, allow_unicode=True)
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫—ç—à: {e}")
    
    def _get_cache_key(self, url: str, source_type: str = 'website') -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–ª—é—á –∫—ç—à–∞ –¥–ª—è URL."""
        return hashlib.md5(f"{source_type}:{url}".encode()).hexdigest()
    
    def _download_image(self, url: str, output_path: Path) -> bool:
        """–°–∫–∞—á–∏–≤–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ URL –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ–≥–æ."""
        try:
            logger.info(f"üì• –°–∫–∞—á–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {url}")
            response = self.session.get(url, timeout=10, stream=True)
            logger.info(f"üì• –û—Ç–≤–µ—Ç: {response.status_code}")
            response.raise_for_status()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            content_type = response.headers.get('content-type', '').lower()
            logger.info(f"üì• Content-Type: {content_type}")
            if not content_type.startswith('image/'):
                logger.warning(f"URL –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {content_type}")
                return False
            
            # –°–∫–∞—á–∏–≤–∞–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
            with open(output_path, 'wb') as f:
                for chunk in response.iter_content(chunk_size=8192):
                    f.write(chunk)
            
            logger.info(f"üì• –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {output_path}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            return self._optimize_image(output_path)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è {url}: {e}")
            return False
    
    def _optimize_image(self, image_path: Path) -> bool:
        """–û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (–∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ PNG, –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞)."""
        try:
            with Image.open(image_path) as img:
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ RGBA –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç–∏
                if img.mode != 'RGBA':
                    img = img.convert('RGBA')
                
                # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä (–º–∞–∫—Å–∏–º—É–º 200x200)
                max_size = (200, 200)
                img.thumbnail(max_size, Image.Resampling.LANCZOS)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ PNG
                png_path = image_path.with_suffix('.png')
                img.save(png_path, 'PNG', optimize=True)
                
                # –£–¥–∞–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª –µ—Å–ª–∏ –æ–Ω –Ω–µ PNG
                if png_path != image_path:
                    image_path.unlink()
                
                logger.info(f"‚úÖ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {png_path.name}")
                return True
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ {image_path}: {e}")
            return False
    
    def _get_favicon_url(self, base_url: str) -> Optional[str]:
        """–ü–æ–ª—É—á–∞–µ—Ç URL —Ñ–∞–≤–∏–∫–æ–Ω–∞ —Å–∞–π—Ç–∞."""
        try:
            parsed = urlparse(base_url)
            base_domain = f"{parsed.scheme}://{parsed.netloc}"
            
            # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã —Ñ–∞–≤–∏–∫–æ–Ω–∞
            favicon_urls = [
                f"{base_domain}/favicon.ico",
                f"{base_domain}/favicon.png",
                f"{base_domain}/apple-touch-icon.png",
                f"{base_domain}/android-chrome-192x192.png"
            ]
            
            for favicon_url in favicon_urls:
                try:
                    response = self.session.head(favicon_url, timeout=5)
                    if response.status_code == 200:
                        return favicon_url
                except:
                    continue
            
            return None
            
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–≤–∏–∫–æ–Ω–∞ –¥–ª—è {base_url}: {e}")
            return None
    
    def _get_twitter_avatar(self, username: str) -> Optional[str]:
        """–ü–æ–ª—É—á–∞–µ—Ç URL –∞–≤–∞—Ç–∞—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Twitter/X —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –º–µ—Ç–æ–¥–∞–º–∏."""
        try:
            import json
            
            # –£–±–∏—Ä–∞–µ–º @ –µ—Å–ª–∏ –µ—Å—Ç—å
            username = username.lstrip('@')
            logger.info(f"üê¶ –ò—â–µ–º –∞–≤–∞—Ç–∞—Ä –¥–ª—è @{username}")
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞–∑–Ω—ã–µ –º–µ—Ç–æ–¥—ã –ø–æ–ª—É—á–µ–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–æ–∫
            avatar_urls = []
            
            # –ú–µ—Ç–æ–¥ 1: Twitter Syndication API (—Å–∞–º—ã–π –Ω–∞–¥–µ–∂–Ω—ã–π)
            try:
                user_id_url = f"https://cdn.syndication.twimg.com/timeline/profile?screen_name={username}"
                logger.info(f"üîç –ü—Ä–æ–±—É–µ–º Syndication API: {user_id_url}")
                response = self.session.get(user_id_url, timeout=10)
                if response.status_code == 200:
                    try:
                        data = response.json()
                        if 'user' in data and 'profile_image_url' in data['user']:
                            avatar_url = data['user']['profile_image_url']
                            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∞–≤–∞—Ç–∞—Ä–∞
                            if '_normal' in avatar_url:
                                avatar_url = avatar_url.replace('_normal', '_400x400')
                            avatar_urls.append(avatar_url)
                            logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω –∞–≤–∞—Ç–∞—Ä —á–µ—Ä–µ–∑ Syndication API: {avatar_url}")
                    except json.JSONDecodeError:
                        logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å JSON –æ—Ç–≤–µ—Ç")
            except Exception as e:
                logger.warning(f"‚ùå –û—à–∏–±–∫–∞ Syndication API: {e}")
            
            # –ú–µ—Ç–æ–¥ 2: Unavatar.io (–≤–Ω–µ—à–Ω–∏–π —Å–µ—Ä–≤–∏—Å)
            if not avatar_urls:
                try:
                    api_url = f"https://unavatar.io/twitter/{username}"
                    logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º Unavatar API: {api_url}")
                    response = self.session.head(api_url, timeout=5)
                    if response.status_code in [200, 301, 302]:
                        avatar_urls.append(api_url)
                        logger.info(f"‚úÖ Unavatar API –¥–æ—Å—Ç—É–ø–µ–Ω: {api_url}")
                except Exception as e:
                    logger.warning(f"‚ùå –û—à–∏–±–∫–∞ Unavatar API: {e}")
            
            # –ú–µ—Ç–æ–¥ 3: –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –≤–Ω–µ—à–Ω–∏–µ —Å–µ—Ä–≤–∏—Å—ã
            if not avatar_urls:
                alternative_services = [
                    f"https://unavatar.io/{username}",
                    f"https://api.dicebear.com/7.x/avataaars/png?seed={username}",
                    f"https://ui-avatars.com/api/?name={username}&background=random&size=200&format=png"
                ]
                
                for service_url in alternative_services:
                    try:
                        response = self.session.head(service_url, timeout=5)
                        if response.status_code in [200, 301, 302]:
                            avatar_urls.append(service_url)
                            logger.info(f"‚úÖ –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–æ—Å—Ç—É–ø–µ–Ω: {service_url}")
                            break
                    except:
                        continue
            
            # –ú–µ—Ç–æ–¥ 4: GitHub fallback (–µ—Å–ª–∏ username —Å–æ–≤–ø–∞–¥–∞–µ—Ç)
            if not avatar_urls:
                try:
                    github_url = f"https://github.com/{username}.png"
                    response = self.session.head(github_url, timeout=5)
                    if response.status_code == 200:
                        avatar_urls.append(github_url)
                        logger.info(f"‚úÖ GitHub –∞–≤–∞—Ç–∞—Ä –¥–æ—Å—Ç—É–ø–µ–Ω: {github_url}")
                except:
                    pass
            
            # –ú–µ—Ç–æ–¥ 5: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞–≤–∞—Ç–∞—Ä–∞ –∫–∞–∫ –ø–æ—Å–ª–µ–¥–Ω–∏–π resort
            if not avatar_urls:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∞–≤–∞—Ç–∞—Ä–∫—É –¥–ª—è @{username}, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞–≤–∞—Ç–∞—Ä")
                avatar_urls = [
                    f"https://api.dicebear.com/7.x/avataaars/svg?seed={username}",
                    f"https://ui-avatars.com/api/?name={username}&background=random&size=200&format=png&color=fff"
                ]
            
            # –ü—Ä–æ–±—É–µ–º —Å–∫–∞—á–∞—Ç—å –ø–µ—Ä–≤—É—é –¥–æ—Å—Ç—É–ø–Ω—É—é –∞–≤–∞—Ç–∞—Ä–∫—É
            for i, avatar_url in enumerate(avatar_urls):
                try:
                    logger.info(f"üîÑ –ü—Ä–æ–±—É–µ–º URL {i+1}: {avatar_url}")
                    response = self.session.head(avatar_url, timeout=5)
                    if response.status_code in [200, 301, 302]:
                        logger.info(f"üê¶ –ù–∞–π–¥–µ–Ω–∞ –∞–≤–∞—Ç–∞—Ä–∫–∞ –¥–ª—è @{username}: {avatar_url}")
                        return avatar_url
                except Exception as e:
                    logger.warning(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ URL {i+1}: {e}")
                    continue
            
            logger.warning(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∞–≤–∞—Ç–∞—Ä–∫—É –¥–ª—è @{username}")
            return None
            
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∞ Twitter –¥–ª—è @{username}: {e}")
            return None
    
    def get_logo_path(self, url: str, source_info: Dict[str, Any]) -> Optional[str]:
        """–ü–æ–ª—É—á–∞–µ—Ç –ø—É—Ç—å –∫ –ª–æ–≥–æ—Ç–∏–ø—É, —Å–∫–∞—á–∏–≤–∞—è –µ–≥–æ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏."""
        cache_key = self._get_cache_key(url)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        if cache_key in self.cache:
            cached_path = Path(self.cache[cache_key])
            if cached_path.exists():
                return str(cached_path)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—é —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
        logo_path = None
        
        if 'twitter.com' in url or 'x.com' in url:
            logo_path = self._download_twitter_avatar(url)
        elif 'instagram.com' in url:
            logo_path = self._download_instagram_avatar(url)
        else:
            logo_path = self._download_website_logo(url, source_info)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
        if logo_path:
            self.cache[cache_key] = logo_path
            self._save_cache()
        
        return logo_path
    
    def _download_twitter_avatar(self, url: str) -> Optional[str]:
        """–°–∫–∞—á–∏–≤–∞–µ—Ç –∞–≤–∞—Ç–∞—Ä –∏–∑ Twitter/X –ø–æ—Å—Ç–∞."""
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º username –∏–∑ URL
            import re
            username_match = re.search(r'(?:twitter\.com|x\.com)/([^/]+)', url)
            if not username_match:
                logger.warning(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å username –∏–∑ URL: {url}")
                return None
            
            username = username_match.group(1)
            logger.info(f"üê¶ –ò–∑–≤–ª–µ—á–µ–Ω username: @{username}")
            avatar_url = self._get_twitter_avatar(username)
            
            if avatar_url:
                logger.info(f"üê¶ –ù–∞–π–¥–µ–Ω URL –∞–≤–∞—Ç–∞—Ä–∫–∏: {avatar_url}")
                output_path = self.logos_dir / f"twitter_{username}.png"
                if self._download_image(avatar_url, output_path):
                    logger.info(f"üì± –°–∫–∞—á–∞–Ω –∞–≤–∞—Ç–∞—Ä @{username}: {output_path.name}")
                    return str(output_path)
                else:
                    logger.warning(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –∞–≤–∞—Ç–∞—Ä–∫—É: {avatar_url}")
            else:
                logger.warning(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ URL –∞–≤–∞—Ç–∞—Ä–∫–∏ –¥–ª—è @{username}")
            
            return None
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è Twitter –∞–≤–∞—Ç–∞—Ä–∞: {e}")
            return None
    
    def _download_instagram_avatar(self, url: str) -> Optional[str]:
        """–°–∫–∞—á–∏–≤–∞–µ—Ç –∞–≤–∞—Ç–∞—Ä –∏–∑ Instagram –ø–æ—Å—Ç–∞."""
        # –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ Twitter, –Ω–æ –¥–ª—è Instagram
        # –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö API
        logger.info("Instagram –∞–≤–∞—Ç–∞—Ä—ã –ø–æ–∫–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è")
        return None
    
    def _download_website_logo(self, url: str, source_info: Dict[str, Any]) -> Optional[str]:
        """–°–∫–∞—á–∏–≤–∞–µ—Ç –ª–æ–≥–æ—Ç–∏–ø –≤–µ–±-—Å–∞–π—Ç–∞."""
        try:
            parsed = urlparse(url)
            domain = parsed.netloc.lower()
            if domain.startswith('www.'):
                domain = domain[4:]
            
            # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Ñ–∞–≤–∏–∫–æ–Ω
            favicon_url = self._get_favicon_url(url)
            if favicon_url:
                output_path = self.logos_dir / f"favicon_{domain.replace('.', '_')}.png"
                if self._download_image(favicon_url, output_path):
                    logger.info(f"üåê –°–∫–∞—á–∞–Ω —Ñ–∞–≤–∏–∫–æ–Ω {domain}: {output_path.name}")
                    return str(output_path)
            
            return None
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –ª–æ–≥–æ—Ç–∏–ø–∞ —Å–∞–π—Ç–∞: {e}")
            return None
    
    def cleanup_cache(self, max_age_days: int = 30):
        """–û—á–∏—â–∞–µ—Ç —Å—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã –∏–∑ –∫—ç—à–∞."""
        try:
            import time
            current_time = time.time()
            max_age_seconds = max_age_days * 24 * 60 * 60
            
            removed_count = 0
            for file_path in self.logos_dir.glob('*.png'):
                if file_path.stat().st_mtime < current_time - max_age_seconds:
                    file_path.unlink()
                    removed_count += 1
            
            if removed_count > 0:
                logger.info(f"üßπ –û—á–∏—â–µ–Ω–æ {removed_count} —Å—Ç–∞—Ä—ã—Ö –ª–æ–≥–æ—Ç–∏–ø–æ–≤")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞: {e}")
