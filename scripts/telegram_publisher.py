#!/usr/bin/env python3
"""
Telegram Publisher –¥–ª—è —Å–∏—Å—Ç–µ–º—ã shorts_news
–ü—É–±–ª–∏–∫—É–µ—Ç –≥–æ—Ç–æ–≤—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –≤ Telegram –∫–∞–Ω–∞–ª
"""

import os
import sys
import logging
import asyncio
from typing import Dict, List, Optional, Any
import yaml
from pathlib import Path

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—É—Ç–∏ –∫ –º–æ–¥—É–ª—è–º
sys.path.append(os.path.dirname(__file__))

from telegram import Bot
from telegram.error import TelegramError

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class TelegramPublisher:
    """–ö–ª–∞—Å—Å –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –≤ Telegram –∫–∞–Ω–∞–ª"""

    def __init__(self, config_path: str):
        self.config = self._load_config(config_path)
        self.publish_config = self.config['telegram_publish']

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω–∞ –ª–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏—è
        if not self.publish_config.get('enabled', True):
            logger.info("üì¢ Telegram –ø—É–±–ª–∏–∫–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
            self.bot = None
            return

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        self.bot_token = self.publish_config['bot_token']
        self.channel = self.publish_config['channel']
        self.channel_id = self.publish_config.get('channel_id', '')

        try:
            self.bot = Bot(token=self.bot_token)
            logger.info(f"üì¢ Telegram Publisher –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è –∫–∞–Ω–∞–ª–∞ {self.channel}")

            # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω channel_id, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
            if self.channel_id:
                self.target_chat = self.channel_id
                logger.info(f"üì¢ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —á–∏—Å–ª–æ–≤–æ–π ID –∫–∞–Ω–∞–ª–∞: {self.channel_id}")
            else:
                self.target_chat = self.channel
                logger.info(f"üì¢ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è username –∫–∞–Ω–∞–ª–∞: {self.channel}")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram Publisher: {e}")
            self.bot = None

    def _load_config(self, config_path: str) -> Dict:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        with open(config_path, 'r', encoding='utf-8') as f:
            return yaml.safe_load(f)

    def _truncate_caption(self, text: str, max_length: int = 1024) -> str:
        """–û–±—Ä–µ–∑–∞–µ—Ç —Ç–µ–∫—Å—Ç –¥–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –¥–ª–∏–Ω—ã –¥–ª—è caption"""
        if len(text) <= max_length:
            return text

        # –ò—â–µ–º –ø–æ–¥—Ö–æ–¥—è—â–µ–µ –º–µ—Å—Ç–æ –¥–ª—è –æ–±—Ä–µ–∑–∞–Ω–∏—è
        truncated = text[:max_length-3]
        last_space = truncated.rfind(' ')
        if last_space > max_length * 0.8:  # –ï—Å–ª–∏ –ø—Ä–æ–±–µ–ª –Ω–∞–π–¥–µ–Ω –Ω–µ —Å–ª–∏—à–∫–æ–º –±–ª–∏–∑–∫–æ –∫ –Ω–∞—á–∞–ª—É
            truncated = truncated[:last_space]

        return truncated + "..."

    async def publish_news(self, news_data: Dict) -> bool:
        """–ü—É–±–ª–∏–∫—É–µ—Ç –Ω–æ–≤–æ—Å—Ç—å –≤ Telegram –∫–∞–Ω–∞–ª"""
        if not self.bot:
            logger.warning("‚ö†Ô∏è Telegram Publisher –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return False

        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º caption –¥–ª—è –ø–æ—Å—Ç–∞
            title = news_data.get('title', '')
            description = news_data.get('short_text', '') or news_data.get('description', '')
            source = news_data.get('source', '')
            published_date = news_data.get('published', '')

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
            if published_date:
                try:
                    from datetime import datetime
                    if isinstance(published_date, str):
                        dt = datetime.fromisoformat(published_date.replace('Z', '+00:00'))
                        date_str = dt.strftime('%d.%m.%Y %H:%M')
                    else:
                        date_str = str(published_date)
                except:
                    date_str = str(published_date)
            else:
                date_str = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

            # –°–æ–∑–¥–∞–µ–º caption
            caption_parts = []
            if title:
                caption_parts.append(f"üì∞ {title}")
            if description:
                caption_parts.append(f"\n{description}")
            if source:
                caption_parts.append(f"\nüìç –ò—Å—Ç–æ—á–Ω–∏–∫: {source}")
            if date_str:
                caption_parts.append(f"üïê –î–∞—Ç–∞: {date_str}")

            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ñ–∞–∫—Ç–æ–≤, –µ—Å–ª–∏ –µ—Å—Ç—å
            fact_check = news_data.get('fact_verification', {})
            if fact_check and fact_check.get('verification_status') != 'skipped':
                accuracy = fact_check.get('accuracy_score', 0)
                status = fact_check.get('verification_status', 'unknown')
                issues = fact_check.get('issues_found', [])

                if accuracy < 0.8 or issues:
                    caption_parts.append("\n‚ö†Ô∏è –§–∞–∫—Ç—á–µ–∫–∏–Ω–≥:")
                    caption_parts.append(f"   –¢–æ—á–Ω–æ—Å—Ç—å: {accuracy:.1%}")
                    caption_parts.append(f"   –°—Ç–∞—Ç—É—Å: {status}")
                    if issues:
                        caption_parts.append(f"   –ó–∞–º–µ—á–∞–Ω–∏—è: {len(issues)}")

            caption = '\n'.join(caption_parts)
            caption = self._truncate_caption(caption)

            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–µ—Ä–µ–≥—Ä—É–∑–∫–∏ API
            import asyncio
            await asyncio.sleep(10)  # 10 —Å–µ–∫—É–Ω–¥ –∑–∞–¥–µ—Ä–∂–∫–∏ –º–µ–∂–¥—É –ø—É–±–ª–∏–∫–∞—Ü–∏—è–º–∏ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è Pool timeout

                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤–∏–¥–µ–æ —Ñ–∞–π–ª
            video_path = news_data.get('video_path')
            if video_path and os.path.exists(video_path) and self.publish_config.get('send_video', True):
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ
                logger.info(f"üé¨ –ü—É–±–ª–∏–∫—É–µ–º –≤–∏–¥–µ–æ: {os.path.basename(video_path)}")
                # –ü–æ–ø—ã—Ç–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∏–¥–µ–æ —Å retry –ª–æ–≥–∏–∫–æ–π
                max_retries = 3
                for attempt in range(max_retries):
                    try:
                        with open(video_path, 'rb') as video_file:
                            await self.bot.send_video(
                                chat_id=self.target_chat,
                                video=video_file,
                                caption=caption[:1024],  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ Telegram
                                supports_streaming=True,
                                read_timeout=120,  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç —á—Ç–µ–Ω–∏—è
                                write_timeout=120,  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –∑–∞–ø–∏—Å–∏
                                connect_timeout=60,  # –¢–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
                                pool_timeout=60  # –¢–∞–π–º–∞—É—Ç –ø—É–ª–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
                            )
                        logger.info("‚úÖ –í–∏–¥–µ–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ")
                        return True
                    except Exception as e:
                        logger.warning(f"‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries} –Ω–µ —É–¥–∞–ª–∞—Å—å: {e}")
                        if attempt < max_retries - 1:
                            await asyncio.sleep(15)  # –ñ–¥–µ–º 15 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º
                        else:
                            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤–∏–¥–µ–æ –ø–æ—Å–ª–µ {max_retries} –ø–æ–ø—ã—Ç–æ–∫: {e}")
                            # –ï—Å–ª–∏ –≤–∏–¥–µ–æ –Ω–µ —É–¥–∞–ª–æ—Å—å, –ø–æ–ø—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç
                            logger.info("üîÑ –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞ –≤–º–µ—Å—Ç–æ –≤–∏–¥–µ–æ")
                            return await self._publish_text_fallback(caption)

            # –ï—Å–ª–∏ –≤–∏–¥–µ–æ –Ω–µ—Ç –∏–ª–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏—è –≤–∏–¥–µ–æ –æ—Ç–∫–ª—é—á–µ–Ω–∞
            if self.publish_config.get('send_text', True):
                logger.info("üìù –ü—É–±–ª–∏–∫—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤—É—é –Ω–æ–≤–æ—Å—Ç—å")
                return await self._publish_text_fallback(caption)

            logger.warning("‚ö†Ô∏è –ù–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏")
            return False

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            images = news_data.get('images', [])
            if images and self.publish_config.get('send_images', True):
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º
                image_path = images[0]
                if os.path.exists(image_path):
                    logger.info(f"üì¢ –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {os.path.basename(image_path)}")
                    with open(image_path, 'rb') as photo_file:
                        await self.bot.send_photo(
                            chat_id=self.target_chat,
                            photo=photo_file,
                            caption=caption
                        )
                    logger.info("‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ")
                    return True

            # –ï—Å–ª–∏ –Ω–µ—Ç –≤–∏–¥–µ–æ –∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
            if self.publish_config.get('send_text', True) and caption.strip():
                logger.info("üì¢ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞")
                await self.bot.send_message(
                    chat_id=self.target_chat,
                    text=caption,
                    disable_web_page_preview=False
                )
                logger.info("‚úÖ –¢–µ–∫—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω")
                return True

            logger.warning("‚ö†Ô∏è –ù–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏")
            return False

        except TelegramError as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ Telegram API: {e}")
            return False
        except Exception as e:
            logger.error(f"Error publishing news: {e}")
            return False

    async def _publish_text_fallback(self, text: str) -> bool:
        """–ü—É–±–ª–∏–∫—É–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ fallback"""
        try:
            # –î–æ–±–∞–≤–ª—è–µ–º emoji –¥–ª—è –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏—è —á—Ç–æ —ç—Ç–æ fallback
            fallback_text = f"üìÑ –¢–ï–ö–°–¢–û–í–ê–Ø –í–ï–†–°–ò–Ø\n\n{text[:4000]}"  # –û—Å—Ç–∞–≤–ª—è–µ–º –º–µ—Å—Ç–æ –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞

            await self.bot.send_message(
                chat_id=self.target_chat,
                text=fallback_text,
                disable_web_page_preview=False
            )
            logger.info("üìù –¢–µ–∫—Å—Ç–æ–≤–∞—è –Ω–æ–≤–æ—Å—Ç—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞: {e}")
            return False

    async def publish_status_update(self, message: str) -> bool:
        """–ü—É–±–ª–∏–∫—É–µ—Ç —Å—Ç–∞—Ç—É—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª"""
        if not self.bot:
            return False

        try:
            await self.bot.send_message(
                chat_id=self.target_chat,
                text=f"ü§ñ {message}",
                disable_notification=True
            )
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ç—É—Å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return False

    def is_available(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Telegram Publisher"""
        return self.bot is not None and self.publish_config.get('enabled', True)

async def test_publisher():
    """–¢–µ—Å—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã publisher"""
    config_path = os.path.join(os.path.dirname(__file__), '..', 'config', 'config.yaml')

    publisher = TelegramPublisher(config_path)

    if not publisher.is_available():
        print("‚ùå Publisher –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        return

    # –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    test_message = "üöÄ –¢–µ—Å—Ç–æ–≤–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è –æ—Ç Shorts News System"
    result = await publisher.publish_status_update(test_message)

    if result:
        print("‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
    else:
        print("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è")

if __name__ == "__main__":
    asyncio.run(test_publisher())
