#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ—Å—Ç–∞ @Zakka_Jacob
"""

import logging
import sys
import yaml
from pathlib import Path

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(sys.stdout),
        logging.FileHandler('zakka_full_cycle_test.log', encoding='utf-8')
    ]
)

logger = logging.getLogger(__name__)

def test_zakka_full_cycle():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ—Å—Ç–∞ @Zakka_Jacob"""
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
    sys.path.insert(0, str(Path(__file__).parent))
    
    try:
        from engines.twitter.twitter_engine import TwitterEngine
        from engines.twitter.twitter_media_manager import TwitterMediaManager
        
        logger.info("–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ—Å—Ç–∞ @Zakka_Jacob...")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        config_path = "config/config.yaml"
        if not Path(config_path).exists():
            logger.error(f"–§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: {config_path}")
            return None
            
        with open(config_path, 'r', encoding='utf-8') as f:
            config = yaml.safe_load(f)
        
        # URL –ø–æ—Å—Ç–∞
        test_url = "https://x.com/Zakka_Jacob/status/1969220499918991847"
        
        # –®–∞–≥ 1: –ü–∞—Ä—Å–∏–Ω–≥ –ø–æ—Å—Ç–∞
        logger.info("üîç –®–∞–≥ 1: –ü–∞—Ä—Å–∏–Ω–≥ Twitter –ø–æ—Å—Ç–∞...")
        twitter_engine = TwitterEngine(config)
        news_data = twitter_engine.parse_url(test_url)
        
        if not news_data or not news_data.get('title'):
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –ø–æ—Å—Ç")
            return False
        
        logger.info(f"‚úÖ –ü–æ—Å—Ç —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω: {news_data['title'][:50]}...")
        logger.info(f"üë§ Username: {news_data.get('username', '–ù–ï–¢')}")
        logger.info(f"üñºÔ∏è Avatar URL: {news_data.get('avatar_url', '–ù–ï–¢')}")
        
        # –®–∞–≥ 2: –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–¥–∏–∞
        logger.info("üì∏ –®–∞–≥ 2: –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–¥–∏–∞...")
        twitter_media_manager = TwitterMediaManager(config)
        media_result = twitter_media_manager.process_news_media(news_data)
        
        logger.info(f"‚úÖ –ú–µ–¥–∏–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {media_result}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∞–≤–∞—Ç–∞—Ä–∫–∞ —Å–∫–∞—á–∞–ª–∞—Å—å
        avatar_path = media_result.get('avatar_path')
        if avatar_path and Path(avatar_path).exists():
            logger.info(f"‚úÖ –ê–≤–∞—Ç–∞—Ä–∫–∞ –Ω–∞–π–¥–µ–Ω–∞: {avatar_path}")
            file_size = Path(avatar_path).stat().st_size
            logger.info(f"‚úÖ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {file_size} –±–∞–π—Ç")
            return True
        else:
            logger.warning(f"‚ö†Ô∏è –ê–≤–∞—Ç–∞—Ä–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {avatar_path}")
            return False
        
    except ImportError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        return None
    except Exception as e:
        logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        logger.error(f"Traceback: {traceback.format_exc()}")
        return None

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    logger.info("–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ—Å—Ç–∞ @Zakka_Jacob")
    logger.info("=" * 70)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
    result = test_zakka_full_cycle()
    
    if result:
        logger.info("\n‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        logger.info("–ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ—Å—Ç–∞ @Zakka_Jacob —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    elif result is False:
        logger.error("\n‚ùå –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —Å –æ—à–∏–±–∫–æ–π")
        logger.error("–ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ—Å—Ç–∞ @Zakka_Jacob –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
    else:
        logger.error("–¢–µ—Å—Ç –Ω–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å")

if __name__ == "__main__":
    main()
