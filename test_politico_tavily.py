#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π –ø–∞—Ä—Å–µ—Ä –¥–ª—è Politico —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Tavily API
–û–±—Ö–æ–¥–∏—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∫—É —á–µ—Ä–µ–∑ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–∏—Å–∫ –Ω–æ–≤–æ—Å—Ç–µ–π
"""

import requests
import logging
import json
import os
from datetime import datetime
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv('config/.env')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class PoliticoTavilyParser:
    """–ü–∞—Ä—Å–µ—Ä Politico —á–µ—Ä–µ–∑ Tavily API"""
    
    def __init__(self, api_key: str = None):
        self.api_key = api_key or os.getenv('TAVILY_API_KEY', "YOUR_TAVILY_API_KEY_HERE")
        self.base_url = "https://api.tavily.com"
    
    def search_politico_article(self, url: str):
        """–ü–æ–∏—Å–∫ —Å—Ç–∞—Ç—å–∏ Politico —á–µ—Ä–µ–∑ Tavily"""
        try:
            logger.info(f"üîç –ü–æ–∏—Å–∫ —á–µ—Ä–µ–∑ Tavily: {url}")
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–∑ URL
            keywords = self._extract_keywords_from_url(url)
            
            # –ü–æ–∏—Å–∫ —á–µ—Ä–µ–∑ Tavily
            search_result = self._search_tavily(keywords)
            
            if search_result:
                # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
                full_content = self._get_full_content(search_result.get('url'))
                
                if full_content:
                    return {
                        'success': True,
                        'url': url,
                        'title': full_content.get('title', search_result.get('title', '–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞')),
                        'description': full_content.get('content', search_result.get('content', '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è')),
                        'source': 'Politico (Tavily)',
                        'published': search_result.get('published_date', datetime.now().isoformat()),
                        'images': search_result.get('images', []),
                        'content_type': 'news_article',
                        'parsed_with': 'tavily'
                    }
                else:
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø–æ–∏—Å–∫–∞
                    return {
                        'success': True,
                        'url': url,
                        'title': search_result.get('title', '–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞'),
                        'description': search_result.get('content', '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è'),
                        'source': 'Politico (Tavily Search)',
                        'published': search_result.get('published_date', datetime.now().isoformat()),
                        'images': search_result.get('images', []),
                        'content_type': 'news_article',
                        'parsed_with': 'tavily_search'
                    }
            
            return None
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ Tavily: {e}")
            return None
    
    def _extract_keywords_from_url(self, url: str):
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –∏–∑ URL"""
        # –ò–∑–≤–ª–µ–∫–∞–µ–º slug –∏–∑ URL
        path_parts = url.split('/')
        slug = path_parts[-1] if path_parts else ""
        
        # –£–±–∏—Ä–∞–µ–º ID –∏–∑ –∫–æ–Ω—Ü–∞
        slug = slug.split('-')[:-1] if '-' in slug else slug.split('-')
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
        keywords = ' '.join(slug)
        
        # –î–æ–±–∞–≤–ª—è–µ–º "site:politico.com" –¥–ª—è —Ç–æ—á–Ω–æ—Å—Ç–∏
        return f"site:politico.com {keywords}"
    
    def _search_tavily(self, query: str):
        """–ü–æ–∏—Å–∫ —á–µ—Ä–µ–∑ Tavily API"""
        try:
            url = f"{self.base_url}/search"
            
            payload = {
                "api_key": self.api_key,
                "query": query,
                "search_depth": "advanced",
                "include_answer": True,
                "include_raw_content": True,
                "max_results": 5,
                "include_domains": ["politico.com"],
                "exclude_domains": []
            }
            
            headers = {
                "Content-Type": "application/json"
            }
            
            response = requests.post(url, json=payload, headers=headers, timeout=30)
            response.raise_for_status()
            
            data = response.json()
            
            # –ò—â–µ–º –ª—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if 'results' in data and data['results']:
                return data['results'][0]  # –ü–µ—Ä–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            
            return None
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ API Tavily: {e}")
            return None
    
    def _get_full_content(self, url: str):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å—Ç–∞—Ç—å–∏"""
        try:
            if not url:
                return None
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º Tavily –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            content_url = f"{self.base_url}/content"
            
            payload = {
                "api_key": self.api_key,
                "url": url,
                "include_raw_content": True
            }
            
            headers = {
                "Content-Type": "application/json"
            }
            
            response = requests.post(content_url, json=payload, headers=headers, timeout=30)
            response.raise_for_status()
            
            data = response.json()
            
            if 'content' in data:
                return {
                    'title': data.get('title', ''),
                    'content': data.get('content', ''),
                    'url': url
                }
            
            return None
            
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {e}")
            return None


def test_tavily_parser():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Tavily –ø–∞—Ä—Å–µ—Ä–∞"""
    # –ü–æ–ª—É—á–∞–µ–º API –∫–ª—é—á –∏–∑ .env
    api_key = os.getenv('TAVILY_API_KEY')
    
    if not api_key:
        print("‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: TAVILY_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")
        print("üìù –î–æ–±–∞–≤—å—Ç–µ TAVILY_API_KEY=–≤–∞—à_–∫–ª—é—á –≤ config/.env")
        print("üîó –ü–æ–ª—É—á–∏—Ç–µ –∫–ª—é—á –Ω–∞: https://tavily.com/")
        return None
    
    parser = PoliticoTavilyParser(api_key)
    
    # –¢–µ—Å—Ç–æ–≤–∞—è —Å—Å—ã–ª–∫–∞
    test_url = "https://www.politico.com/news/2025/09/16/cruz-says-first-amendment-absolutely-protects-hate-speech-in-wake-of-charlie-kirk-killing-00566448"
    
    print(f"üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º Tavily –ø–∞—Ä—Å–µ—Ä –¥–ª—è Politico")
    print(f"üì∞ URL: {test_url}")
    print("=" * 80)
    
    result = parser.search_politico_article(test_url)
    
    if result:
        print("‚úÖ –£–°–ü–ï–•!")
        print(f"Title: {result['title']}")
        print(f"Description length: {len(result['description'])}")
        print(f"Description preview: {result['description'][:300]}...")
        print(f"Source: {result['source']}")
        print(f"Parsed with: {result['parsed_with']}")
        print(f"Images: {len(result['images'])}")
    else:
        print("‚ùå –ù–ï –£–î–ê–õ–û–°–¨")
    
    return result


def test_tavily_without_key():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑ API –∫–ª—é—á–∞ (–¥–µ–º–æ)"""
    print("üß™ –î–µ–º–æ-—Ç–µ—Å—Ç Tavily –ø–∞—Ä—Å–µ—Ä–∞")
    print("üìù –î–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω—É–∂–µ–Ω API –∫–ª—é—á")
    print("üîó –ü–æ–ª—É—á–∏—Ç–µ –∫–ª—é—á –Ω–∞: https://tavily.com/")
    print("üí∞ Tavily –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø–ª–∞–Ω")
    print("=" * 80)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–∫ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å
    parser = PoliticoTavilyParser()
    
    test_url = "https://www.politico.com/news/2025/09/16/cruz-says-first-amendment-absolutely-protects-hate-speech-in-wake-of-charlie-kirk-killing-00566448"
    
    keywords = parser._extract_keywords_from_url(test_url)
    print(f"üîç –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞: {keywords}")
    print("‚úÖ Tavily –º–æ–∂–µ—Ç –Ω–∞–π—Ç–∏ –∏ –∏–∑–≤–ª–µ—á—å –∫–æ–Ω—Ç–µ–Ω—Ç –∏–∑ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–∞–π—Ç–æ–≤")


if __name__ == "__main__":
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ API –∫–ª—é—á–∞
    api_key = os.getenv('TAVILY_API_KEY')
    
    if api_key:
        print("üîë API –∫–ª—é—á Tavily –Ω–∞–π–¥–µ–Ω, –∑–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç...")
        test_tavily_parser()
    else:
        print("‚ö†Ô∏è  API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω, –∑–∞–ø—É—Å–∫–∞–µ–º –¥–µ–º–æ...")
        test_tavily_without_key()
