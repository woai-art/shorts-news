#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –ø–æ–ª–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ Brightcove –≤–∏–¥–µ–æ
"""

import sys
sys.path.append('scripts')
from web_parser import WebParser
from media_manager import MediaManager
import yaml
import logging

logging.basicConfig(level=logging.INFO)

def test_brightcove_integration():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é Brightcove –≤–∏–¥–µ–æ"""
    
    print("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é Brightcove –≤–∏–¥–µ–æ:")
    print("=" * 80)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞—Ä—Å–µ—Ä
    parser = WebParser('config/config.yaml')
    
    # URL —Å—Ç–∞—Ç—å–∏ —Å Brightcove –≤–∏–¥–µ–æ
    url = 'https://www.politico.com/news/2025/09/16/cruz-says-first-amendment-absolutely-protects-hate-speech-in-wake-of-charlie-kirk-killing-00566448'
    
    print(f"URL: {url}")
    print("=" * 80)
    
    # –ü–∞—Ä—Å–∏–º —Å—Ç–∞—Ç—å—é
    result = parser.parse_url(url)
    
    if result and result.get('success'):
        print(f"‚úÖ –°—Ç–∞—Ç—å—è —É—Å–ø–µ—à–Ω–æ —Å–ø–∞—Ä—Å–µ–Ω–∞")
        print(f"Title: {result.get('title')}")
        print(f"Source: {result.get('source')}")
        print(f"Parsed with: {result.get('parsed_with')}")
        print(f"Images: {len(result.get('images', []))}")
        print(f"Videos: {len(result.get('videos', []))}")
        
        if result.get('videos'):
            print(f"Video URLs: {result['videos']}")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ
            with open('config/config.yaml', 'r', encoding='utf-8') as f:
                media_config = yaml.safe_load(f)
            media_manager = MediaManager(media_config)
            
            for video_url in result['videos']:
                print(f"\nüé• –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ: {video_url}")
                print("-" * 50)
                
                # –°–∫–∞—á–∏–≤–∞–µ–º –≤–∏–¥–µ–æ
                video_path = media_manager._download_and_process_video(video_url, result.get('title', 'Test Video'))
                
                if video_path:
                    print(f"‚úÖ –í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω–æ: {video_path}")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
                    from pathlib import Path
                    file_size = Path(video_path).stat().st_size
                    print(f"–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {file_size} –±–∞–π—Ç ({file_size / 1024 / 1024:.1f} –ú–ë)")
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≤–∏–¥–µ–æ")
        else:
            print("‚ùå –í–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —Å—Ç–∞—Ç—å–µ")
    else:
        print("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—Ç–∞—Ç—å–∏")

if __name__ == "__main__":
    test_brightcove_integration()
