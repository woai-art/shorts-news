#!/usr/bin/env python3
"""
–ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç workflow —Å–∏—Å—Ç–µ–º—ã shorts_news
–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç
"""

import sys
import os
import time
import asyncio
sys.path.append('scripts')

def test_full_workflow():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ workflow"""
    print("üöÄ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–û–õ–ù–û–ì–û WORKFLOW")
    print("=" * 60)

    try:
        # 1. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –Ω–æ–≤–æ—Å—Ç—å
        print("1Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –Ω–æ–≤–æ—Å—Ç–∏...")
        from telegram_bot import NewsTelegramBot

        bot = NewsTelegramBot('config/config.yaml')
        timestamp = str(int(time.time()))

        test_news = {
            'url': f'https://www.cnn.com/politics/test-{timestamp}',
            'title': '–¢–µ—Å—Ç: –ë–∞–π–¥–µ–Ω –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è —Å –µ–≤—Ä–æ–ø–µ–π—Å–∫–∏–º–∏ –ª–∏–¥–µ—Ä–∞–º–∏',
            'description': '–ü—Ä–µ–∑–∏–¥–µ–Ω—Ç –°–®–ê –î–∂–æ –ë–∞–π–¥–µ–Ω –ø—Ä–æ–≤–µ–ª –≤—Å—Ç—Ä–µ—á—É —Å –ª–∏–¥–µ—Ä–∞–º–∏ –ï–≤—Ä–æ–ø–µ–π—Å–∫–æ–≥–æ –°–æ—é–∑–∞ –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞.',
            'source': 'CNN',
            'content_type': 'news'
        }

        news_id = bot._save_parsed_news(test_news, 123456789, 987654321)
        print(f"‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è –Ω–æ–≤–æ—Å—Ç—å —Å–æ–∑–¥–∞–Ω–∞ (ID: {news_id})")

        # 2. –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
        print("\n2Ô∏è‚É£ –ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–æ–≤–æ—Å—Ç–∏...")
        from main_orchestrator import ShortsNewsOrchestrator

        orchestrator = ShortsNewsOrchestrator('config/config.yaml')
        orchestrator.initialize_components()

        print("üé¨ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É...")
        orchestrator.run_single_cycle()

        print("\n‚úÖ –ü–û–õ–ù–´–ô WORKFLOW –ü–†–û–ô–î–ï–ù –£–°–ü–ï–®–ù–û!")
        print("üìä –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–∞–Ω–∞–ª @tubepush_bot –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")

    except Exception as e:
        print(f"\n‚ùå –û–®–ò–ë–ö–ê: {e}")
        import traceback
        traceback.print_exc()

def test_telegram_only():
    """–¢–æ–ª—å–∫–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Telegram –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"""
    print("üì¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï TELEGRAM PUBLISHER")
    print("=" * 40)

    try:
        from telegram_publisher import TelegramPublisher
        import asyncio

        async def test():
            publisher = TelegramPublisher('config/config.yaml')

            if not publisher.is_available():
                print("‚ùå Publisher –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                return

            message = "üéØ –¢–µ—Å—Ç Shorts News Workflow - —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!"
            success = await publisher.publish_status_update(message)

            if success:
                print("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ @tubepush_bot")
            else:
                print("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è")

        asyncio.run(test())

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    print("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ—Å—Ç:")
    print("1 - –ü–æ–ª–Ω—ã–π workflow (—Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ + –æ–±—Ä–∞–±–æ—Ç–∫–∞)")
    print("2 - –¢–æ–ª—å–∫–æ Telegram –ø—É–±–ª–∏–∫–∞—Ü–∏—è")
    print("3 - –û–±–∞ —Ç–µ—Å—Ç–∞")

    choice = input("–í–∞—à –≤—ã–±–æ—Ä (1-3): ").strip()

    if choice in ['1', '3']:
        test_full_workflow()
        if choice == '3':
            print("\n" + "="*60)

    if choice in ['2', '3']:
        test_telegram_only()

    print("\n" + "="*60)
    print("üéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
