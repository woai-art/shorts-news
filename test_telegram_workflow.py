#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –Ω–æ–≤–æ–≥–æ Telegram workflow —Å–∏—Å—Ç–µ–º—ã shorts_news
"""

import os
import sys
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def test_web_parser():
    """–¢–µ—Å—Ç –≤–µ–±-–ø–∞—Ä—Å–µ—Ä–∞"""
    logger.info("üß™ –¢–µ—Å—Ç Web Parser...")

    try:
        from scripts.web_parser import WebParser

        parser = WebParser('config/config.yaml')

        # –¢–µ—Å—Ç–æ–≤—ã–µ URL
        test_urls = [
            "https://www.bbc.com/news/world-us-canada-67443258",
            "https://www.cnn.com/politics/",
        ]

        for url in test_urls:
            logger.info(f"–ü–∞—Ä—Å–∏–Ω–≥: {url}")
            result = parser.parse_url(url)

            if result.get('success'):
                logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {result.get('title', '–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞')[:50]}...")
                logger.info(f"   –ò—Å—Ç–æ—á–Ω–∏–∫: {result.get('source', '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω')}")
                logger.info(f"   –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {len(result.get('images', []))}")
            else:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å: {result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")

        parser.close()
        logger.info("‚úÖ Web Parser —Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω")
        return True

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ Web Parser: {e}")
        return False

def test_telegram_bot_db():
    """–¢–µ—Å—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö Telegram –±–æ—Ç–∞"""
    logger.info("üß™ –¢–µ—Å—Ç Telegram Bot Database...")

    try:
        from scripts.telegram_bot import NewsTelegramBot
        import time

        bot = NewsTelegramBot('config/config.yaml')

        # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π
        pending_news = bot.get_pending_news(limit=5)
        logger.info(f"–ù–∞–π–¥–µ–Ω–æ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π: {len(pending_news)}")

        # –¢–µ—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–∏ —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º URL
        timestamp = int(time.time())
        test_data = {
            'url': f'https://example.com/test-news-{timestamp}',
            'title': '–¢–µ—Å—Ç–æ–≤–∞—è –Ω–æ–≤–æ—Å—Ç—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏',
            'description': '–¢–µ—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏',
            'source': 'Test Source',
            'content_type': 'test'
        }

        news_id = bot._save_parsed_news(test_data, 123456789, 987654321)
        logger.info(f"–°–æ–∑–¥–∞–Ω–∞ —Ç–µ—Å—Ç–æ–≤–∞—è –Ω–æ–≤–æ—Å—Ç—å —Å ID: {news_id}")

        # –¢–µ—Å—Ç –æ—Ç–º–µ—Ç–∫–∏ –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–π
        bot.mark_news_processed(news_id)
        logger.info("–ù–æ–≤–æ—Å—Ç—å –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è")

        logger.info("‚úÖ Telegram Bot Database —Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω")
        return True

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ Telegram Bot Database: {e}")
        return False

def test_llm_with_grounding():
    """–¢–µ—Å—Ç LLM —Å Google Search Grounding"""
    logger.info("üß™ –¢–µ—Å—Ç LLM —Å Grounding...")

    try:
        from scripts.llm_processor import LLMProcessor

        processor = LLMProcessor('config/config.yaml')

        # –¢–µ—Å—Ç–æ–≤–∞—è –Ω–æ–≤–æ—Å—Ç—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–∞–∫—Ç–æ–≤
        test_news = {
            'id': 999,
            'title': '–ü—Ä–µ–∑–∏–¥–µ–Ω—Ç –ë–∞–π–¥–µ–Ω –≤—Å—Ç—Ä–µ—Ç–∏–ª—Å—è —Å –ª–∏–¥–µ—Ä–∞–º–∏ G7',
            'description': '–î–∂–æ –ë–∞–π–¥–µ–Ω –æ–±—Å—É–¥–∏–ª —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã —Å –ª–∏–¥–µ—Ä–∞–º–∏ —Å—Ç—Ä–∞–Ω G7 –Ω–∞ —Å–∞–º–º–∏—Ç–µ –≤ –ì–µ—Ä–º–∞–Ω–∏–∏.',
            'source': 'Reuters',
            'published': '2024-06-15T10:00:00Z',
            'category': '–ü–æ–ª–∏—Ç–∏–∫–∞'
        }

        logger.info("–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ—Å—Ç–∏ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Ñ–∞–∫—Ç–æ–≤...")
        result = processor.process_news_for_shorts(test_news)

        if result.get('status') == 'success':
            logger.info("‚úÖ LLM –æ–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–∞")
            logger.info(f"   Short text: {result.get('short_text', '')[:50]}...")
            logger.info(f"   Fact check score: {result.get('fact_verification', {}).get('accuracy_score', 'N/A')}")
        else:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ LLM –æ–±—Ä–∞–±–æ—Ç–∫–∏: {result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")

        logger.info("‚úÖ LLM Grounding —Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω")
        return True

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ LLM Grounding: {e}")
        return False

def test_orchestrator():
    """–¢–µ—Å—Ç –≥–ª–∞–≤–Ω–æ–≥–æ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    logger.info("üß™ –¢–µ—Å—Ç Orchestrator...")

    try:
        from scripts.main_orchestrator import ShortsNewsOrchestrator

        orchestrator = ShortsNewsOrchestrator('config/config.yaml')
        orchestrator.initialize_components()

        logger.info("‚úÖ Orchestrator –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞")
        return True

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ Orchestrator: {e}")
        return False

def run_all_tests():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Telegram Workflow")
    logger.info("=" * 60)

    tests = [
        ("Web Parser", test_web_parser),
        ("Telegram Bot DB", test_telegram_bot_db),
        ("LLM Grounding", test_llm_with_grounding),
        ("Orchestrator", test_orchestrator),
    ]

    results = []
    for test_name, test_func in tests:
        logger.info(f"\n{'='*40}")
        logger.info(f"–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞: {test_name}")
        logger.info('='*40)

        try:
            success = test_func()
            results.append((test_name, success))
        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ {test_name}: {e}")
            results.append((test_name, False))

    # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    logger.info("\n" + "=" * 60)
    logger.info("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    logger.info("=" * 60)

    successful_tests = 0
    total_tests = len(results)

    for test_name, success in results:
        status = "‚úÖ –ü–†–û–ô–î–ï–ù" if success else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        logger.info(f"{status}: {test_name}")

    successful_tests = sum(1 for _, success in results if success)

    logger.info("-" * 60)
    logger.info(f"–ò–¢–û–ì–û: {successful_tests}/{total_tests} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")

    if successful_tests == total_tests:
        logger.info("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´!")
        logger.info("‚úÖ Telegram Workflow –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
        return True
    else:
        logger.warning("‚ö†Ô∏è –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´")
        logger.info("üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏ API –∫–ª—é—á–∏")
        return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    import argparse

    parser = argparse.ArgumentParser(description='Test Telegram Workflow')
    parser.add_argument('--web-parser', action='store_true',
                       help='–¢–µ—Å—Ç —Ç–æ–ª—å–∫–æ Web Parser')
    parser.add_argument('--telegram-db', action='store_true',
                       help='–¢–µ—Å—Ç —Ç–æ–ª—å–∫–æ Telegram DB')
    parser.add_argument('--llm-grounding', action='store_true',
                       help='–¢–µ—Å—Ç —Ç–æ–ª—å–∫–æ LLM Grounding')
    parser.add_argument('--orchestrator', action='store_true',
                       help='–¢–µ—Å—Ç —Ç–æ–ª—å–∫–æ Orchestrator')
    parser.add_argument('--all', action='store_true',
                       help='–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤')

    args = parser.parse_args()

    # –ï—Å–ª–∏ –Ω–µ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤, –∑–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Ç–µ—Å—Ç—ã
    if not any([args.web_parser, args.telegram_db, args.llm_grounding, args.orchestrator, args.all]):
        args.all = True

    try:
        if args.all:
            success = run_all_tests()
        else:
            success = True
            if args.web_parser:
                success &= test_web_parser()
            if args.telegram_db:
                success &= test_telegram_bot_db()
            if args.llm_grounding:
                success &= test_llm_with_grounding()
            if args.orchestrator:
                success &= test_orchestrator()

        if success:
            logger.info("\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
            sys.exit(0)
        else:
            logger.error("\n‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –æ—à–∏–±–∫–∏ –≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏")
            sys.exit(1)

    except KeyboardInterrupt:
        logger.info("\nüëã –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(0)
    except Exception as e:
        logger.error(f"\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()
