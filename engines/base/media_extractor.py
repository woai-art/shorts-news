"""
Base class for media extraction from news sources
"""

from abc import ABC, abstractmethod
from typing import Dict, List, Any, Optional
import logging

logger = logging.getLogger(__name__)


class MediaExtractor(ABC):
    """
    –ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –º–µ–¥–∏–∞ —Ñ–∞–π–ª–æ–≤ –∏–∑ –Ω–æ–≤–æ—Å—Ç–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
    """
    
    def __init__(self, config: Dict[str, Any]):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–∑–≤–ª–µ–∫–∞—Ç–µ–ª—è –º–µ–¥–∏–∞
        
        Args:
            config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–∑ config.yaml
        """
        self.config = config
        self.max_images = config.get('max_images_per_news', 3)
        self.max_videos = config.get('max_videos_per_news', 1)
        self.max_image_size_mb = config.get('max_image_size_mb', 10)
        self.max_video_size_mb = config.get('max_video_size_mb', 100)
        self.max_video_duration_seconds = config.get('max_video_duration_seconds', 300)
    
    @abstractmethod
    def extract_images(self, url: str, content: Dict[str, Any]) -> List[str]:
        """
        –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        
        Args:
            url: –ò—Å—Ö–æ–¥–Ω—ã–π URL
            content: –ü–∞—Ä—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
            
        Returns:
            –°–ø–∏—Å–æ–∫ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        """
        pass
    
    @abstractmethod
    def extract_videos(self, url: str, content: Dict[str, Any]) -> List[str]:
        """
        –ò–∑–≤–ª–µ–∫–∞–µ—Ç –≤–∏–¥–µ–æ –∏–∑ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        
        Args:
            url: –ò—Å—Ö–æ–¥–Ω—ã–π URL
            content: –ü–∞—Ä—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
            
        Returns:
            –°–ø–∏—Å–æ–∫ URL –≤–∏–¥–µ–æ
        """
        pass
    
    def extract_media(self, url: str, content: Dict[str, Any]) -> Dict[str, List[str]]:
        """
        –ò–∑–≤–ª–µ–∫–∞–µ—Ç –≤—Å–µ –º–µ–¥–∏–∞ —Ñ–∞–π–ª—ã
        
        Args:
            url: –ò—Å—Ö–æ–¥–Ω—ã–π URL
            content: –ü–∞—Ä—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –º–µ–¥–∏–∞ —Ñ–∞–π–ª–∞–º–∏
        """
        try:
            images = self.extract_images(url, content)
            videos = self.extract_videos(url, content)
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ–¥–∏–∞
            images = images[:self.max_images]
            videos = videos[:self.max_videos]
            
            logger.info(f"üì∏ –ò–∑–≤–ª–µ—á–µ–Ω–æ {len(images)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, {len(videos)} –≤–∏–¥–µ–æ")
            
            return {
                'images': images,
                'videos': videos
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –º–µ–¥–∏–∞: {e}")
            return {'images': [], 'videos': []}
    
    def validate_image_url(self, url: str) -> bool:
        """
        –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        
        Args:
            url: URL –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
            
        Returns:
            True –µ—Å–ª–∏ URL –≤–∞–ª–∏–¥–Ω—ã–π
        """
        if not url or not isinstance(url, str):
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
        valid_extensions = ['.jpg', '.jpeg', '.png', '.webp', '.gif']
        url_lower = url.lower()
        
        if not any(ext in url_lower for ext in valid_extensions):
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ –ª–æ–≥–æ—Ç–∏–ø –∏–ª–∏ –∏–∫–æ–Ω–∫–∞
        excluded_keywords = ['logo', 'icon', 'avatar', 'profile', 'keyart']
        if any(keyword in url_lower for keyword in excluded_keywords):
            return False
        
        return True
    
    def validate_video_url(self, url: str) -> bool:
        """
        –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç URL –≤–∏–¥–µ–æ
        
        Args:
            url: URL –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
            
        Returns:
            True –µ—Å–ª–∏ URL –≤–∞–ª–∏–¥–Ω—ã–π
        """
        if not url or not isinstance(url, str):
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
        valid_extensions = ['.mp4', '.webm', '.avi', '.mov']
        url_lower = url.lower()
        
        if not any(ext in url_lower for ext in valid_extensions):
            return False
        
        return True
    
    def get_fallback_images(self, title: str) -> List[str]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç fallback –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–º–∞—Ç–∏–∫–∏
        
        Args:
            title: –ó–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–æ–≤–æ—Å—Ç–∏
            
        Returns:
            –°–ø–∏—Å–æ–∫ fallback URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        """
        # –ë–∞–∑–æ–≤–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è - –º–æ–∂–Ω–æ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤ –Ω–∞—Å–ª–µ–¥–Ω–∏–∫–∞—Ö
        return []
