"""
Registry for news source engines
"""

from typing import Dict, List, Optional, Type
from .base import SourceEngine
import logging

logger = logging.getLogger(__name__)


class EngineRegistry:
    """
    –†–µ–µ—Å—Ç—Ä –¥–≤–∏–∂–∫–æ–≤ –Ω–æ–≤–æ—Å—Ç–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
    
    –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±–∏—Ä–∞–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏–π –¥–≤–∏–∂–æ–∫ –¥–ª—è URL
    """
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–µ—Å—Ç—Ä–∞"""
        self.engines: Dict[str, Type[SourceEngine]] = {}
        self.engine_instances: Dict[str, SourceEngine] = {}
    
    def register_engine(self, name: str, engine_class: Type[SourceEngine]):
        """
        –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –¥–≤–∏–∂–æ–∫ –≤ —Ä–µ–µ—Å—Ç—Ä–µ
        
        Args:
            name: –ù–∞–∑–≤–∞–Ω–∏–µ –¥–≤–∏–∂–∫–∞
            engine_class: –ö–ª–∞—Å—Å –¥–≤–∏–∂–∫–∞
        """
        self.engines[name] = engine_class
        logger.info(f"‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –¥–≤–∏–∂–æ–∫: {name}")
    
    def create_engine(self, name: str, config: Dict) -> Optional[SourceEngine]:
        """
        –°–æ–∑–¥–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–≤–∏–∂–∫–∞
        
        Args:
            name: –ù–∞–∑–≤–∞–Ω–∏–µ –¥–≤–∏–∂–∫–∞
            config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
            
        Returns:
            –≠–∫–∑–µ–º–ø–ª—è—Ä –¥–≤–∏–∂–∫–∞ –∏–ª–∏ None
        """
        if name not in self.engines:
            logger.error(f"–î–≤–∏–∂–æ–∫ {name} –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
            return None
        
        try:
            engine = self.engines[name](config)
            self.engine_instances[name] = engine
            return engine
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–≤–∏–∂–∫–∞ {name}: {e}")
            return None
    
    def get_engine_for_url(self, url: str, config: Dict) -> Optional[SourceEngine]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏–π –¥–≤–∏–∂–æ–∫ –¥–ª—è URL
        
        Args:
            url: URL –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
            
        Returns:
            –ü–æ–¥—Ö–æ–¥—è—â–∏–π –¥–≤–∏–∂–æ–∫ –∏–ª–∏ None
        """
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã
        for name, engine in self.engine_instances.items():
            if engine.can_handle(url):
                logger.info(f"üéØ –í—ã–±—Ä–∞–Ω –¥–≤–∏–∂–æ–∫ {name} –¥–ª—è URL: {url[:50]}...")
                return engine
        
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã
        for name, engine_class in self.engines.items():
            try:
                engine = engine_class(config)
                if engine.can_handle(url):
                    self.engine_instances[name] = engine
                    logger.info(f"üéØ –°–æ–∑–¥–∞–Ω –∏ –≤—ã–±—Ä–∞–Ω –¥–≤–∏–∂–æ–∫ {name} –¥–ª—è URL: {url[:50]}...")
                    return engine
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–≤–∏–∂–∫–∞ {name}: {e}")
                continue
        
        logger.warning(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –ø–æ–¥—Ö–æ–¥—è—â–∏–π –¥–≤–∏–∂–æ–∫ –¥–ª—è URL: {url[:50]}...")
        return None
    
    def get_available_engines(self) -> List[str]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–≤–∏–∂–∫–æ–≤
        
        Returns:
            –°–ø–∏—Å–æ–∫ –Ω–∞–∑–≤–∞–Ω–∏–π –¥–≤–∏–∂–∫–æ–≤
        """
        return list(self.engines.keys())
    
    def get_engine_info(self, name: str) -> Optional[Dict]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–≤–∏–∂–∫–µ
        
        Args:
            name: –ù–∞–∑–≤–∞–Ω–∏–µ –¥–≤–∏–∂–∫–∞
            
        Returns:
            –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–≤–∏–∂–∫–µ –∏–ª–∏ None
        """
        if name in self.engine_instances:
            return self.engine_instances[name].get_engine_info()
        return None


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Ä–µ–µ—Å—Ç—Ä
registry = EngineRegistry()
