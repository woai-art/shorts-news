"""
Twitter Media Manager –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–µ–¥–∏–∞ –∏–∑ Twitter/X
"""

import logging
import re
from typing import Dict, List, Any
from pathlib import Path
from bs4 import BeautifulSoup

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –ø–æ–¥–∞–≤–ª–µ–Ω–∏—è –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π
try:
    from selenium_logging_config import configure_selenium_logging
    configure_selenium_logging()
except ImportError:
    pass
from scripts.media_manager import MediaManager
from scripts.video_preprocessor import VideoPreprocessor

logger = logging.getLogger(__name__)


class TwitterMediaManager(MediaManager):
    """–°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–µ–¥–∏–∞-–º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è Twitter"""
    
    def process_news_media(self, news_data: Dict[str, Any]) -> Dict[str, Any]:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –º–µ–¥–∏–∞ –¥–ª—è Twitter –Ω–æ–≤–æ—Å—Ç–µ–π
        
        Args:
            news_data: –î–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ –∏ –≤–∏–¥–µ–æ
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–µ–¥–∏–∞
        """
        logger.info("üê¶ –û–±—Ä–∞–±–æ—Ç–∫–∞ Twitter –º–µ–¥–∏–∞...")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –≤–∏–¥–µ–æ
        images = news_data.get('images', [])
        videos = news_data.get('videos', [])
        tweet_url = news_data.get('url', '')
        
        # –í Twitter –≤–∏–¥–µ–æ –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è –≤ images, —Ä–∞–∑–¥–µ–ª—è–µ–º –∏—Ö
        video_images = []
        regular_images = []
        
        for img in images:
            if any(ext in img.lower() for ext in ['.mp4', 'video', 'amplify_video']):
                video_images.append(img)
            else:
                regular_images.append(img)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–∫–∏
        images = regular_images
        # –î–æ–±–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ –∏–∑ images –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º videos
        videos = videos + video_images
        
        # –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º videos –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –ª–æ–∫–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        url_videos = []
        local_videos = []
        
        logger.info(f"üîç DEBUG: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º {len(videos)} –≤–∏–¥–µ–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤:")
        for i, vid in enumerate(videos):
            logger.info(f"  [{i}] {vid}")
            if vid.startswith('http'):
                url_videos.append(vid)
                logger.info(f"    ‚Üí URL –≤–∏–¥–µ–æ")
            elif vid.endswith(('.mp4', '.mov', '.avi', '.mkv')):
                local_videos.append(vid)
                logger.info(f"    ‚Üí –õ–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª")
            else:
                url_videos.append(vid)  # –û—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
                logger.info(f"    ‚Üí –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø, –¥–æ–±–∞–≤–ª—è–µ–º –∫–∞–∫ URL")
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º URL –≤–∏–¥–µ–æ –∏ –ª–æ–∫–∞–ª—å–Ω—ã–µ –≤–∏–¥–µ–æ
        videos = url_videos + local_videos
        logger.info(f"üîç DEBUG: –ò—Ç–æ–≥–æ –≤–∏–¥–µ–æ: {len(videos)} (URL: {len(url_videos)}, –ª–æ–∫–∞–ª—å–Ω—ã–µ: {len(local_videos)})")
        
        logger.info(f"üì∏ –ù–∞–π–¥–µ–Ω–æ {len(images)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, {len(videos)} –≤–∏–¥–µ–æ")
        
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è Twitter
        if images:
            filtered_images = self._filter_twitter_images(images)
            if filtered_images:
                images = filtered_images
                logger.info(f"‚úÖ –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ {len(images)} Twitter –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
            else:
                logger.warning("‚ùå Twitter: –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
                images = []
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –≤–∏–¥–µ–æ –¥–ª—è Twitter
        if videos:
            filtered_videos = self._filter_twitter_videos(videos)
            if filtered_videos:
                videos = filtered_videos
                logger.info(f"‚úÖ –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ {len(videos)} Twitter –≤–∏–¥–µ–æ")
            else:
                logger.warning("‚ùå Twitter: –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –≤–∏–¥–µ–æ")
                videos = []
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏
        news_data['images'] = images
        news_data['videos'] = videos
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        username = news_data.get('username', '')
        avatar_url = news_data.get('avatar_url', '')
        
        # –°–∫–∞—á–∏–≤–∞–µ–º –∞–≤–∞—Ç–∞—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è Twitter
        avatar_path = None
        if avatar_url:
            logger.info(f"üë§ –°–∫–∞—á–∏–≤–∞–µ–º –∞–≤–∞—Ç–∞—Ä –¥–ª—è @{username} –ø–æ URL: {avatar_url}")
            avatar_path = self._download_twitter_avatar(avatar_url, username)
            if avatar_path:
                logger.info(f"‚úÖ –ê–≤–∞—Ç–∞—Ä —Å–∫–∞—á–∞–Ω: {avatar_path}")
            else:
                logger.warning(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –∞–≤–∞—Ç–∞—Ä –¥–ª—è @{username}")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –º–µ–¥–∏–∞ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ –¥–ª—è Twitter
        result = self._process_twitter_media_directly(news_data, avatar_path)
        
        logger.info(f"üê¶ Twitter –º–µ–¥–∏–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: has_media={result.get('has_media', False)}")
        
        return result
    
    def _process_twitter_media_directly(self, news_data: Dict, avatar_path: str = None) -> Dict:
        """
        –ü—Ä—è–º–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–¥–∏–∞ –¥–ª—è Twitter –±–µ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–∞–∑–æ–≤–æ–≥–æ –∫–ª–∞—Å—Å–∞
        
        Args:
            news_data: –î–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–µ–¥–∏–∞
        """
        result = {
            'primary_image': None,
            'video_url': None,
            'thumbnail': None,
            'local_image_path': None,
            'local_video_path': None,
            'avatar_path': None,
            'has_media': False,
            'has_video': False,
            'has_images': False
        }
        
        try:
            images = news_data.get('images', [])
            videos = news_data.get('videos', [])
            username = news_data.get('username', '')
            avatar_url = news_data.get('avatar_url', '')

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            if images:
                image_url = images[0]
                logger.info(f"üñºÔ∏è –°–∫–∞—á–∏–≤–∞–µ–º Twitter –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {image_url[:50]}...")
                local_image_path = self._download_image_direct(image_url, news_data.get('title', 'Twitter Image'))
                if local_image_path:
                    result.update({
                        'primary_image': image_url,
                        'local_image_path': local_image_path,
                        'thumbnail': local_image_path,
                        'has_media': True,
                        'has_images': True
                    })
                    logger.info(f"‚úÖ Twitter –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–∫–∞—á–∞–Ω–æ: {local_image_path}")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–∏–¥–µ–æ - —Å–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã
            if videos:
                local_video_path = None
                tweet_url = news_data.get('url', '')
                
                # –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –≤–∏–¥–µ–æ —Ñ–∞–π–ª—ã
                for video_item in videos:
                    if video_item.endswith(('.mp4', '.mov', '.avi', '.mkv')):
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                        if Path(video_item).exists():
                            local_video_path = video_item
                            logger.info(f"üé¨ –ù–∞–π–¥–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ª–æ–∫–∞–ª—å–Ω—ã–π –≤–∏–¥–µ–æ —Ñ–∞–π–ª: {local_video_path}")
                            break
                
                # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                if local_video_path:
                    result.update({
                        'primary_video': local_video_path,
                        'local_video_path': local_video_path,
                        'has_media': True,
                        'has_videos': True
                    })
                    logger.info(f"‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ª–æ–∫–∞–ª—å–Ω—ã–π –≤–∏–¥–µ–æ —Ñ–∞–π–ª: {local_video_path}")
                
                # –ï—Å–ª–∏ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –Ω–µ—Ç, —Å–∫–∞—á–∏–≤–∞–µ–º
                if not local_video_path:
                    video_url = None
                    # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π URL –≤–∏–¥–µ–æ (–Ω–µ thumbnail)
                    for video_item in videos:
                        if video_item.startswith('http') and not any(thumb in video_item.lower() for thumb in ['thumb', 'preview', 'poster']):
                            video_url = video_item
                            break
                    
                    # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–π URL, –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π URL —ç–ª–µ–º–µ–Ω—Ç
                    if not video_url:
                        for video_item in videos:
                            if video_item.startswith('http'):
                                video_url = video_item
                                break
                    
                    if video_url:
                        # –î–ª—è Twitter –≤–∏–¥–µ–æ —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º yt-dlp —Å URL —Ç–≤–∏—Ç–∞
                        if tweet_url and ('twitter.com' in tweet_url or 'x.com' in tweet_url):
                            logger.info(f"üé¨ –°–∫–∞—á–∏–≤–∞–µ–º Twitter –≤–∏–¥–µ–æ —á–µ—Ä–µ–∑ yt-dlp: {tweet_url[:50]}...")
                            local_video_path = self._download_twitter_video_with_ytdlp(tweet_url, news_data.get('title', 'Twitter Video'))
                            
                            # –ï—Å–ª–∏ yt-dlp –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –ø—Ä–æ–±—É–µ–º Selenium —Å URL —Ç–≤–∏—Ç–∞
                            if not local_video_path:
                                logger.info(f"üîÑ yt-dlp –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –ø—Ä–æ–±—É–µ–º Selenium —Å URL —Ç–≤–∏—Ç–∞: {tweet_url[:50]}...")
                                local_video_path = self._download_twitter_video_selenium(tweet_url, news_data.get('title', 'Twitter Video'))
                        else:
                            logger.info(f"üé¨ –°–∫–∞—á–∏–≤–∞–µ–º Twitter –≤–∏–¥–µ–æ –Ω–∞–ø—Ä—è–º—É—é: {video_url[:50]}...")
                            local_video_path = self._download_twitter_video_direct(video_url, news_data.get('title', 'Twitter Video'))
                        
                        # –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, –ø—Ä–æ–±—É–µ–º –ø—Ä—è–º—É—é –∑–∞–≥—Ä—É–∑–∫—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ thumbnail
                        if not local_video_path and video_url and not any(thumb in video_url.lower() for thumb in ['thumb', 'preview', 'poster']):
                            local_video_path = self._download_twitter_video_direct(video_url, news_data.get('title', 'Twitter Video'))
                
                # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ, –ø—Ä–æ–±—É–µ–º —Å–∫–∞—á–∞—Ç—å –∏–∑ videos –º–∞—Å—Å–∏–≤–∞
                if not local_video_path and videos:
                    for video in videos:
                        if not any(thumb in video.lower() for thumb in ['thumb', 'preview', 'poster']):
                            logger.info(f"üîÑ –ü—Ä–æ–±—É–µ–º —Å–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ –∏–∑ videos –º–∞—Å—Å–∏–≤–∞: {video[:50]}...")
                            local_video_path = self._download_twitter_video_direct(video, news_data.get('title', 'Twitter Video'))
                            if local_video_path:
                                break
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º .part —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫–µ media/news
                if not local_video_path:
                    logger.info("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º .part —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫–µ media/news...")
                    part_files = list(self.media_dir.glob("*.part"))
                    if part_files:
                        # –ë–µ—Ä–µ–º —Å–∞–º—ã–π –Ω–æ–≤—ã–π .part —Ñ–∞–π–ª
                        latest_part = max(part_files, key=lambda x: x.stat().st_mtime)
                        logger.info(f"üîÑ –ù–∞–π–¥–µ–Ω .part —Ñ–∞–π–ª: {latest_part.name}")
                        
                        # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º .part –≤ .mp4
                        mp4_path = latest_part.with_suffix('')
                        try:
                            latest_part.rename(mp4_path)
                            logger.info(f"‚úÖ .part —Ñ–∞–π–ª –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω: {mp4_path.name}")
                            local_video_path = str(mp4_path)
                        except Exception as e:
                            logger.warning(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è .part —Ñ–∞–π–ª–∞: {e}")
                
                if local_video_path:
                    # –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ (–æ–±—Ä–µ–∑–∫–∞ –∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ GIF)
                    processed_video_path = self._preprocess_video(local_video_path)
                    
                    result.update({
                        'video_url': video_url if 'video_url' in locals() else None,
                        'local_video_path': processed_video_path or local_video_path,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –≤–∏–¥–µ–æ –∏–ª–∏ –æ—Ä–∏–≥–∏–Ω–∞–ª
                        'thumbnail': processed_video_path or local_video_path,
                        'has_media': True,
                        'has_video': True
                    })
                    logger.info(f"‚úÖ Twitter –≤–∏–¥–µ–æ —Å–∫–∞—á–∞–Ω–æ: {local_video_path}")
                    if processed_video_path:
                        logger.info(f"‚úÖ –í–∏–¥–µ–æ –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {processed_video_path}")
                else:
                    logger.warning("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å Twitter –≤–∏–¥–µ–æ")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∞–≤–∞—Ç–∞—Ä –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            logger.info(f"üîç DEBUG Avatar path: {avatar_path}")
            if avatar_path:
                result['avatar_path'] = avatar_path
                logger.info(f"üîç DEBUG Avatar added to result: {result.get('avatar_path')}")
            else:
                logger.warning("üîç DEBUG Avatar path is None, not adding to result")
            
            logger.info(f"üîç DEBUG Final result: {result}")
            return result
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ Twitter –º–µ–¥–∏–∞: {e}")
            return result
    
    def _download_image_direct(self, image_url: str, news_title: str) -> str:
        """
        –ü—Ä—è–º–æ–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –ø–æ–ø—ã—Ç–∫–∞–º–∏ –æ—á–∏—Å—Ç–∫–∏ URL
        """
        import requests
        from pathlib import Path

        logger.info(f"üì• –°–∫–∞—á–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {image_url[:80]}...")

        # List of URLs to try
        urls_to_try = [image_url]
        if 'pbs.twimg.com' in image_url:
            base_url = image_url.split('?')[0]
            # Add variations
            urls_to_try.append(f"{base_url}?format=jpg&name=large")
            urls_to_try.append(f"{base_url}?format=png&name=large")
            urls_to_try.append(base_url) # Try without any params

        # Remove duplicates
        urls_to_try = list(dict.fromkeys(urls_to_try))

        for i, url in enumerate(urls_to_try):
            try:
                logger.info(f"üîÑ –ü–æ–ø—ã—Ç–∫–∞ {i+1}/{len(urls_to_try)}: —Å–∫–∞—á–∏–≤–∞–µ–º {url[:80]}...")
                
                response = requests.get(url, stream=True, timeout=15)
                response.raise_for_status()
                
                safe_title = "".join(c for c in news_title if c.isalnum() or c in (' ', '-', '_')).rstrip()
                safe_title = safe_title[:50]
                
                # Determine file extension
                content_type = response.headers.get('content-type')
                if content_type and 'image' in content_type:
                    ext = content_type.split('/')[1].split(';')[0]
                    if ext not in ['jpeg', 'png', 'gif', 'webp']:
                        ext = 'jpg'
                else:
                    ext = 'jpg'

                output_path = self.media_dir / f"{safe_title}_{hash(url) % 1000000}.{ext}"

                with open(output_path, 'wb') as f:
                    for chunk in response.iter_content(chunk_size=8192):
                        f.write(chunk)
                
                file_size = output_path.stat().st_size
                if file_size < 2048:  # Increase threshold to 2KB
                    output_path.unlink()
                    raise ValueError(f"File too small ({file_size} bytes), likely an error page.")
                
                logger.info(f"‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–∫–∞—á–∞–Ω–æ (–ø–æ–ø—ã—Ç–∫–∞ {i+1}): {output_path} (—Ä–∞–∑–º–µ—Ä: {file_size / 1024:.1f}KB)")
                return str(output_path)

            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ {i+1} –Ω–µ —É–¥–∞–ª–∞—Å—å: {e}")
                continue # Try next URL

        logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ—Å–ª–µ {len(urls_to_try)} –ø–æ–ø—ã—Ç–æ–∫.")
        return None
    
    def _filter_twitter_images(self, images: List[str]) -> List[str]:
        """
        –§–∏–ª—å—Ç—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è Twitter
        
        Args:
            images: –°–ø–∏—Å–æ–∫ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            
        Returns:
            –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        """
        if not images:
            return []
        
        def normalize(url_or_obj):
            if isinstance(url_or_obj, dict):
                return url_or_obj.get('url') or url_or_obj.get('src') or ''
            return url_or_obj or ''
        
        # –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –¥–æ–º–µ–Ω—ã –¥–ª—è Twitter
        allowed_substrings = [
            'pbs.twimg.com',  # Twitter CDN –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            'abs.twimg.com',  # Twitter CDN
            'video.twimg.com',  # Twitter CDN –¥–ª—è –≤–∏–¥–µ–æ
            'ton.twimg.com',  # Twitter CDN
            'x.com',  # X.com
            'twitter.com'  # Twitter.com
        ]
        
        filtered_images = []
        for img in images:
            url = normalize(img).lower()
            if any(sub in url for sub in allowed_substrings):
                # –ò—Å–∫–ª—é—á–∞–µ–º –∞–≤–∞—Ç–∞—Ä—ã –∏ —Å–ª—É–∂–µ–±–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                if not any(exclude in url for exclude in ['profile_images', 'emoji', 'sprite', 'icon']):
                    filtered_images.append(img)
        
        return filtered_images
    
    def _filter_twitter_videos(self, videos: List[str]) -> List[str]:
        """
        –§–∏–ª—å—Ç—Ä—É–µ—Ç –≤–∏–¥–µ–æ –¥–ª—è Twitter
        
        Args:
            videos: –°–ø–∏—Å–æ–∫ URL –≤–∏–¥–µ–æ
            
        Returns:
            –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≤–∏–¥–µ–æ
        """
        if not videos:
            return []
        
        def normalize(url_or_obj):
            if isinstance(url_or_obj, dict):
                return url_or_obj.get('url') or url_or_obj.get('src') or ''
            return url_or_obj or ''
        
        # –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –¥–æ–º–µ–Ω—ã –¥–ª—è Twitter –≤–∏–¥–µ–æ
        allowed_substrings = [
            'pbs.twimg.com',  # Twitter CDN –¥–ª—è –≤–∏–¥–µ–æ (–æ—Å–Ω–æ–≤–Ω–æ–π)
            'video.twimg.com',  # Twitter CDN –¥–ª—è –≤–∏–¥–µ–æ
            'abs.twimg.com',  # Twitter CDN
            'x.com',  # X.com
            'twitter.com'  # Twitter.com
        ]
        
        filtered_videos = []
        for video in videos:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –ª–æ–∫–∞–ª—å–Ω—ã–º —Ñ–∞–π–ª–æ–º
            if video.endswith(('.mp4', '.mov', '.avi', '.mkv')):
                # –≠—Ç–æ –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª, –¥–æ–±–∞–≤–ª—è–µ–º –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
                filtered_videos.append(video)
            else:
                # –≠—Ç–æ URL, –ø—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é
                url = normalize(video).lower()
                if any(sub in url for sub in allowed_substrings):
                    filtered_videos.append(video)
        
        return filtered_videos
    
    def _download_twitter_video_with_ytdlp(self, video_url: str, news_title: str) -> str:
        """
        –°–∫–∞—á–∏–≤–∞–Ω–∏–µ Twitter –≤–∏–¥–µ–æ —á–µ—Ä–µ–∑ yt-dlp
        
        Args:
            video_url: URL —Ç–≤–∏—Ç–∞
            news_title: –ó–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–æ–≤–æ—Å—Ç–∏
            
        Returns:
            –ü—É—Ç—å –∫ —Å–∫–∞—á–∞–Ω–Ω–æ–º—É –≤–∏–¥–µ–æ –∏–ª–∏ None
        """
        try:
            import subprocess
            import json
            from pathlib import Path
            
            # –°–æ–∑–¥–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
            safe_title = "".join(c for c in news_title if c.isalnum() or c in (' ', '-', '_')).rstrip()
            safe_title = safe_title[:50]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
            
            output_path = self.media_dir / f"{safe_title}_{hash(video_url) % 1000000}.mp4"
            part_path = output_path.with_suffix(output_path.suffix + '.part')
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ .part —Ñ–∞–π–ª –æ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–π –ø–æ–ø—ã—Ç–∫–∏
            if part_path.exists():
                logger.info(f"üîÑ –ù–∞–π–¥–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π .part —Ñ–∞–π–ª, –∂–¥–µ–º –µ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...")
                import time
                start_time = time.time()
                last_size = 0
                stable_count = 0
                
                while part_path.exists() and (time.time() - start_time) < 60:
                    current_size = part_path.stat().st_size
                    if current_size == last_size:
                        stable_count += 1
                        if stable_count >= 5:
                            logger.info(f"‚úÖ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ —Å—Ç–∞–±–∏–ª–∏–∑–∏—Ä–æ–≤–∞–ª—Å—è, –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º .part —Ñ–∞–π–ª")
                            break
                    else:
                        stable_count = 0
                        last_size = current_size
                        logger.info(f"üìä –†–∞–∑–º–µ—Ä .part —Ñ–∞–π–ª–∞: {current_size / 1024 / 1024:.1f}MB")
                    
                    time.sleep(1)
                
                # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º .part —Ñ–∞–π–ª –≤ —Ñ–∏–Ω–∞–ª—å–Ω—ã–π
                if part_path.exists():
                    part_path.rename(output_path)
                    logger.info(f"‚úÖ .part —Ñ–∞–π–ª –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω –≤ —Ñ–∏–Ω–∞–ª—å–Ω—ã–π")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª
                if output_path.exists():
                    try:
                        from moviepy.editor import VideoFileClip
                        with VideoFileClip(str(output_path)) as clip:
                            duration = clip.duration
                            if duration > 600:  # 10 –º–∏–Ω—É—Ç –¥–ª—è Twitter –≤–∏–¥–µ–æ
                                logger.warning(f"‚ö†Ô∏è –í–∏–¥–µ–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ ({duration:.1f}—Å), —É–¥–∞–ª—è–µ–º")
                                output_path.unlink()
                                return None
                            
                            logger.info(f"‚úÖ Twitter –≤–∏–¥–µ–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ —á–µ—Ä–µ–∑ yt-dlp: {output_path} (–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration:.1f}—Å)")
                            return str(output_path)
                    except ImportError:
                        logger.info(f"‚úÖ Twitter –≤–∏–¥–µ–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ —á–µ—Ä–µ–∑ yt-dlp: {output_path}")
                        return str(output_path)
            
            # –ö–æ–º–∞–Ω–¥–∞ yt-dlp —Å —É–ø—Ä–æ—â–µ–Ω–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –¥–ª—è Twitter
            cmd = [
                'yt-dlp',
                '--format', 'best',  # –ü—Ä–æ—Å—Ç–æ–π –≤—ã–±–æ—Ä –ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
                '--output', str(output_path),
                '--no-playlist',
                '--user-agent', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
                '--socket-timeout', '60',  # –£–º–µ–Ω—å—à–∞–µ–º —Ç–∞–π–º–∞—É—Ç
                '--retries', '2',  # –ú–µ–Ω—å—à–µ –ø–æ–ø—ã—Ç–æ–∫
                '--no-check-certificate',  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º SSL –æ—à–∏–±–∫–∏
                video_url
            ]
            
            logger.info(f"üîÑ –ü—Ä–æ–±—É–µ–º yt-dlp –¥–ª—è Twitter –≤–∏–¥–µ–æ: {video_url[:50]}...")
            
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≤–∏–¥–µ–æ
            logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≤–∏–¥–µ–æ...")
            check_cmd = [
                'yt-dlp',
                '--dump-json',
                '--no-playlist',
                '--extractor-args', 'twitter:api=syndication',
                '--user-agent', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',
                video_url
            ]
            
            check_result = subprocess.run(check_cmd, capture_output=True, text=True, timeout=30)
            
            if check_result.returncode != 0:
                logger.warning(f"‚ö†Ô∏è –í–∏–¥–µ–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ: {check_result.stderr}")
                return None
            
            try:
                video_info = json.loads(check_result.stdout)
                duration = video_info.get('duration', 0)
                
                if duration > 600:  # 10 –º–∏–Ω—É—Ç –¥–ª—è Twitter –≤–∏–¥–µ–æ
                    logger.warning(f"‚ö†Ô∏è –í–∏–¥–µ–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ ({duration:.1f}—Å), –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                    return None
                
                logger.info(f"üìä –í–∏–¥–µ–æ –¥–æ—Å—Ç—É–ø–Ω–æ, –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration:.1f}—Å")
                
            except json.JSONDecodeError:
                logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ, –ø—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å...")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º yt-dlp —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º —Ç–∞–π–º–∞—É—Ç–æ–º
            result = subprocess.run(cmd, capture_output=True, text=True, timeout=120)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª —Å–∫–∞—á–∞–ª—Å—è (–≤–∫–ª—é—á–∞—è .part —Ñ–∞–π–ª—ã)
            final_path = output_path
            part_path = output_path.with_suffix(output_path.suffix + '.part')
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å .part —Ñ–∞–π–ª, –∂–¥–µ–º –µ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            if part_path.exists():
                logger.info(f"‚è≥ –ù–∞–π–¥–µ–Ω .part —Ñ–∞–π–ª, –∂–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è...")
                import time
                start_time = time.time()
                last_size = 0
                stable_count = 0
                
                while part_path.exists() and (time.time() - start_time) < 60:  # –ñ–¥–µ–º –¥–æ 60 —Å–µ–∫—É–Ω–¥
                    current_size = part_path.stat().st_size
                    if current_size == last_size:
                        stable_count += 1
                        if stable_count >= 5:  # –†–∞–∑–º–µ—Ä –Ω–µ –º–µ–Ω—è–ª—Å—è 5 —Å–µ–∫—É–Ω–¥
                            logger.info(f"‚úÖ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ —Å—Ç–∞–±–∏–ª–∏–∑–∏—Ä–æ–≤–∞–ª—Å—è, –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º .part —Ñ–∞–π–ª")
                            break
                    else:
                        stable_count = 0
                        last_size = current_size
                        logger.info(f"üìä –†–∞–∑–º–µ—Ä .part —Ñ–∞–π–ª–∞: {current_size / 1024 / 1024:.1f}MB")
                    
                    time.sleep(1)
                
                # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º .part —Ñ–∞–π–ª –≤ —Ñ–∏–Ω–∞–ª—å–Ω—ã–π
                if part_path.exists():
                    part_path.rename(output_path)
                    final_path = output_path
                    logger.info(f"‚úÖ .part —Ñ–∞–π–ª –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω –≤ —Ñ–∏–Ω–∞–ª—å–Ω—ã–π")
                elif output_path.exists():
                    final_path = output_path
                    logger.info(f"‚úÖ .part —Ñ–∞–π–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞ –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –∫–æ–¥–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ yt-dlp
            logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª: {final_path} (—Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {final_path.exists()})")
            if part_path.exists():
                logger.info(f"üîç .part —Ñ–∞–π–ª: {part_path} (—Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {part_path.exists()})")
            
            if final_path.exists():
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä –∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ñ–∞–π–ª–∞
                try:
                    from moviepy.editor import VideoFileClip
                    with VideoFileClip(str(final_path)) as clip:
                        duration = clip.duration
                        if duration > 600:  # 10 –º–∏–Ω—É—Ç –¥–ª—è Twitter –≤–∏–¥–µ–æ
                            logger.warning(f"‚ö†Ô∏è –í–∏–¥–µ–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ ({duration:.1f}—Å), —É–¥–∞–ª—è–µ–º")
                            final_path.unlink()
                            return None
                        
                        logger.info(f"‚úÖ Twitter –≤–∏–¥–µ–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ —á–µ—Ä–µ–∑ yt-dlp: {final_path} (–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration:.1f}—Å)")
                        return str(final_path)
                except ImportError:
                    logger.info(f"‚úÖ Twitter –≤–∏–¥–µ–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ —á–µ—Ä–µ–∑ yt-dlp: {final_path}")
                    return str(final_path)
            else:
                logger.warning(f"‚ö†Ô∏è yt-dlp –Ω–µ —Å–º–æ–≥ –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤–∏–¥–µ–æ: {result.stderr}")
                # –û—á–∏—â–∞–µ–º .part —Ñ–∞–π–ª –µ—Å–ª–∏ –æ–Ω –æ—Å—Ç–∞–ª—Å—è
                if part_path.exists():
                    part_path.unlink()
                return None
                
        except FileNotFoundError:
            logger.warning("‚ö†Ô∏è yt-dlp –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install yt-dlp")
            return None
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ yt-dlp –¥–ª—è Twitter –≤–∏–¥–µ–æ: {e}")
            return None
    
    def _download_twitter_video_direct(self, video_url: str, news_title: str) -> str:
        """
        –ü—Ä—è–º–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ Twitter –≤–∏–¥–µ–æ —Å pbs.twimg.com
        
        Args:
            video_url: URL —Ç–≤–∏—Ç–∞
            news_title: –ó–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–æ–≤–æ—Å—Ç–∏
            
        Returns:
            –ü—É—Ç—å –∫ —Å–∫–∞—á–∞–Ω–Ω–æ–º—É –≤–∏–¥–µ–æ –∏–ª–∏ None
        """
        try:
            import requests
            from pathlib import Path
            
            # –°–æ–∑–¥–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
            safe_title = "".join(c for c in news_title if c.isalnum() or c in (' ', '-', '_')).rstrip()
            safe_title = safe_title[:50]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
            
            output_path = self.media_dir / f"{safe_title}_{hash(video_url) % 1000000}.mp4"
            
            # –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –æ–±—Ö–æ–¥–∞ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫
            headers = {
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',
                'Accept': 'video/mp4,video/*,*/*',
                'Accept-Language': 'en-US,en;q=0.9',
                'Accept-Encoding': 'gzip, deflate, br',
                'Connection': 'keep-alive',
                'Upgrade-Insecure-Requests': '1',
                'Sec-Fetch-Dest': 'video',
                'Sec-Fetch-Mode': 'navigate',
                'Sec-Fetch-Site': 'cross-site',
                'Cache-Control': 'no-cache',
                'Pragma': 'no-cache'
            }
            
            logger.info(f"üîÑ –ü—Ä—è–º–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ Twitter –≤–∏–¥–µ–æ: {video_url[:50]}...")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–∏–¥–µ–æ
            response = requests.get(video_url, headers=headers, stream=True, timeout=30)
            response.raise_for_status()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∏–¥–µ–æ
            with open(output_path, 'wb') as f:
                for chunk in response.iter_content(chunk_size=8192):
                    f.write(chunk)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
            file_size = output_path.stat().st_size
            if file_size > 100 * 1024 * 1024:  # 100MB
                logger.warning(f"‚ö†Ô∏è –í–∏–¥–µ–æ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ ({file_size / 1024 / 1024:.1f}MB), —É–¥–∞–ª—è–µ–º")
                output_path.unlink()
                return None
            
            logger.info(f"‚úÖ Twitter –≤–∏–¥–µ–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –Ω–∞–ø—Ä—è–º—É—é: {output_path} (—Ä–∞–∑–º–µ—Ä: {file_size / 1024 / 1024:.1f}MB)")
            return str(output_path)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä—è–º–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ Twitter –≤–∏–¥–µ–æ: {e}")
            return None
    
    def _download_twitter_video_selenium(self, video_url: str, news_title: str) -> str:
        """
        –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è Twitter –≤–∏–¥–µ–æ —á–µ—Ä–µ–∑ Selenium
        
        Args:
            video_url: URL —Ç–≤–∏—Ç–∞
            news_title: –ó–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–æ–≤–æ—Å—Ç–∏
            
        Returns:
            –ü—É—Ç—å –∫ —Å–∫–∞—á–∞–Ω–Ω–æ–º—É –≤–∏–¥–µ–æ –∏–ª–∏ None
        """
        try:
            from selenium import webdriver
            from selenium.webdriver.common.by import By
            from selenium.webdriver.support.ui import WebDriverWait
            from selenium.webdriver.support import expected_conditions as EC
            import requests
            from pathlib import Path
            import time
            
            # –°–æ–∑–¥–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
            safe_title = "".join(c for c in news_title if c.isalnum() or c in (' ', '-', '_')).rstrip()
            safe_title = safe_title[:50]
            
            output_path = self.media_dir / f"{safe_title}_{hash(video_url) % 1000000}.mp4"
            
            logger.info(f"üåê Selenium —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ Twitter –≤–∏–¥–µ–æ: {video_url[:50]}...")
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Chrome
            chrome_options = webdriver.ChromeOptions()
            chrome_options.add_argument('--headless')
            chrome_options.add_argument('--no-sandbox')
            chrome_options.add_argument('--disable-dev-shm-usage')
            chrome_options.add_argument('--disable-gpu')
            chrome_options.add_argument('--disable-gpu-sandbox')
            chrome_options.add_argument('--disable-software-rasterizer')
            chrome_options.add_argument('--disable-webgl')
            chrome_options.add_argument('--disable-webgl2')
            chrome_options.add_argument('--disable-3d-apis')
            chrome_options.add_argument('--disable-accelerated-2d-canvas')
            chrome_options.add_argument('--disable-accelerated-jpeg-decoding')
            chrome_options.add_argument('--disable-accelerated-mjpeg-decode')
            chrome_options.add_argument('--disable-accelerated-video-decode')
            chrome_options.add_argument('--disable-background-timer-throttling')
            chrome_options.add_argument('--disable-backgrounding-occluded-windows')
            chrome_options.add_argument('--disable-renderer-backgrounding')
            chrome_options.add_argument('--disable-features=TranslateUI')
            chrome_options.add_argument('--disable-ipc-flooding-protection')
            chrome_options.add_argument('--window-size=1920,1080')
            chrome_options.add_argument('--user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36')
            chrome_options.add_argument('--log-level=3')  # –¢–æ–ª—å–∫–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏
            chrome_options.add_experimental_option('excludeSwitches', ['enable-logging'])
            chrome_options.add_experimental_option('useAutomationExtension', False)
            
            driver = webdriver.Chrome(options=chrome_options)
            
            try:
                # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ç–≤–∏—Ç–∞
                driver.get(video_url)
                time.sleep(10)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è
                
                # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ
                try:
                    WebDriverWait(driver, 15).until(
                        EC.presence_of_element_located((By.TAG_NAME, "video"))
                    )
                    logger.info("‚úÖ –í–∏–¥–µ–æ —ç–ª–µ–º–µ–Ω—Ç –∑–∞–≥—Ä—É–∂–µ–Ω")
                except:
                    logger.warning("‚ö†Ô∏è –í–∏–¥–µ–æ —ç–ª–µ–º–µ–Ω—Ç –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª—Å—è –∑–∞ 15 —Å–µ–∫—É–Ω–¥")
                
                # –ò—â–µ–º –≤–∏–¥–µ–æ —ç–ª–µ–º–µ–Ω—Ç—ã —Ä–∞–∑–Ω—ã–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏
                video_elements = driver.find_elements(By.TAG_NAME, "video")
                
                # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ video —Ç–µ–≥–∏, –∏—â–µ–º –≤ data-–∞—Ç—Ä–∏–±—É—Ç–∞—Ö
                if not video_elements:
                    video_elements = driver.find_elements(By.CSS_SELECTOR, "[data-testid='videoPlayer'] video")
                
                if not video_elements:
                    video_elements = driver.find_elements(By.CSS_SELECTOR, "[data-testid='tweet'] video")
                
                if not video_elements:
                    video_elements = driver.find_elements(By.CSS_SELECTOR, "div[data-testid='videoComponent'] video")
                
                if video_elements:
                    logger.info(f"üé• –ù–∞–π–¥–µ–Ω–æ {len(video_elements)} –≤–∏–¥–µ–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
                    
                    for i, video_element in enumerate(video_elements):
                        logger.info(f"üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–∏–¥–µ–æ —ç–ª–µ–º–µ–Ω—Ç {i+1}...")
                        
                        # –ü—Ä–æ–±—É–µ–º –∫–ª–∏–∫–Ω—É—Ç—å –Ω–∞ –≤–∏–¥–µ–æ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
                        try:
                            driver.execute_script("arguments[0].click();", video_element)
                            time.sleep(2)
                            logger.info(f"üñ±Ô∏è –ö–ª–∏–∫–Ω—É–ª–∏ –Ω–∞ –≤–∏–¥–µ–æ {i+1}")
                        except:
                            pass
                        
                        # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã
                        video_src = (video_element.get_attribute("src") or 
                                   video_element.get_attribute("data-src") or
                                   video_element.get_attribute("data-video-url") or
                                   video_element.get_attribute("poster") or
                                   video_element.get_attribute("data-poster"))
                        
                        # –ï—Å–ª–∏ –Ω–µ—Ç src, –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–∑ currentSrc
                        if not video_src:
                            try:
                                video_src = driver.execute_script("return arguments[0].currentSrc;", video_element)
                            except:
                                pass
                        
                        # –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –Ω–µ—Ç src, –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –≤—Å–µ—Ö –∞—Ç—Ä–∏–±—É—Ç–æ–≤
                        if not video_src:
                            all_attrs = driver.execute_script("""
                                var attrs = {};
                                for (var i = 0; i < arguments[0].attributes.length; i++) {
                                    var attr = arguments[0].attributes[i];
                                    attrs[attr.name] = attr.value;
                                }
                                return attrs;
                            """, video_element)
                            
                            for attr_name, attr_value in all_attrs.items():
                                if isinstance(attr_value, str) and ('mp4' in attr_value or 'video' in attr_value) and attr_value.startswith('http'):
                                    video_src = attr_value
                                    logger.info(f"üîç –ù–∞–π–¥–µ–Ω URL –≤ –∞—Ç—Ä–∏–±—É—Ç–µ {attr_name}: {video_src[:50]}...")
                                    break
                        
                        if video_src and video_src.startswith('http'):
                            # –ò—Å–∫–ª—é—á–∞–µ–º thumbnail URLs
                            if any(thumb in video_src.lower() for thumb in ['thumb', 'preview', 'poster', 'static']):
                                logger.warning(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º thumbnail: {video_src[:50]}...")
                                continue
                                
                            logger.info(f"üé• –ù–∞–π–¥–µ–Ω–æ –≤–∏–¥–µ–æ {i+1}: {video_src[:50]}...")
                            
                            try:
                                # –°–∫–∞—á–∏–≤–∞–µ–º –≤–∏–¥–µ–æ
                                response = requests.get(video_src, stream=True, timeout=60)
                                response.raise_for_status()
                                
                                with open(output_path, 'wb') as f:
                                    for chunk in response.iter_content(chunk_size=8192):
                                        f.write(chunk)
                                
                                file_size = output_path.stat().st_size
                                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–æ–ª—å—à–æ–π (–Ω–µ thumbnail)
                                if file_size < 1024 * 1024:  # –ú–µ–Ω—å—à–µ 1MB - –≤–µ—Ä–æ—è—Ç–Ω–æ thumbnail
                                    logger.warning(f"‚ö†Ô∏è –°–∫–∞—á–∞–Ω–Ω—ã–π —Ñ–∞–π–ª —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∏–π ({file_size} –±–∞–π—Ç), –≤–æ–∑–º–æ–∂–Ω–æ —ç—Ç–æ thumbnail")
                                    output_path.unlink()
                                    continue
                                
                                logger.info(f"‚úÖ Twitter –≤–∏–¥–µ–æ —Å–∫–∞—á–∞–Ω–æ —á–µ—Ä–µ–∑ Selenium: {output_path} (—Ä–∞–∑–º–µ—Ä: {file_size / 1024 / 1024:.1f}MB)")
                                return str(output_path)
                                
                            except Exception as e:
                                logger.warning(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≤–∏–¥–µ–æ {i+1}: {e}")
                                continue
                        else:
                            logger.warning(f"‚ùå –í–∏–¥–µ–æ {i+1} –Ω–µ –∏–º–µ–µ—Ç –≤–∞–ª–∏–¥–Ω–æ–≥–æ src. –ê—Ç—Ä–∏–±—É—Ç—ã: {video_element.get_attribute('outerHTML')[:200]}...")
                else:
                    logger.warning("‚ùå –í–∏–¥–µ–æ —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ")
                    # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø—Ä—è–º—ã–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –≤–∏–¥–µ–æ –≤ HTML
                    page_source = driver.page_source
                    import re
                    video_urls = re.findall(r'https://[^"\s]*\.mp4[^"\s]*', page_source)
                    if video_urls:
                        logger.info(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(video_urls)} –ø—Ä—è–º—ã—Ö —Å—Å—ã–ª–æ–∫ –Ω–∞ –≤–∏–¥–µ–æ –≤ HTML")
                        for video_url in video_urls[:3]:  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 3
                            try:
                                logger.info(f"üé• –ü—Ä–æ–±—É–µ–º —Å–∫–∞—á–∞—Ç—å: {video_url[:50]}...")
                                response = requests.get(video_url, stream=True, timeout=60)
                                response.raise_for_status()
                                
                                with open(output_path, 'wb') as f:
                                    for chunk in response.iter_content(chunk_size=8192):
                                        f.write(chunk)
                                
                                file_size = output_path.stat().st_size
                                if file_size > 1024:  # –ë–æ–ª—å—à–µ 1KB - —É—Å–ø–µ—Ö
                                    logger.info(f"‚úÖ Twitter –≤–∏–¥–µ–æ —Å–∫–∞—á–∞–Ω–æ —á–µ—Ä–µ–∑ HTML –ø–æ–∏—Å–∫: {output_path} (—Ä–∞–∑–º–µ—Ä: {file_size / 1024 / 1024:.1f}MB)")
                                    return str(output_path)
                                
                            except Exception as e:
                                logger.warning(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è HTML –≤–∏–¥–µ–æ: {e}")
                                continue
                    
            finally:
                driver.quit()
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ Selenium —Å–∫–∞—á–∏–≤–∞–Ω–∏—è Twitter –≤–∏–¥–µ–æ: {e}")
            return None
    
    def _download_twitter_avatar(self, avatar_url: str, username: str) -> str:
        """
        –°–∫–∞—á–∏–≤–∞–µ—Ç –∞–≤–∞—Ç–∞—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Twitter –ø–æ –ø—Ä—è–º–æ–º—É URL.

        Args:
            avatar_url: –ü—Ä—è–º–æ–π URL –∞–≤–∞—Ç–∞—Ä–∞.
            username: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞.

        Returns:
            –ü—É—Ç—å –∫ —Å–∫–∞—á–∞–Ω–Ω–æ–º—É –∞–≤–∞—Ç–∞—Ä—É –∏–ª–∏ None.
        """
        import requests

        if not avatar_url:
            logger.warning("‚ö†Ô∏è URL –∞–≤–∞—Ç–∞—Ä–∞ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω.")
            return None

        try:
            safe_username = "".join(c for c in username if c.isalnum() or c in ('_', '-')).rstrip()
            logos_dir = Path("resources/logos")
            logos_dir.mkdir(parents=True, exist_ok=True)
            output_path = logos_dir / f"avatar_{safe_username}.png"

            if output_path.exists():
                logger.info(f"‚úÖ –ê–≤–∞—Ç–∞—Ä –¥–ª—è @{username} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {output_path}")
                return str(output_path)

            logger.info(f"üë§ –°–∫–∞—á–∏–≤–∞–µ–º –∞–≤–∞—Ç–∞—Ä –¥–ª—è @{username}...")

            session = requests.Session()
            session.headers.update({
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36'
            })

            response = session.get(avatar_url, stream=True, timeout=30)
            response.raise_for_status()

            temp_path = output_path.with_suffix('.tmp')
            with open(temp_path, 'wb') as f:
                for chunk in response.iter_content(chunk_size=8192):
                    f.write(chunk)

            if self._optimize_avatar_image(temp_path, output_path):
                logger.info(f"‚úÖ –ê–≤–∞—Ç–∞—Ä –¥–ª—è @{username} —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {output_path}")
                return str(output_path)
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∞–≤–∞—Ç–∞—Ä–∞ –¥–ª—è @{username}")
                if temp_path.exists():
                    temp_path.unlink()
                return None

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∞ –¥–ª—è @{username} —Å URL {avatar_url}: {e}")
            return None

    def _optimize_avatar_image(self, input_path: Path, output_path: Path) -> bool:
        """
        –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ—Ç –∞–≤–∞—Ç–∞—Ä (–∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ PNG, –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞).
        """
        try:
            from PIL import Image
            with Image.open(input_path) as img:
                if img.mode != 'RGBA':
                    img = img.convert('RGBA')
                
                max_size = (200, 200)
                img.thumbnail(max_size, Image.Resampling.LANCZOS)
                
                img.save(output_path, 'PNG', optimize=True)
            
            if input_path.exists():
                input_path.unlink()

            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∞–≤–∞—Ç–∞—Ä–∞ {input_path}: {e}")
            return False
    
    def _preprocess_video(self, video_path: str) -> str:
        """
        –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ: –æ–±—Ä–µ–∑–∫–∞ –¥–æ 6 —Å–µ–∫—É–Ω–¥ –∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ MP4.
        
        Args:
            video_path: –ü—É—Ç—å –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É –≤–∏–¥–µ–æ
            
        Returns:
            –ü—É—Ç—å –∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–º—É MP4 –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ª–∏ —É–∂–µ –≤–∏–¥–µ–æ
            if '_processed_' in video_path:
                logger.info(f"–í–∏–¥–µ–æ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º: {video_path}")
                return None
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω–∞ –ª–∏ –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞
            video_config = self.config.get('video', {})
            preprocessing_config = video_config.get('preprocessing', {})
            
            if not preprocessing_config.get('enabled', False):
                logger.info("–ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ –æ—Ç–∫–ª—é—á–µ–Ω–∞ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
                return None
                
            if not self.video_preprocessor:
                logger.warning("VideoPreprocessor –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                return None
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            offset_seconds = preprocessing_config.get('offset_seconds', 0)
            target_duration = preprocessing_config.get('target_duration', 6)
            output_fps = preprocessing_config.get('output_fps', 12)
            convert_to_gif = preprocessing_config.get('convert_to_gif', True)
            
            logger.info(f"üé¨ –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ: {video_path}")
            logger.info(f"–ü–∞—Ä–∞–º–µ—Ç—Ä—ã: —Å–º–µ—â–µ–Ω–∏–µ={offset_seconds}—Å, –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å={target_duration}—Å, FPS={output_fps}")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–∏–¥–µ–æ
            processed_path = self.video_preprocessor.preprocess_video(
                video_path,
                offset_seconds=offset_seconds,
                target_duration=target_duration
                # fps –±–µ—Ä–µ—Ç—Å—è –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
            )
            
            if processed_path:
                logger.info(f"‚úÖ –í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {processed_path}")
                return processed_path
            else:
                logger.warning("‚ùå –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ –Ω–µ —É–¥–∞–ª–∞—Å—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª")
                return None
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ {video_path}: {e}")
            return None
