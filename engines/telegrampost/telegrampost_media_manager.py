#!/usr/bin/env python3
"""
Telegram Post Media Manager
–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–¥–∏–∞ –∏–∑ Telegram –ø–æ—Å—Ç–æ–≤
"""

import os
import logging
import requests
from typing import Dict, List, Any
from pathlib import Path

logger = logging.getLogger(__name__)

class TelegramPostMediaManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –º–µ–¥–∏–∞ –¥–ª—è Telegram –ø–æ—Å—Ç–æ–≤"""
    
    def __init__(self, config: Dict[str, Any]):
        self.config = config
        self.bot_token = os.getenv('TELEGRAM_BOT_TOKEN', config.get('telegram', {}).get('bot_token', ''))
        self.base_url = f"https://api.telegram.org/bot{self.bot_token}"
        self.download_dir = Path(config.get('project', {}).get('base_path', '.')) / 'media' / 'telegram'
        self.download_dir.mkdir(parents=True, exist_ok=True)
    
    def process_news_media(self, news_data: Dict[str, Any]) -> Dict[str, Any]:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –º–µ–¥–∏–∞ –∏–∑ –Ω–æ–≤–æ—Å—Ç–∏
        
        Args:
            news_data: –î–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ —Å file_id –º–µ–¥–∏–∞ –∏–ª–∏ –ª–æ–∫–∞–ª—å–Ω—ã–º–∏ –ø—É—Ç—è–º–∏
            
        Returns:
            –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ —Å –ª–æ–∫–∞–ª—å–Ω—ã–º–∏ –ø—É—Ç—è–º–∏ –∫ –º–µ–¥–∏–∞
        """
        logger.info("üì• –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–¥–∏–∞ –∏–∑ Telegram –ø–æ—Å—Ç–∞...")
        
        result = {
            'has_media': False,
            'downloaded_images': [],
            'downloaded_videos': [],
            'media_paths': [],
            'avatar_path': 'resources/logos/telegram_avatar.svg'  # –ò–∫–æ–Ω–∫–∞ Telegram
        }
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –ª–∏ —É–∂–µ –º–µ–¥–∏–∞ (–ª–æ–∫–∞–ª—å–Ω—ã–µ –ø—É—Ç–∏ –≤–º–µ—Å—Ç–æ file_id)
            images = news_data.get('images', [])
            videos = news_data.get('videos', [])
            
            # –ï—Å–ª–∏ —ç—Ç–æ –ª–æ–∫–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã (–Ω–µ telegram_ –ø—Ä–µ—Ñ–∏–∫—Å), –∑–Ω–∞—á–∏—Ç —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã
            local_images = [img for img in images if img and not img.startswith('telegram_')]
            local_videos = [vid for vid in videos if vid and not vid.startswith('telegram_')]
            
            if local_images or local_videos:
                logger.info("‚úÖ –ú–µ–¥–∏–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã (–Ω–∞–π–¥–µ–Ω—ã –ª–æ–∫–∞–ª—å–Ω—ã–µ –ø—É—Ç–∏)")
                result['has_media'] = True
                result['downloaded_images'] = local_images
                result['downloaded_videos'] = local_videos
                result['media_paths'] = local_images + local_videos
                
                if local_images:
                    result['primary_image'] = local_images[0]
                    result['local_image_path'] = local_images[0]
                if local_videos:
                    result['video_url'] = local_videos[0]
                    result['local_video_path'] = local_videos[0]
                
                logger.info(f"‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –º–µ–¥–∏–∞: {len(local_images)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, {len(local_videos)} –≤–∏–¥–µ–æ")
                return result
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å telegram_ –ø—Ä–µ—Ñ–∏–∫—Å–æ–º (—Å–∫–∞—á–∏–≤–∞–µ–º –∏–∑ Telegram)
            for img_ref in images:
                if img_ref.startswith('telegram_'):
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º file_id
                    file_id = img_ref.split(':', 1)[1] if ':' in img_ref else img_ref
                    
                    # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
                    local_path = self._download_file(file_id, 'image')
                    if local_path:
                        result['downloaded_images'].append(local_path)
                        result['media_paths'].append(local_path)
                        logger.info(f"‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–∫–∞—á–∞–Ω–æ: {local_path}")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–∏–¥–µ–æ
            videos = news_data.get('videos', [])
            for vid_ref in videos:
                if vid_ref.startswith('telegram_'):
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º file_id
                    file_id = vid_ref.split(':', 1)[1] if ':' in vid_ref else vid_ref
                    
                    # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
                    local_path = self._download_file(file_id, 'video')
                    if local_path:
                        result['downloaded_videos'].append(local_path)
                        result['media_paths'].append(local_path)
                        logger.info(f"‚úÖ –í–∏–¥–µ–æ —Å–∫–∞—á–∞–Ω–æ: {local_path}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–ª–∞–≥ –Ω–∞–ª–∏—á–∏—è –º–µ–¥–∏–∞
            if result['downloaded_images'] or result['downloaded_videos']:
                result['has_media'] = True
                logger.info(f"‚úÖ –ú–µ–¥–∏–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {len(result['downloaded_images'])} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, {len(result['downloaded_videos'])} –≤–∏–¥–µ–æ")
            else:
                logger.info("‚ÑπÔ∏è –ú–µ–¥–∏–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –ø–æ—Å—Ç–µ")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—É—Ç–∏ –≤ news_data
            if result['downloaded_images']:
                news_data['images'] = result['downloaded_images']
            if result['downloaded_videos']:
                news_data['videos'] = result['downloaded_videos']
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–µ–¥–∏–∞: {e}")
            import traceback
            logger.error(f"‚ùå Traceback: {traceback.format_exc()}")
        
        return result
    
    def _download_file(self, file_id: str, media_type: str = 'file') -> str:
        """
        –°–∫–∞—á–∏–≤–∞–µ—Ç —Ñ–∞–π–ª –∏–∑ Telegram –ø–æ file_id
        
        Args:
            file_id: ID —Ñ–∞–π–ª–∞ –≤ Telegram
            media_type: –¢–∏–ø –º–µ–¥–∏–∞ (image, video, file)
            
        Returns:
            –õ–æ–∫–∞–ª—å–Ω—ã–π –ø—É—Ç—å –∫ —Å–∫–∞—á–∞–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É –∏–ª–∏ None
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
            get_file_url = f"{self.base_url}/getFile"
            params = {'file_id': file_id}
            
            response = requests.get(get_file_url, params=params, timeout=10)
            
            if response.status_code != 200:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞–π–ª–µ: {response.status_code}")
                return None
            
            data = response.json()
            
            if not data.get('ok'):
                logger.error(f"‚ùå API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: {data.get('description', 'Unknown')}")
                return None
            
            file_path = data['result']['file_path']
            file_size = data['result'].get('file_size', 0)
            
            logger.info(f"üì• –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞: {file_path} ({file_size} –±–∞–π—Ç)")
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
            download_url = f"https://api.telegram.org/file/bot{self.bot_token}/{file_path}"
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
            file_name = os.path.basename(file_path)
            local_path = self.download_dir / file_name
            
            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
            file_response = requests.get(download_url, timeout=30, stream=True)
            
            if file_response.status_code != 200:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞: {file_response.status_code}")
                return None
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
            with open(local_path, 'wb') as f:
                for chunk in file_response.iter_content(chunk_size=8192):
                    if chunk:
                        f.write(chunk)
            
            logger.info(f"‚úÖ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {local_path}")
            
            return str(local_path)
            
        except requests.exceptions.Timeout:
            logger.error(f"‚ùå –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞ {file_id}")
            return None
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞ {file_id}: {e}")
            return None
    
    def get_file_url(self, file_id: str) -> str:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–∞–π–ª –≤ Telegram
        
        Args:
            file_id: ID —Ñ–∞–π–ª–∞ –≤ Telegram
            
        Returns:
            URL —Ñ–∞–π–ª–∞ –∏–ª–∏ None
        """
        try:
            get_file_url = f"{self.base_url}/getFile"
            params = {'file_id': file_id}
            
            response = requests.get(get_file_url, params=params, timeout=10)
            
            if response.status_code == 200:
                data = response.json()
                if data.get('ok'):
                    file_path = data['result']['file_path']
                    return f"https://api.telegram.org/file/bot{self.bot_token}/{file_path}"
            
            return None
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è URL —Ñ–∞–π–ª–∞: {e}")
            return None

