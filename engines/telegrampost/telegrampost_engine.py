#!/usr/bin/env python3
"""
Telegram Post Engine
–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä—è–º—ã—Ö –ø–æ—Å—Ç–æ–≤ –∏–∑ Telegram –±–µ–∑ –ø–µ—Ä–µ—Ö–æ–¥–∞ –ø–æ –≤–Ω–µ—à–Ω–∏–º —Å—Å—ã–ª–∫–∞–º
"""

import logging
import re
from typing import Dict, List, Any
from datetime import datetime
from urllib.parse import urlparse

from ..base.source_engine import SourceEngine

logger = logging.getLogger(__name__)

class TelegramPostEngine(SourceEngine):
    """–î–≤–∏–∂–æ–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä—è–º—ã—Ö –ø–æ—Å—Ç–æ–≤ –∏–∑ Telegram"""
    
    def __init__(self, config: Dict[str, Any]):
        super().__init__(config)
        self.bot_token = config.get('telegram', {}).get('bot_token', '')
    
    def _get_supported_domains(self) -> List[str]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –¥–æ–º–µ–Ω—ã (—Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –º–∞—Ä–∫–µ—Ä –¥–ª—è Telegram)"""
        return ['telegram://post', 'tg://post']
    
    def _get_source_name(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞"""
        return "Telegram Post"
    
    def can_handle(self, url: str) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–µ—Ç –ª–∏ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å URL
        
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç:
        - telegram://post - —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π URL –¥–ª—è –ø—Ä—è–º—ã—Ö –ø–æ—Å—Ç–æ–≤
        - tg://post - –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
        """
        if not url:
            return False
        
        url_lower = url.lower()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å—Ö–µ–º—ã –¥–ª—è Telegram –ø–æ—Å—Ç–æ–≤
        if url_lower.startswith('telegram://post') or url_lower.startswith('tg://post'):
            logger.info("‚úÖ Telegram Post: –æ–±–Ω–∞—Ä—É–∂–µ–Ω –ø—Ä—è–º–æ–π –ø–æ—Å—Ç")
            return True
        
        return False
    
    def get_engine_info(self) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–≤–∏–∂–∫–µ"""
        return {
            'name': self.source_name,
            'supported_domains': self.supported_domains,
            'version': '1.0.0',
            'type': 'telegram_direct'
        }
    
    def parse_url(self, url: str, driver=None, telegram_message: Dict = None) -> Dict[str, Any]:
        """
        –ü–∞—Ä—Å–∏—Ç Telegram –ø–æ—Å—Ç
        
        Args:
            url: URL (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å telegram://post –∏–ª–∏ tg://post)
            driver: –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è Telegram –ø–æ—Å—Ç–æ–≤
            telegram_message: –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ Telegram API
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –Ω–æ–≤–æ—Å—Ç–∏
        """
        try:
            logger.info("üîç –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä—è–º–æ–≥–æ Telegram –ø–æ—Å—Ç–∞...")
            
            if not telegram_message:
                logger.error("‚ùå –ù–µ –ø–µ—Ä–µ–¥–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ Telegram")
                return None
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç
            text = self._extract_text(telegram_message)
            
            if not text or len(text) < 20:
                logger.warning(f"‚ùå –¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π: {len(text) if text else 0} —Å–∏–º–≤–æ–ª–æ–≤")
                return None
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏–∑ –ø–µ—Ä–≤—ã—Ö —Å–ª–æ–≤
            title = self._generate_title(text)
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –º–µ–¥–∏–∞
            images = self._extract_images(telegram_message)
            videos = self._extract_videos(telegram_message)
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É
            date = self._extract_date(telegram_message)
            
            # –ü–æ–ª—É—á–∞–µ–º –∞–≤—Ç–æ—Ä–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
            author = self._extract_author(telegram_message)
            
            result = {
                'title': title,
                'description': text[:500] if len(text) > 500 else text,
                'content': text,
                'author': author,
                'published': date,
                'source': 'Telegram Post',
                'url': url,
                'images': images,
                'videos': videos,
                'content_type': 'telegram_post',
                'telegram_message_id': telegram_message.get('message_id'),
                'telegram_chat_id': telegram_message.get('chat', {}).get('id')
            }
            
            logger.info(f"‚úÖ Telegram –ø–æ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω: {title[:50]}...")
            logger.info(f"   üìù –¢–µ–∫—Å—Ç: {len(text)} —Å–∏–º–≤–æ–ª–æ–≤")
            logger.info(f"   üì∏ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {len(images)}")
            logger.info(f"   üé¨ –í–∏–¥–µ–æ: {len(videos)}")
            
            return result
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ Telegram –ø–æ—Å—Ç–∞: {e}")
            import traceback
            logger.error(f"‚ùå Traceback: {traceback.format_exc()}")
            return None
    
    def _extract_text(self, message: Dict) -> str:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –ø–æ–ª—è
        text = message.get('text', '')
        
        if not text:
            text = message.get('caption', '')
        
        return text.strip()
    
    def _generate_title(self, text: str) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∏–ª–∏ –ø–µ—Ä–≤—ã–µ 80 —Å–∏–º–≤–æ–ª–æ–≤
        sentences = re.split(r'[.!?]\s+', text)
        
        if sentences and len(sentences[0]) > 10:
            title = sentences[0]
        else:
            title = text[:80]
        
        # –û–±—Ä–µ–∑–∞–µ–º –¥–æ –ø—Ä–∏–µ–º–ª–µ–º–æ–π –¥–ª–∏–Ω—ã
        if len(title) > 100:
            title = title[:97] + '...'
        
        return title.strip()
    
    def _extract_images(self, message: Dict) -> List[str]:
        """
        –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
        
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç file_id –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
        """
        images = []
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º photo (–º–∞—Å—Å–∏–≤ —Ä–∞–∑–Ω—ã—Ö —Ä–∞–∑–º–µ—Ä–æ–≤)
        if 'photo' in message and message['photo']:
            # –ë–µ—Ä–µ–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (–ø–æ—Å–ª–µ–¥–Ω–µ–µ –≤ –º–∞—Å—Å–∏–≤–µ)
            largest_photo = message['photo'][-1]
            file_id = largest_photo.get('file_id')
            if file_id:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º file_id —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
                images.append(f"telegram_photo:{file_id}")
                logger.debug(f"üì∏ –ù–∞–π–¥–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {file_id}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç (–º–æ–∂–µ—Ç –±—ã—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º)
        if 'document' in message:
            doc = message['document']
            mime_type = doc.get('mime_type', '')
            if mime_type.startswith('image/'):
                file_id = doc.get('file_id')
                if file_id:
                    images.append(f"telegram_document:{file_id}")
                    logger.debug(f"üì∏ –ù–∞–π–¥–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ: {file_id}")
        
        return images
    
    def _extract_videos(self, message: Dict) -> List[str]:
        """
        –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –≤–∏–¥–µ–æ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
        
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç file_id –≤–∏–¥–µ–æ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
        """
        videos = []
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º video
        if 'video' in message:
            video = message['video']
            file_id = video.get('file_id')
            if file_id:
                videos.append(f"telegram_video:{file_id}")
                logger.debug(f"üé¨ –ù–∞–π–¥–µ–Ω–æ –≤–∏–¥–µ–æ: {file_id}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º animation (GIF)
        if 'animation' in message:
            animation = message['animation']
            file_id = animation.get('file_id')
            if file_id:
                videos.append(f"telegram_animation:{file_id}")
                logger.debug(f"üé¨ –ù–∞–π–¥–µ–Ω–∞ –∞–Ω–∏–º–∞—Ü–∏—è: {file_id}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º video_note (–∫—Ä—É–≥–ª—ã–µ –≤–∏–¥–µ–æ)
        if 'video_note' in message:
            video_note = message['video_note']
            file_id = video_note.get('file_id')
            if file_id:
                videos.append(f"telegram_video_note:{file_id}")
                logger.debug(f"üé¨ –ù–∞–π–¥–µ–Ω–æ –≤–∏–¥–µ–æ-—Å–æ–æ–±—â–µ–Ω–∏–µ: {file_id}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç (–º–æ–∂–µ—Ç –±—ã—Ç—å –≤–∏–¥–µ–æ)
        if 'document' in message:
            doc = message['document']
            mime_type = doc.get('mime_type', '')
            if mime_type.startswith('video/'):
                file_id = doc.get('file_id')
                if file_id:
                    videos.append(f"telegram_document_video:{file_id}")
                    logger.debug(f"üé¨ –ù–∞–π–¥–µ–Ω–æ –≤–∏–¥–µ–æ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ: {file_id}")
        
        return videos
    
    def _extract_date(self, message: Dict) -> str:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞—Ç—ã –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        # date - Unix timestamp
        timestamp = message.get('date')
        
        if timestamp:
            try:
                dt = datetime.fromtimestamp(timestamp)
                return dt.isoformat()
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –¥–∞—Ç—ã: {e}")
        
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
        return datetime.now().isoformat()
    
    def _extract_author(self, message: Dict) -> str:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∞–≤—Ç–æ—Ä–∞ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º forward_from (–µ—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ)
        if 'forward_from' in message:
            forward_from = message['forward_from']
            first_name = forward_from.get('first_name', '')
            last_name = forward_from.get('last_name', '')
            username = forward_from.get('username', '')
            
            if first_name or last_name:
                return f"{first_name} {last_name}".strip()
            elif username:
                return f"@{username}"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º forward_from_chat (–µ—Å–ª–∏ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ –∏–∑ –∫–∞–Ω–∞–ª–∞)
        if 'forward_from_chat' in message:
            chat = message['forward_from_chat']
            title = chat.get('title', '')
            username = chat.get('username', '')
            
            if title:
                return title
            elif username:
                return f"@{username}"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º author_signature (–ø–æ–¥–ø–∏—Å—å –∞–≤—Ç–æ—Ä–∞ –≤ –∫–∞–Ω–∞–ª–µ)
        if 'author_signature' in message:
            return message['author_signature']
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º chat (–æ—Ç–∫—É–¥–∞ –ø—Ä–∏—à–ª–æ —Å–æ–æ–±—â–µ–Ω–∏–µ)
        if 'chat' in message:
            chat = message['chat']
            title = chat.get('title', '')
            username = chat.get('username', '')
            
            if title:
                return title
            elif username:
                return f"@{username}"
        
        return "Telegram Channel"
    
    def extract_media(self, url: str, content: Dict[str, Any]) -> Dict[str, List[str]]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –º–µ–¥–∏–∞ —Ñ–∞–π–ª—ã –∏–∑ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
        return {
            'images': content.get('images', []),
            'videos': content.get('videos', [])
        }
    
    def validate_content(self, content: Dict[str, Any]) -> bool:
        """–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–µ–∫—Å—Ç–∞
        text = content.get('content', '') or content.get('description', '')
        if not text or len(text) < 20:
            logger.warning("‚ùå –¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –¥–ª—è Telegram –ø–æ—Å—Ç–∞")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        title = content.get('title', '')
        if not title or len(title) < 10:
            logger.warning("‚ùå –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π")
            return False
        
        logger.info("‚úÖ Telegram –ø–æ—Å—Ç –≤–∞–ª–∏–¥–µ–Ω")
        return True

