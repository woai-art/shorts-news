#!/usr/bin/env python3
"""
–ê–≤—Ç–æ–Ω–æ–º–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä Telegram –∫–∞–Ω–∞–ª–∞ –¥–ª—è shorts_news
–ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç –∫–∞–Ω–∞–ª –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏.
"""

import os
import sys
import logging
import requests
import time
from pathlib import Path
from dotenv import load_dotenv
import re
from datetime import datetime
from urllib.parse import urlparse
import atexit

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
env_path = Path('.') / 'config' / '.env'
load_dotenv(dotenv_path=env_path)

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ —Å–∫—Ä–∏–ø—Ç–∞–º
sys.path.append(os.path.abspath('scripts'))

try:
    from telegram_bot import NewsTelegramBot
    from web_parser import WebParser
except ImportError as e:
    print(f"Critical Error: Failed to import necessary modules. Make sure you are running this from the project root and venv is active. Details: {e}")
    sys.exit(1)


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('logs/channel_monitor.log', encoding='utf-8'),
        logging.StreamHandler(sys.stdout)
    ]
)
logger = logging.getLogger(__name__)

class ChannelMonitor:
    """–ú–æ–Ω–∏—Ç–æ—Ä Telegram –∫–∞–Ω–∞–ª–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π –≤ –ë–î"""

    def __init__(self):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä–∞
        self.lock_file = 'logs/channel_monitor.lock'
        self._acquire_lock()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑–≤–ª–µ–∫–∞—é—Ç—Å—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ –∫–æ–Ω—Ñ–∏–≥–∞
        self.monitor_channel_id = os.getenv("MONITOR_CHANNEL_ID", "-1003056499503")
        self.bot_token = os.getenv("MONITOR_BOT_TOKEN", "YOUR_MONITOR_BOT_TOKEN_HERE")
        self.publish_channel_id = os.getenv("PUBLISH_CHANNEL_ID", "YOUR_PUBLISH_CHANNEL_ID_HERE")
        self.publish_bot_token = os.getenv("PUBLISH_BOT_TOKEN", "YOUR_PUBLISH_BOT_TOKEN_HERE")
        
        self.base_url = f"https://api.telegram.org/bot{self.bot_token}"
        self.publish_base_url = f"https://api.telegram.org/bot{self.publish_bot_token}"

        self.last_update_id = 0
        self.processed_messages = set()
        self.config_path = 'config/config.yaml'
        
        # –û—á–∏—â–∞–µ–º pending updates —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å 409 –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
        self._clear_pending_updates()

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        self.telegram_bot = NewsTelegramBot(self.config_path)
        self.web_parser = WebParser(self.config_path)

        os.makedirs('logs', exist_ok=True)
        logger.info("Channel Monitor initialized")
        logger.info(f"Monitoring channel: {self.monitor_channel_id}")
        logger.info(f"Publishing to channel (for status updates): {self.publish_channel_id}")

    def _acquire_lock(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∑–∞–ø—É—Å–∫–æ–≤"""
        os.makedirs('logs', exist_ok=True)
        
        if os.path.exists(self.lock_file):
            try:
                with open(self.lock_file, 'r') as f:
                    old_pid = int(f.read().strip())
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø—Ä–æ—Ü–µ—Å—Å —Å —Ç–∞–∫–∏–º PID (Windows)
                import subprocess
                try:
                    result = subprocess.run(['tasklist', '/FI', f'PID eq {old_pid}'], 
                                          capture_output=True, text=True, timeout=5)
                    if str(old_pid) in result.stdout:
                        logger.error(f"‚ùå –î—Ä—É–≥–æ–π —ç–∫–∑–µ–º–ø–ª—è—Ä —É–∂–µ –∑–∞–ø—É—â–µ–Ω (PID: {old_pid})")
                        raise SystemExit("–î—Ä—É–≥–æ–π —ç–∫–∑–µ–º–ø–ª—è—Ä channel_monitor —É–∂–µ –∑–∞–ø—É—â–µ–Ω!")
                    else:
                        logger.info(f"üßπ –£–¥–∞–ª—è–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–π lock —Ñ–∞–π–ª (PID {old_pid} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)")
                        os.remove(self.lock_file)
                except subprocess.TimeoutExpired:
                    logger.warning("‚ö†Ô∏è –¢–∞–π–º–∞—É—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ PID, —É–¥–∞–ª—è–µ–º lock —Ñ–∞–π–ª")
                    os.remove(self.lock_file)
            except (ValueError, FileNotFoundError):
                logger.warning("‚ö†Ô∏è –ü–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–π lock —Ñ–∞–π–ª, —É–¥–∞–ª—è–µ–º...")
                try:
                    os.remove(self.lock_file)
                except:
                    pass
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π lock —Ñ–∞–π–ª
        current_pid = os.getpid()
        with open(self.lock_file, 'w') as f:
            f.write(str(current_pid))
        
        logger.info(f"üîí –ü–æ–ª—É—á–µ–Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ (PID: {current_pid})")
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ—á–∏—Å—Ç–∫–∏ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ
        atexit.register(self._release_lock)

    def _release_lock(self):
        """–û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏"""
        try:
            if os.path.exists(self.lock_file):
                os.remove(self.lock_file)
                logger.info("üîì –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∞")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: {e}")

    def _clear_pending_updates(self):
        """–û—á–∏—Å—Ç–∫–∞ pending updates –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è 409 –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤"""
        try:
            logger.info("üßπ –û—á–∏—â–∞–µ–º pending updates...")
            url = f"{self.base_url}/getUpdates"
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ pending updates —Å –±–æ–ª—å—à–∏–º offset —á—Ç–æ–±—ã –∏—Ö "—Å—ä–µ—Å—Ç—å"
            response = requests.get(url, params={"offset": -1, "timeout": 1}, timeout=5)
            if response.status_code == 200:
                data = response.json()
                if data.get("ok") and data.get("result"):
                    # –ï—Å–ª–∏ –µ—Å—Ç—å updates, –ø–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π ID –∏ –¥–µ–ª–∞–µ–º –µ—â–µ –æ–¥–∏–Ω –∑–∞–ø—Ä–æ—Å —á—Ç–æ–±—ã –∏—Ö –æ—á–∏—Å—Ç–∏—Ç—å
                    last_update = data["result"][-1] if data["result"] else None
                    if last_update:
                        offset = last_update["update_id"] + 1
                        requests.get(url, params={"offset": offset, "timeout": 1}, timeout=5)
                        logger.info(f"‚úÖ –û—á–∏—â–µ–Ω—ã pending updates –¥–æ ID: {offset}")
                else:
                    logger.info("‚úÖ –ù–µ—Ç pending updates –¥–ª—è –æ—á–∏—Å—Ç–∫–∏")
            else:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å updates: HTTP {response.status_code}")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ pending updates: {e}")
    
    def send_status_message(self, message: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ç—É—Å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"""
        try:
            url = f"{self.publish_base_url}/sendMessage"
            data = {"chat_id": self.publish_channel_id, "text": f"[MONITOR] {message}", "disable_notification": True}
            requests.post(url, json=data, timeout=15)
        except Exception as e:
            logger.error(f"Error sending status: {e}")

    def get_updates(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –∏–∑ –∫–∞–Ω–∞–ª–∞"""
        url = f"{self.base_url}/getUpdates"
        params = {"offset": self.last_update_id + 1, "timeout": 30, "allowed_updates": ["channel_post"]}
        try:
            response = requests.get(url, params=params, timeout=35)
            
            # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ 409 –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞
            if response.status_code == 409:
                logger.warning("üîÑ –û–±–Ω–∞—Ä—É–∂–µ–Ω –∫–æ–Ω—Ñ–ª–∏–∫—Ç (409), –æ—á–∏—â–∞–µ–º pending updates...")
                self._clear_pending_updates()
                time.sleep(5)
                return
            
            response.raise_for_status()
            data = response.json()
            if data.get("ok") and data.get("result"):
                for update in data["result"]:
                    self.last_update_id = update["update_id"]
                    yield update
        except requests.exceptions.HTTPError as e:
            if e.response.status_code == 409:
                logger.warning("üîÑ HTTP 409 –∫–æ–Ω—Ñ–ª–∏–∫—Ç, –æ—á–∏—â–∞–µ–º pending updates...")
                self._clear_pending_updates()
                time.sleep(5)
            else:
                logger.warning(f"HTTP error getting updates: {e}, will retry...")
                time.sleep(10)
        except requests.exceptions.RequestException as e:
            logger.warning(f"Network error getting updates: {e}, will retry...")
            time.sleep(10)
        except Exception as e:
            logger.error(f"Unhandled error getting updates: {e}")
            time.sleep(15)

    def process_channel_message(self, message: dict):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∫–∞–Ω–∞–ª–∞: –ø–∞—Ä—Å–∏–Ω–≥ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î."""
        message_id = message.get("message_id")
        if not message_id or message_id in self.processed_messages:
            return

        text = message.get("text", "").strip()
        if not text:
            return

        logger.info(f"New message received (ID: {message_id}): {text[:100]}...")
        self.send_status_message(f"Received: {text[:50]}...")

        try:
            url_pattern = r'https?://[^\s]+'
            urls = re.findall(url_pattern, text)
            
            if urls:
                url = urls[0]
                logger.info(f"üåê Parsing URL: {url}")
                
                # –ü—Ä–æ–±—É–µ–º –ø–∞—Ä—Å–∏—Ç—å —Å —Ç–µ–∫—É—â–∏–º –ø–∞—Ä—Å–µ—Ä–æ–º
                parsed_data = None
                try:
                    parsed_data = self.web_parser.parse_url(url)
                except Exception as e:
                    logger.warning(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å —Ç–µ–∫—É—â–∏–º –ø–∞—Ä—Å–µ—Ä–æ–º: {e}")
                    logger.info("üîÑ –ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞—Ä—Å–µ—Ä...")
                    
                    # –ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞—Ä—Å–µ—Ä
                    try:
                        self.web_parser.close()
                    except:
                        pass
                    
                    self.web_parser = WebParser(self.config_path)
                    
                    # –ü—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑ —Å –Ω–æ–≤—ã–º –ø–∞—Ä—Å–µ—Ä–æ–º
                    try:
                        parsed_data = self.web_parser.parse_url(url)
                    except Exception as e2:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞–∂–µ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e2}")
                
                if parsed_data and parsed_data.get('success') and parsed_data.get('title'):
                    news_data = parsed_data
                    news_data['url'] = url
                    logger.info(f"‚úÖ URL parsed: {news_data.get('title', '')[:50]}...")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω fallback –ø–∞—Ä—Å–∏–Ω–≥
                    if parsed_data.get('parsed_with') in ['fallback', 'selenium_fallback']:
                        logger.warning(f"‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω {parsed_data.get('parsed_with')} –¥–ª—è {url}")
                        self.send_status_message(f"‚ö†Ô∏è –ß–∞—Å—Ç–∏—á–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω ({parsed_data.get('parsed_with')}): {news_data['title'][:40]}...")
                else:
                    # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—É—é –Ω–æ–≤–æ—Å—Ç—å –¥–∞–∂–µ –ø—Ä–∏ –ø–æ–ª–Ω–æ–º —Å–±–æ–µ –ø–∞—Ä—Å–∏–Ω–≥–∞
                    logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–ø–∞—Ä—Å–∏—Ç—å {url}, —Å–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—É—é –Ω–æ–≤–æ—Å—Ç—å")
                    news_data = {
                        'url': url,
                        'title': f"–ù–æ–≤–æ—Å—Ç—å: {url.split('/')[-1][:50]}",
                        'description': f"–°—Å—ã–ª–∫–∞ –Ω–∞ –Ω–æ–≤–æ—Å—Ç—å: {url}. –ü–æ–ª–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –∏–∑-–∑–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π —Å–∞–π—Ç–∞.",
                        'content': f"–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: {url}",
                        'source': urlparse(url).netloc if url else 'Unknown',
                        'content_type': 'news',
                        'published': datetime.now().isoformat(),
                        'parsing_failed': True
                    }
            else:
                news_data = {
                    'url': f'telegram_message_{message_id}',
                    'title': text[:120],
                    'description': text,
                    'content': text,
                    'source': 'Telegram Message'
                }

            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø–æ–ª—è, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
            news_data.setdefault('source', 'Unknown')
            news_data.setdefault('content_type', 'news')
            news_data.setdefault('published', datetime.now().isoformat())

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤–æ—Å—Ç—å –≤ –ë–î —á–µ—Ä–µ–∑ telegram_bot
            news_id = self.telegram_bot._save_parsed_news(news_data, 0, self.monitor_channel_id)
            if news_id:
                logger.info(f"‚úÖ News saved to DB with ID: {news_id}")
                self.send_status_message(f"‚úÖ Saved to DB (ID: {news_id}): {news_data['title'][:40]}...")
                self.processed_messages.add(message_id)
            else:
                logger.error("Failed to save news to database.")
                self.send_status_message("‚ùå Error saving to DB.")

        except Exception as e:
            logger.error(f"Failed to process message {message_id}: {e}", exc_info=True)
            self.send_status_message(f"‚ùå Error processing message: {e}")

    def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã"""
        logger.info("üßπ –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤...")
        
        try:
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º web_parser
            if hasattr(self, 'web_parser') and self.web_parser:
                self.web_parser.close()
                logger.info("‚úì WebParser –∑–∞–∫—Ä—ã—Ç")
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è WebParser: {e}")
        
        try:
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º telegram_bot
            if hasattr(self, 'telegram_bot') and self.telegram_bot:
                if hasattr(self.telegram_bot, 'close'):
                    self.telegram_bot.close()
                logger.info("‚úì TelegramBot –∑–∞–∫—Ä—ã—Ç")
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è TelegramBot: {e}")
        
        # –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
        self._release_lock()
        
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–±–æ—Ä–∫–∞ –º—É—Å–æ—Ä–∞
        try:
            import gc
            gc.collect()
        except:
            pass
        
        logger.info("‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

    def __del__(self):
        """–î–µ—Å—Ç—Ä—É–∫—Ç–æ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–∏ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        try:
            self.cleanup()
        except:
            pass

    def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞."""
        logger.info("Starting channel monitoring...")
        logger.info("Press Ctrl+C to stop.")
        self.send_status_message("üöÄ Monitor service started.")

        while True:
            try:
                for update in self.get_updates():
                    if "channel_post" in update:
                        message = update["channel_post"]
                        chat_id = message.get("chat", {}).get("id")
                        if str(chat_id) == str(self.monitor_channel_id):
                            self.process_channel_message(message)
                time.sleep(5)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
            except KeyboardInterrupt:
                logger.info("Monitoring stopped by user.")
                self.send_status_message("üõë Monitor service stopped.")
                self.cleanup()
                break
            except Exception as e:
                logger.error(f"Critical error in monitoring loop: {e}", exc_info=True)
                self.send_status_message(f"CRITICAL ERROR: {e}")
                time.sleep(20)

def main():
    """–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∞."""
    monitor = ChannelMonitor()
    monitor.run()

if __name__ == "__main__":
    main()
