#!/usr/bin/env python3
"""
–ê–≤—Ç–æ–Ω–æ–º–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä Telegram –∫–∞–Ω–∞–ª–∞ –¥–ª—è shorts_news
–ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç –∫–∞–Ω–∞–ª –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏.
"""

import os
import sys
import logging
import requests
import time
from pathlib import Path
from dotenv import load_dotenv
import re
from datetime import datetime
from urllib.parse import urlparse
import atexit

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
env_path = Path('.') / 'config' / '.env'
load_dotenv(dotenv_path=env_path)

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ —Å–∫—Ä–∏–ø—Ç–∞–º
sys.path.append(os.path.abspath('scripts'))

try:
    from telegram_bot import NewsTelegramBot
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–æ–≤—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É –¥–≤–∏–∂–∫–æ–≤
    from engines import registry, PoliticoEngine, WashingtonPostEngine, TwitterEngine, NBCNewsEngine
except ImportError as e:
    print(f"Critical Error: Failed to import necessary modules. Make sure you are running this from the project root and venv is active. Details: {e}")
    sys.exit(1)


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('logs/channel_monitor.log', encoding='utf-8'),
        logging.StreamHandler(sys.stdout)
    ]
)
logger = logging.getLogger(__name__)

class ChannelMonitor:
    """–ú–æ–Ω–∏—Ç–æ—Ä Telegram –∫–∞–Ω–∞–ª–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π –≤ –ë–î"""

    def __init__(self):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä–∞
        self.lock_file = 'logs/channel_monitor.lock'
        self._acquire_lock()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑–≤–ª–µ–∫–∞—é—Ç—Å—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ –∫–æ–Ω—Ñ–∏–≥–∞
        self.monitor_channel_id = os.getenv("MONITOR_CHANNEL_ID", "-1003056499503")
        self.bot_token = os.getenv("TELEGRAM_BOT_TOKEN", "YOUR_TELEGRAM_BOT_TOKEN_HERE")
        self.publish_channel_id = os.getenv("PUBLISH_CHANNEL_ID", "YOUR_PUBLISH_CHANNEL_ID_HERE")
        self.publish_bot_token = os.getenv("PUBLISH_BOT_TOKEN", "YOUR_PUBLISH_BOT_TOKEN_HERE")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∑–∞–¥–∞—á
        self.base_url = f"https://api.telegram.org/bot{self.bot_token}"  # –î–ª—è –∫–∞–Ω–∞–ª–∞
        self.publish_base_url = f"https://api.telegram.org/bot{self.publish_bot_token}"  # –î–ª—è –≥—Ä—É–ø–ø—ã

        self.last_update_id = 0
        self.last_group_update_id = 0
        self.processed_messages = set()
        self.config_path = 'config/config.yaml'
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        self.config = self._load_config(self.config_path)
        
        # –û—á–∏—â–∞–µ–º pending updates —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å 409 –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
        self._clear_pending_updates()

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        self.telegram_bot = NewsTelegramBot(self.config_path)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–≤–∏–∂–∫–æ–≤
        self._initialize_engines()
    
    def _load_config(self, config_path: str):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        import yaml
        with open(config_path, 'r', encoding='utf-8') as f:
            return yaml.safe_load(f)
        
        # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º .part —Ñ–∞–π–ª—ã –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
        self._rename_part_files()

        os.makedirs('logs', exist_ok=True)
        logger.info("Channel Monitor initialized")
        logger.info(f"Monitoring channel: {self.monitor_channel_id}")
        logger.info(f"Publishing to channel (for status updates): {self.publish_channel_id}")

    def _initialize_engines(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–≤–∏–∂–∫–æ–≤ –Ω–æ–≤–æ—Å—Ç–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤"""
        try:
            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –¥–≤–∏–∂–∫–∏
            registry.register_engine('politico', PoliticoEngine)
            registry.register_engine('washingtonpost', WashingtonPostEngine)
            registry.register_engine('twitter', TwitterEngine)
            registry.register_engine('nbcnews', NBCNewsEngine)
            
            # TODO: –î–æ–±–∞–≤–∏—Ç—å –æ—Å—Ç–∞–ª—å–Ω—ã–µ –¥–≤–∏–∂–∫–∏
            # registry.register_engine('apnews', APNewsEngine)
            # registry.register_engine('cnn', CNNEngine)
            # registry.register_engine('reuters', ReutersEngine)
            
            logger.info("‚úÖ –î–≤–∏–∂–∫–∏ –Ω–æ–≤–æ—Å—Ç–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–≤–∏–∂–∫–æ–≤: {e}")

    def _parse_url_with_engines(self, url: str):
        """
        –ü–∞—Ä—Å–∏—Ç URL –∏—Å–ø–æ–ª—å–∑—É—è –¥–≤–∏–∂–∫–∏ –Ω–æ–≤–æ—Å—Ç–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        
        Args:
            url: URL –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –Ω–æ–≤–æ—Å—Ç–∏ –∏–ª–∏ None
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–π –¥–≤–∏–∂–æ–∫
            engine = registry.get_engine_for_url(url, {})
            
            if not engine:
                logger.warning(f"–ù–µ –Ω–∞–π–¥–µ–Ω –ø–æ–¥—Ö–æ–¥—è—â–∏–π –¥–≤–∏–∂–æ–∫ –¥–ª—è URL: {url[:50]}...")
                return None
            
            # –ü–∞—Ä—Å–∏–º URL —á–µ—Ä–µ–∑ –¥–≤–∏–∂–æ–∫
            logger.info(f"üîç –ü–∞—Ä—Å–∏–Ω–≥ —á–µ—Ä–µ–∑ –¥–≤–∏–∂–æ–∫ {engine.source_name}: {url[:50]}...")
            content = engine.parse_url(url)
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –º–µ–¥–∏–∞
            media = engine.extract_media(url, content)
            content.update(media)
            
            # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
            if not engine.validate_content(content):
                logger.warning(f"–ö–æ–Ω—Ç–µ–Ω—Ç –Ω–µ –ø—Ä–æ—à–µ–ª –≤–∞–ª–∏–¥–∞—Ü–∏—é –¥–≤–∏–∂–∫–∞ {engine.source_name}")
                return None
            
            # –ï–¥–∏–Ω—ã–π –ª–æ–≥: –¥–ª–∏–Ω–∞ –∏ –ø—Ä–µ–≤—å—é –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
            try:
                content_text = content.get('content') or ''
                logger.info(f"üìù Engine content length: {len(content_text)} symbols")
                if content_text:
                    preview = (content_text.replace('\n', ' ').strip())[:300]
                    logger.info(f"üìù Engine content preview: {preview}...")
                logger.info(f"üñºÔ∏è Media counts: images={len(content.get('images', []))}, videos={len(content.get('videos', []))}")
            except Exception:
                pass
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç, –æ–∂–∏–¥–∞–µ–º—ã–π channel_monitor
            result = {
                'success': True,
                'title': content.get('title', ''),
                'description': content.get('description', ''),
                'content': content.get('content', ''),  # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç —Å—Ç–∞—Ç—å–∏
                'images': content.get('images', []),
                'videos': content.get('videos', []),
                'source': content.get('source', ''),
                'published': content.get('published', ''),
                'content_type': content.get('content_type', 'news_article'),
                'username': content.get('username', ''),  # –î–æ–±–∞–≤–ª—è–µ–º username –¥–ª—è –∞–≤–∞—Ç–∞—Ä–∫–∏
                'avatar_url': content.get('avatar_url', '')  # –î–æ–±–∞–≤–ª—è–µ–º URL –∞–≤–∞—Ç–∞—Ä–∫–∏
            }
            
            # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            if content.get('images'):
                logger.info(f"üîç DEBUG: –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ –¥–≤–∏–∂–∫–∞: {content.get('images')}")
                logger.info(f"üîç DEBUG: –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ result: {result.get('images')}")
            
            logger.info(f"‚úÖ URL —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –¥–≤–∏–∂–∫–æ–º {engine.source_name}")
            return result
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —á–µ—Ä–µ–∑ –¥–≤–∏–∂–∫–∏: {e}")
            return None
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º "–ø–∏–Ω–≥" –≤ –∫–∞–Ω–∞–ª –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
        self._send_publish_ping()

    def _send_publish_ping(self):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ."""
        if not self.publish_channel_id or not self.publish_bot_token:
            logger.warning("‚ö†Ô∏è –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã PUBLISH_CHANNEL_ID –∏–ª–∏ PUBLISH_BOT_TOKEN. –ü–∏–Ω–≥ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
            return
        
        try:
            url = f"{self.publish_base_url}/sendMessage"
            payload = {
                'chat_id': self.publish_channel_id,
                'text': "‚úÖ Monitor online. –°–µ—Ä–≤–∏—Å–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã."
            }
            response = requests.post(url, json=payload, timeout=5)
            response.raise_for_status()
            logger.info(f"üì° ping status={response.status_code}: {response.text[:100]}")
        except requests.exceptions.RequestException as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∏–Ω–≥–∞ –≤ PUBLISH_CHANNEL_ID: {e}")
        except Exception as e:
            logger.error(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–∏–Ω–≥–∞ –≤ PUBLISH_CHANNEL_ID: {e}")

    def _acquire_lock(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∑–∞–ø—É—Å–∫–æ–≤"""
        os.makedirs('logs', exist_ok=True)
        
        if os.path.exists(self.lock_file):
            try:
                with open(self.lock_file, 'r') as f:
                    old_pid = int(f.read().strip())
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø—Ä–æ—Ü–µ—Å—Å —Å —Ç–∞–∫–∏–º PID (Windows)
                import subprocess
                try:
                    result = subprocess.run(['tasklist', '/FI', f'PID eq {old_pid}'], 
                                          capture_output=True, text=True, timeout=5)
                    if str(old_pid) in result.stdout:
                        logger.error(f"‚ùå –î—Ä—É–≥–æ–π —ç–∫–∑–µ–º–ø–ª—è—Ä —É–∂–µ –∑–∞–ø—É—â–µ–Ω (PID: {old_pid})")
                        raise SystemExit("–î—Ä—É–≥–æ–π —ç–∫–∑–µ–º–ø–ª—è—Ä channel_monitor —É–∂–µ –∑–∞–ø—É—â–µ–Ω!")
                    else:
                        logger.info(f"üßπ –£–¥–∞–ª—è–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–π lock —Ñ–∞–π–ª (PID {old_pid} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)")
                        os.remove(self.lock_file)
                except subprocess.TimeoutExpired:
                    logger.warning("‚ö†Ô∏è –¢–∞–π–º–∞—É—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ PID, —É–¥–∞–ª—è–µ–º lock —Ñ–∞–π–ª")
                    os.remove(self.lock_file)
            except (ValueError, FileNotFoundError):
                logger.warning("‚ö†Ô∏è –ü–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–π lock —Ñ–∞–π–ª, —É–¥–∞–ª—è–µ–º...")
                try:
                    os.remove(self.lock_file)
                except Exception:
                    pass
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π lock —Ñ–∞–π–ª
        current_pid = os.getpid()
        with open(self.lock_file, 'w') as f:
            f.write(str(current_pid))
        
        logger.info(f"üîí –ü–æ–ª—É—á–µ–Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ (PID: {current_pid})")
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ—á–∏—Å—Ç–∫–∏ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ
        atexit.register(self._release_lock)

    def _release_lock(self):
        """–û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏"""
        try:
            if os.path.exists(self.lock_file):
                os.remove(self.lock_file)
                logger.info("üîì –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∞")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: {e}")

    def _clear_pending_updates(self):
        """–û—á–∏—Å—Ç–∫–∞ pending updates –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è 409 –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤"""
        try:
            logger.info("üßπ –û—á–∏—â–∞–µ–º pending updates...")
            url = f"{self.base_url}/getUpdates"
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ pending updates —Å –±–æ–ª—å—à–∏–º offset —á—Ç–æ–±—ã –∏—Ö "—Å—ä–µ—Å—Ç—å"
            response = requests.get(url, params={"offset": -1, "timeout": 1}, timeout=5)
            if response.status_code == 200:
                data = response.json()
                if data.get("ok") and data.get("result"):
                    # –ï—Å–ª–∏ –µ—Å—Ç—å updates, –ø–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π ID –∏ –¥–µ–ª–∞–µ–º –µ—â–µ –æ–¥–∏–Ω –∑–∞–ø—Ä–æ—Å —á—Ç–æ–±—ã –∏—Ö –æ—á–∏—Å—Ç–∏—Ç—å
                    last_update = data["result"][-1] if data["result"] else None
                    if last_update:
                        offset = last_update["update_id"] + 1
                        requests.get(url, params={"offset": offset, "timeout": 1}, timeout=5)
                        logger.info(f"‚úÖ –û—á–∏—â–µ–Ω—ã pending updates –¥–æ ID: {offset}")
                else:
                    logger.info("‚úÖ –ù–µ—Ç pending updates –¥–ª—è –æ—á–∏—Å—Ç–∫–∏")
            else:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å updates: HTTP {response.status_code}")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ pending updates: {e}")
    
    def send_status_message(self, message: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ç—É—Å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"""
        try:
            url = f"{self.publish_base_url}/sendMessage"
            data = {"chat_id": self.publish_channel_id, "text": f"[MONITOR] {message}", "disable_notification": True}
            requests.post(url, json=data, timeout=15)
        except Exception as e:
            logger.error(f"Error sending status: {e}")

    def get_updates(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –∏–∑ –∫–∞–Ω–∞–ª–∞ –∏ –≥—Ä—É–ø–ø—ã"""
        url = f"{self.base_url}/getUpdates"
        params = {"offset": self.last_update_id + 1, "timeout": 30, "allowed_updates": ["channel_post", "message"]}
        try:
            response = requests.get(url, params=params, timeout=35)
            
            # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ 409 –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞
            if response.status_code == 409:
                logger.warning("üîÑ –û–±–Ω–∞—Ä—É–∂–µ–Ω –∫–æ–Ω—Ñ–ª–∏–∫—Ç (409), –æ—á–∏—â–∞–µ–º pending updates...")
                self._clear_pending_updates()
                time.sleep(5)
                return
            
            response.raise_for_status()
            data = response.json()
            if data.get("ok") and data.get("result"):
                for update in data["result"]:
                    self.last_update_id = update["update_id"]
                    yield update
        except requests.exceptions.HTTPError as e:
            if e.response.status_code == 409:
                logger.warning("üîÑ HTTP 409 –∫–æ–Ω—Ñ–ª–∏–∫—Ç, –æ—á–∏—â–∞–µ–º pending updates...")
                self._clear_pending_updates()
                time.sleep(5)
            else:
                logger.warning(f"HTTP error getting updates: {e}, will retry...")
                time.sleep(10)
        except requests.exceptions.RequestException as e:
            logger.warning(f"Network error getting updates: {e}, will retry...")
            time.sleep(10)
        except Exception as e:
            logger.error(f"Unhandled error getting updates: {e}")
            time.sleep(15)

    def get_group_updates(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –∏–∑ –∞–¥–º–∏–Ω-–≥—Ä—É–ø–ø—ã —á–µ—Ä–µ–∑ publish-–±–æ—Ç–∞."""
        url = f"{self.publish_base_url}/getUpdates"
        params = {"offset": self.last_group_update_id + 1, "timeout": 30, "allowed_updates": ["message"]}
        try:
            response = requests.get(url, params=params, timeout=35)
            if response.status_code == 409:
                # –¥–ª—è –≤—Ç–æ—Ä–æ–≥–æ –±–æ—Ç–∞ —á–∏—Å—Ç–∏–º –µ–≥–æ –æ—á–µ—Ä–µ–¥—å –æ—Ç–¥–µ–ª—å–Ω–æ
                try:
                    requests.get(url, params={"offset": -1, "timeout": 1}, timeout=5)
                except Exception:
                    pass
                time.sleep(5)
                return
            response.raise_for_status()
            data = response.json()
            if data.get("ok") and data.get("result"):
                for update in data["result"]:
                    self.last_group_update_id = update["update_id"]
                    yield update
        except Exception as e:
            logger.warning(f"Group updates error: {e}")
            time.sleep(10)

    def process_channel_message(self, message: dict):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∫–∞–Ω–∞–ª–∞: –ø–∞—Ä—Å–∏–Ω–≥ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î."""
        message_id = message.get("message_id")
        if not message_id or message_id in self.processed_messages:
            return

        text = message.get("text", "").strip()
        if not text:
            return

        logger.info(f"New message received (ID: {message_id}): {text[:100]}...")
        self.send_status_message(f"Received: {text[:50]}...")

        try:
            url_pattern = r'https?://[^\s]+'
            urls = re.findall(url_pattern, text)
            
            if urls:
                url = urls[0]
                logger.info(f"üåê Parsing URL: {url}")
                
                # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –ø–∞—Ä—Å–∏—Ç—å —á–µ—Ä–µ–∑ –¥–≤–∏–∂–∫–∏
                parsed_data = None
                try:
                    parsed_data = self._parse_url_with_engines(url)
                    if parsed_data:
                        logger.info("‚úÖ URL –æ–±—Ä–∞–±–æ—Ç–∞–Ω —á–µ—Ä–µ–∑ –¥–≤–∏–∂–∫–∏")
                    else:
                        logger.info("‚ùå –î–≤–∏–∂–∫–∏ –∑–∞–±—Ä–∞–∫–æ–≤–∞–ª–∏ URL - –Ω–æ–≤–æ—Å—Ç—å –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
                        # –ù–ï –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —Å—Ç–∞—Ä—ã–π –ø–∞—Ä—Å–µ—Ä - –µ—Å–ª–∏ –¥–≤–∏–∂–æ–∫ –∑–∞–±—Ä–∞–∫–æ–≤–∞–ª, –∑–Ω–∞—á–∏—Ç –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç
                        return
                except Exception as e:
                    logger.warning(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —á–µ—Ä–µ–∑ –¥–≤–∏–∂–∫–∏: {e}")
                    logger.info("üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –±–∞–∑–æ–≤—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É...")
                    
                    try:
                        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É —á–µ—Ä–µ–∑ telegram_bot
                        parsed_data = self.telegram_bot._parse_url_with_engines(url)
                    except Exception as e2:
                        logger.warning(f"–û—à–∏–±–∫–∞ –±–∞–∑–æ–≤–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e2}")
                
                if parsed_data and parsed_data.get('success') and parsed_data.get('title'):
                    news_data = parsed_data
                    news_data['url'] = url
                    logger.info(f"‚úÖ URL parsed: {news_data.get('title', '')[:50]}...")
                    
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –º–µ–¥–∏–∞ —á–µ—Ä–µ–∑ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π MediaManager
                    try:
                        source = (news_data.get('source') or '').lower()
                        if 'twitter' in source:
                            from engines.twitter.twitter_media_manager import TwitterMediaManager
                            media_manager = TwitterMediaManager(self.config)
                        elif 'politico' in source:
                            from engines.politico.politico_media_manager import PoliticoMediaManager
                            media_manager = PoliticoMediaManager(self.config)
                        elif 'washington' in source or 'washington post' in source:
                            from engines.washingtonpost.washingtonpost_media_manager import WashingtonPostMediaManager
                            media_manager = WashingtonPostMediaManager(self.config)
                        elif 'nbc' in source or 'nbc news' in source:
                            from engines.nbcnews.nbcnews_media_manager import NBCNewsMediaManager
                            media_manager = NBCNewsMediaManager(self.config)
                        else:
                            from scripts.media_manager import MediaManager
                            media_manager = MediaManager(self.config)
                        
                        media_result = media_manager.process_news_media(news_data)
                        news_data.update(media_result)
                        logger.info(f"üì∏ –ú–µ–¥–∏–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: has_media={media_result.get('has_media', False)}")
                    except Exception as e:
                        logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–µ–¥–∏–∞: {e}")
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–µ—Ä–≤–∏—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≤–∏–¥–µ–æ, –µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–æ
                    videos = news_data.get('videos', [])
                    if videos and self.telegram_bot:
                        try:
                            self.telegram_bot._notify_group_on_video(
                                news_data.get('id', 0), 
                                news_data.get('title', ''), 
                                videos
                            )
                        except Exception as e:
                            logger.warning(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–µ—Ä–≤–∏—Å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –≤–∏–¥–µ–æ: {e}")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω fallback –ø–∞—Ä—Å–∏–Ω–≥
                    if parsed_data.get('parsed_with') in ['fallback', 'selenium_fallback']:
                        logger.warning(f"‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω {parsed_data.get('parsed_with')} –¥–ª—è {url}")
                        self.send_status_message(f"‚ö†Ô∏è –ß–∞—Å—Ç–∏—á–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω ({parsed_data.get('parsed_with')}): {news_data['title'][:40]}...")
                else:
                    # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—É—é –Ω–æ–≤–æ—Å—Ç—å –¥–∞–∂–µ –ø—Ä–∏ –ø–æ–ª–Ω–æ–º —Å–±–æ–µ –ø–∞—Ä—Å–∏–Ω–≥–∞
                    logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–ø–∞—Ä—Å–∏—Ç—å {url}, —Å–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—É—é –Ω–æ–≤–æ—Å—Ç—å")
                    news_data = {
                        'url': url,
                        'title': f"–ù–æ–≤–æ—Å—Ç—å: {url.split('/')[-1][:50]}",
                        'description': f"–°—Å—ã–ª–∫–∞ –Ω–∞ –Ω–æ–≤–æ—Å—Ç—å: {url}. –ü–æ–ª–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –∏–∑-–∑–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π —Å–∞–π—Ç–∞.",
                        'content': f"–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: {url}",
                        'source': urlparse(url).netloc if url else 'Unknown',
                        'content_type': 'news',
                        'published': datetime.now().isoformat(),
                        'parsing_failed': True
                    }
            else:
                news_data = {
                    'url': f'telegram_message_{message_id}',
                    'title': text[:120],
                    'description': text,
                    'content': text,
                    'source': 'Telegram Message'
                }

            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø–æ–ª—è, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
            news_data.setdefault('source', 'Unknown')
            news_data.setdefault('content_type', 'news')
            news_data.setdefault('published', datetime.now().isoformat())

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤–æ—Å—Ç—å –≤ –ë–î —á–µ—Ä–µ–∑ telegram_bot
            news_id = self.telegram_bot._save_parsed_news(news_data, 0, self.monitor_channel_id)
            if news_id:
                logger.info(f"‚úÖ News saved to DB with ID: {news_id}")
                self.send_status_message(f"‚úÖ Saved to DB (ID: {news_id}): {news_data['title'][:40]}...")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤–∏–¥–µ–æ –≤ –Ω–æ–≤–æ—Å—Ç–∏, –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –æ—Ç media_manager
                has_video = news_data.get('has_video', False)
                
                if has_video:
                    # –ï—Å–ª–∏ –µ—Å—Ç—å –≤–∏–¥–µ–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —É–∫–∞–∑–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —Å—Ç–∞—Ä—Ç–∞
                    self.send_video_start_request(news_id, news_data)
                    logger.info(f"üé¨ –ù–æ–≤–æ—Å—Ç—å {news_id} —Å–æ–¥–µ—Ä–∂–∏—Ç –≤–∏–¥–µ–æ, –æ–∂–∏–¥–∞–µ–º –∫–æ–º–∞–Ω–¥—É /startat")
                else:
                    # –ï—Å–ª–∏ –≤–∏–¥–µ–æ –Ω–µ—Ç, –∑–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
                    logger.info(f"üöÄ –ù–æ–≤–æ—Å—Ç—å {news_id} –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –≤–∏–¥–µ–æ, –∑–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏...")
                    self.send_status_message(f"üöÄ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–ª—è –Ω–æ–≤–æ—Å—Ç–∏ ID {news_id} (–Ω–µ—Ç –≤–∏–¥–µ–æ).")
                    self.trigger_news_processing(news_id)
                    self.processed_messages.add(message_id)
            else:
                logger.error("Failed to save news to database.")
                self.send_status_message("‚ùå Error saving to DB.")

        except Exception as e:
            logger.error(f"Failed to process message {message_id}: {e}", exc_info=True)
            self.send_status_message(f"‚ùå Error processing message: {e}")

    def send_video_start_request(self, news_id: int, news_data: dict):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ —É–∫–∞–∑–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —Å—Ç–∞—Ä—Ç–∞ –≤–∏–¥–µ–æ –≤ –≥—Ä—É–ø–ø—É —Å –ø—Ä–µ–≤—å—é –≤–∏–¥–µ–æ."""
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≤–∏–¥–µ–æ
            video_url = None
            if news_data.get('videos'):
                video_url = news_data['videos'][0]
                video_info = f"üé• –í–∏–¥–µ–æ –Ω–∞–π–¥–µ–Ω–æ: {video_url}"
            elif 'youtube.com' in news_data.get('content', '') or 'youtu.be' in news_data.get('content', ''):
                video_info = "üé• YouTube –≤–∏–¥–µ–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ –≤ –∫–æ–Ω—Ç–µ–Ω—Ç–µ"
            else:
                video_info = "üé• –í–∏–¥–µ–æ –Ω–∞–π–¥–µ–Ω–æ –≤ –∫–æ–Ω—Ç–µ–Ω—Ç–µ"
            
            message = (
                f"üé¨ –ù–æ–≤–æ—Å—Ç—å ID {news_id} —Å–æ–¥–µ—Ä–∂–∏—Ç –≤–∏–¥–µ–æ!\n"
                f"–ó–∞–≥–æ–ª–æ–≤–æ–∫: {news_data.get('title', '')[:60]}...\n"
                f"{video_info}\n\n"
                f"–£–∫–∞–∂–∏—Ç–µ —Å—Ç–∞—Ä—Ç (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö) –∫–æ–º–∞–Ω–¥–æ–π:\n"
                f"`/startat {news_id} <seconds>`\n\n"
                f"–ù–∞–ø—Ä–∏–º–µ—Ä: `/startat {news_id} 5` ‚Äî –Ω–∞—á–∞—Ç—å —Å 5 —Å–µ–∫—É–Ω–¥—ã\n"
                f"–ò–ª–∏ `/startat {news_id} 0` ‚Äî –Ω–∞—á–∞—Ç—å —Å –Ω–∞—á–∞–ª–∞\n\n"
                f"–ü–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã –Ω–∞—á–Ω–µ—Ç—Å—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ!"
            )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ–º –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ –Ω–∞–ø—Ä—è–º—É—é
            can_send_video = False
            if video_url:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ª–∏ Telegram —ç—Ç–æ—Ç URL –Ω–∞–ø—Ä—è–º—É—é
                if any(domain in video_url for domain in ['youtube.com', 'youtu.be', 'vimeo.com', 'dailymotion.com']):
                    can_send_video = True
                else:
                    # –î–ª—è Twitter –∏ –¥—Ä—É–≥–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ —Å—Å—ã–ª–∫—É
                    can_send_video = False
            
            if can_send_video and video_url:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ —Å –ø—Ä–µ–≤—å—é –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
                url = f"{self.publish_base_url}/sendVideo"
                data = {
                    "chat_id": self.publish_channel_id,
                    "video": video_url,
                    "caption": message,
                    "parse_mode": "Markdown",
                    "disable_notification": False
                }
            else:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å—Å—ã–ª–∫–æ–π –Ω–∞ –≤–∏–¥–µ–æ
                url = f"{self.publish_base_url}/sendMessage"
                data = {
                    "chat_id": self.publish_channel_id,
                    "text": message,
                    "parse_mode": "Markdown",
                    "disable_notification": False
                }
            
            response = requests.post(url, json=data, timeout=10)
            response.raise_for_status()
            logger.info(f"‚úÖ –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—Ä–µ–º—è —Å—Ç–∞—Ä—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –¥–ª—è –Ω–æ–≤–æ—Å—Ç–∏ {news_id}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –≤—Ä–µ–º–µ–Ω–∏ —Å—Ç–∞—Ä—Ç–∞: {e}")

    def process_startat_command(self, message: dict):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /startat –∏–∑ –≥—Ä—É–ø–ø—ã."""
        try:
            text = message.get("text", "").strip()
            if not text.startswith("/startat"):
                return False
                
            # –ü–∞—Ä—Å–∏–º –∫–æ–º–∞–Ω–¥—É: /startat <news_id> <seconds>
            parts = text.split()
            if len(parts) != 3:
                return False
                
            try:
                news_id = int(parts[1])
                start_seconds = float(parts[2])
            except ValueError:
                return False
                
            if start_seconds < 0:
                return False
                
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è —Å—Ç–∞—Ä—Ç–∞ –≤ –ë–î
            self.telegram_bot._set_video_start_seconds(news_id, start_seconds)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            confirm_message = f"‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤—Ä–µ–º—è —Å—Ç–∞—Ä—Ç–∞ {start_seconds}—Å –¥–ª—è –Ω–æ–≤–æ—Å—Ç–∏ {news_id}\nüöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É..."
            url = f"{self.publish_base_url}/sendMessage"
            data = {
                "chat_id": self.publish_channel_id,
                "text": confirm_message,
                "disable_notification": False
            }
            requests.post(url, json=data, timeout=10)
            
            logger.info(f"‚úÖ –ö–æ–º–∞–Ω–¥–∞ /startat –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞: –Ω–æ–≤–æ—Å—Ç—å {news_id}, —Å—Ç–∞—Ä—Ç {start_seconds}—Å")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –Ω–æ–≤–æ—Å—Ç–∏
            self.trigger_news_processing(news_id)
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /startat: {e}")
            return False

    def trigger_news_processing(self, news_id: int):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –Ω–æ–≤–æ—Å—Ç–∏ —Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º —Å–º–µ—â–µ–Ω–∏–µ–º –≤–∏–¥–µ–æ."""
        try:
            logger.info(f"üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –Ω–æ–≤–æ—Å—Ç–∏ {news_id} —Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º —Å–º–µ—â–µ–Ω–∏–µ–º...")
            
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
            import subprocess
            import sys
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º process_news_by_id.py –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –Ω–æ–≤–æ—Å—Ç–∏
            result = subprocess.run([
                sys.executable, "process_news_by_id.py", str(news_id)
            ], capture_output=True, text=True, timeout=300)
            
            if result.returncode == 0:
                logger.info(f"‚úÖ –ù–æ–≤–æ—Å—Ç—å {news_id} —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞")
                self.send_status_message(f"‚úÖ –ù–æ–≤–æ—Å—Ç—å {news_id} –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –∏ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –Ω–∞ YouTube!")
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–æ–≤–æ—Å—Ç–∏ {news_id}: {result.stderr}")
                self.send_status_message(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–æ–≤–æ—Å—Ç–∏ {news_id}")
                
        except subprocess.TimeoutExpired:
            logger.error(f"‚ùå –¢–∞–π–º–∞—É—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–æ–≤–æ—Å—Ç–∏ {news_id}")
            self.send_status_message(f"‚ùå –¢–∞–π–º–∞—É—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–æ–≤–æ—Å—Ç–∏ {news_id}")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–æ–≤–æ—Å—Ç–∏ {news_id}: {e}")
            self.send_status_message(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–æ–≤–æ—Å—Ç–∏ {news_id}")

    def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã"""
        logger.info("üßπ –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤...")
        
        try:
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º telegram_bot
            if hasattr(self, 'telegram_bot') and self.telegram_bot:
                logger.info("‚úì Telegram Bot –∑–∞–∫—Ä—ã—Ç")
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è Telegram Bot: {e}")
    
    def _rename_part_files(self):
        """–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ—Ç .part —Ñ–∞–π–ª—ã –≤ .mp4 –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"""
        try:
            import glob
            import os
            from pathlib import Path
            
            media_dir = Path("resources/media/news")
            if not media_dir.exists():
                return
                
            part_files = list(media_dir.glob("*.part"))
            if part_files:
                logger.info(f"üîÑ –ù–∞–π–¥–µ–Ω–æ {len(part_files)} .part —Ñ–∞–π–ª–æ–≤, –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º...")
                for part_file in part_files:
                    mp4_file = part_file.with_suffix('')  # –£–±–∏—Ä–∞–µ–º .part
                    try:
                        part_file.rename(mp4_file)
                        logger.info(f"‚úÖ –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω: {part_file.name} -> {mp4_file.name}")
                    except Exception as e:
                        logger.warning(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è {part_file.name}: {e}")
            else:
                logger.info("‚úÖ .part —Ñ–∞–π–ª–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        except Exception as e:
            logger.warning(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è .part —Ñ–∞–π–ª–æ–≤: {e}")
        
        try:
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º telegram_bot
            if hasattr(self, 'telegram_bot') and self.telegram_bot:
                if hasattr(self.telegram_bot, 'close'):
                    self.telegram_bot.close()
                logger.info("‚úì TelegramBot –∑–∞–∫—Ä—ã—Ç")
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è TelegramBot: {e}")
        
        # –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
        self._release_lock()
        
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–±–æ—Ä–∫–∞ –º—É—Å–æ—Ä–∞
        try:
            import gc
            gc.collect()
        except:
            pass
        
        logger.info("‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

    def __del__(self):
        """–î–µ—Å—Ç—Ä—É–∫—Ç–æ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–∏ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        try:
            self.cleanup()
        except Exception:
            pass

    def handle_stop_command(self, update: dict):
        """Handles the /stop_monitor command."""
        logger.info("üõë –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /stop_monitor. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
        self.send_status_message("üõë Monitor service is stopping by command.")
        
        # Manually consume the update
        update_id = update.get('update_id')
        if update_id:
            try:
                url = f"{self.publish_base_url}/getUpdates"
                params = {"offset": update_id + 1, "timeout": 1}
                requests.get(url, params=params, timeout=5)
                logger.info(f"‚úÖ –ö–æ–º–∞–Ω–¥–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ (update_id: {update_id}) –±—ã–ª–∞ –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è.")
                time.sleep(2)  # Add a small delay
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ—Ç–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—É—é: {e}")

        # The atexit handler will call cleanup and release the lock.
        sys.exit(0)

    def handle_restart_command(self, update: dict):
        """Handles the /restart_monitor command."""
        logger.info("üîÑ –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /restart_monitor. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫...")
        self.send_status_message("üîÑ Monitor service is restarting by command.")
        
        # Manually consume the update to prevent restart loop
        update_id = update.get('update_id')
        if update_id:
            try:
                url = f"{self.publish_base_url}/getUpdates"
                params = {"offset": update_id + 1, "timeout": 1}
                requests.get(url, params=params, timeout=5)
                logger.info(f"‚úÖ –ö–æ–º–∞–Ω–¥–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ (update_id: {update_id}) –±—ã–ª–∞ –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è.")
                time.sleep(2) # Add a small delay to allow Telegram to process the offset
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ—Ç–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—É—é: {e}")

        # Explicitly release lock before restarting
        try:
            self._release_lock()
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–º: {e}")

        # Replace the current process with a new one
        os.execv(sys.executable, ['python'] + sys.argv)

    def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞."""
        logger.info("Starting channel monitoring...")
        logger.info("Press Ctrl+C to stop.")
        self.send_status_message("üöÄ Monitor service started.")

        while True:
            try:
                # 1) –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –∫–∞–Ω–∞–ª–∞ (—á–µ—Ä–µ–∑ @tubepull_bot)
                for update in self.get_updates():
                    if "channel_post" in update:
                        message = update["channel_post"]
                        chat_id = message.get("chat", {}).get("id")
                        if str(chat_id) == str(self.monitor_channel_id):
                            self.process_channel_message(message)
                
                # 2) –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –∏–∑ –≥—Ä—É–ø–ø—ã (—á–µ—Ä–µ–∑ @tubepush_bot)
                for update in self.get_group_updates():
                    if "message" in update:
                        message = update["message"]
                        chat_id = message.get("chat", {}).get("id")
                        if str(chat_id) == str(self.publish_channel_id):
                            text = message.get("text", "").strip()
                            logger.info(f"üì® –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –≥—Ä—É–ø–ø—ã: {text[:50]}...")
                            
                            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
                            if text == '/stop_monitor':
                                self.handle_stop_command(update)
                                return # Exit the loop and script
                            elif text == '/restart_monitor':
                                self.handle_restart_command(update)
                                return # execv replaces the process
                            
                            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /startat
                            if self.process_startat_command(message):
                                # –ö–æ–º–∞–Ω–¥–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞, –¥–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ processed
                                message_id = message.get("message_id")
                                if message_id:
                                    self.processed_messages.add(f"group_{message_id}")
                                    
                time.sleep(5)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
            except KeyboardInterrupt:
                logger.info("Monitoring stopped by user.")
                self.send_status_message("üõë Monitor service stopped.")
                self.cleanup()
                break
            except Exception as e:
                logger.error(f"Critical error in monitoring loop: {e}", exc_info=True)
                self.send_status_message(f"CRITICAL ERROR: {e}")
                time.sleep(20)

def main():
    """–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∞."""
    monitor = ChannelMonitor()
    monitor.run()

if __name__ == "__main__":
    main()
